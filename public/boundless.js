!function(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],factory):"object"==typeof exports?exports.Boundless=factory(require(void 0),require(void 0)):root.Boundless=factory(root.React,root.ReactDOM)}(this,function(__WEBPACK_EXTERNAL_MODULE_0__,__WEBPACK_EXTERNAL_MODULE_1__){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.i=function(value){return value},__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{configurable:!1,enumerable:!0,get:getter})},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="./exports.js")}({"./exports.js":function(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:!0});var __WEBPACK_IMPORTED_MODULE_0__packages_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js");__webpack_require__.d(__webpack_exports__,"ArrowKeyNavigation",function(){return __WEBPACK_IMPORTED_MODULE_0__packages_boundless_arrow_key_navigation__.a});var __WEBPACK_IMPORTED_MODULE_1__packages_boundless_async__=__webpack_require__("./packages/boundless-async/index.js");__webpack_require__.d(__webpack_exports__,"Async",function(){return __WEBPACK_IMPORTED_MODULE_1__packages_boundless_async__.a});var __WEBPACK_IMPORTED_MODULE_2__packages_boundless_button__=__webpack_require__("./packages/boundless-button/index.js");__webpack_require__.d(__webpack_exports__,"Button",function(){return __WEBPACK_IMPORTED_MODULE_2__packages_boundless_button__.a});var __WEBPACK_IMPORTED_MODULE_3__packages_boundless_checkbox__=__webpack_require__("./packages/boundless-checkbox/index.js");__webpack_require__.d(__webpack_exports__,"Checkbox",function(){return __WEBPACK_IMPORTED_MODULE_3__packages_boundless_checkbox__.a});var __WEBPACK_IMPORTED_MODULE_4__packages_boundless_checkbox_group__=__webpack_require__("./packages/boundless-checkbox-group/index.js");__webpack_require__.d(__webpack_exports__,"CheckboxGroup",function(){return __WEBPACK_IMPORTED_MODULE_4__packages_boundless_checkbox_group__.a});var __WEBPACK_IMPORTED_MODULE_5__packages_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js");__webpack_require__.d(__webpack_exports__,"Dialog",function(){return __WEBPACK_IMPORTED_MODULE_5__packages_boundless_dialog__.a});var __WEBPACK_IMPORTED_MODULE_6__packages_boundless_fitted_text__=__webpack_require__("./packages/boundless-fitted-text/index.js");__webpack_require__.d(__webpack_exports__,"FittedText",function(){return __WEBPACK_IMPORTED_MODULE_6__packages_boundless_fitted_text__.a});var __WEBPACK_IMPORTED_MODULE_7__packages_boundless_image__=__webpack_require__("./packages/boundless-image/index.js");__webpack_require__.d(__webpack_exports__,"Image",function(){return __WEBPACK_IMPORTED_MODULE_7__packages_boundless_image__.a});var __WEBPACK_IMPORTED_MODULE_8__packages_boundless_input__=__webpack_require__("./packages/boundless-input/index.js");__webpack_require__.d(__webpack_exports__,"Input",function(){return __WEBPACK_IMPORTED_MODULE_8__packages_boundless_input__.a});var __WEBPACK_IMPORTED_MODULE_9__packages_boundless_modal__=__webpack_require__("./packages/boundless-modal/index.js");__webpack_require__.d(__webpack_exports__,"Modal",function(){return __WEBPACK_IMPORTED_MODULE_9__packages_boundless_modal__.a});var __WEBPACK_IMPORTED_MODULE_10__packages_boundless_pagination__=__webpack_require__("./packages/boundless-pagination/index.js");__webpack_require__.d(__webpack_exports__,"Pagination",function(){return __WEBPACK_IMPORTED_MODULE_10__packages_boundless_pagination__.a});var __WEBPACK_IMPORTED_MODULE_11__packages_boundless_popover__=__webpack_require__("./packages/boundless-popover/index.js");__webpack_require__.d(__webpack_exports__,"Popover",function(){return __WEBPACK_IMPORTED_MODULE_11__packages_boundless_popover__.a});var __WEBPACK_IMPORTED_MODULE_12__packages_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js");__webpack_require__.d(__webpack_exports__,"Portal",function(){return __WEBPACK_IMPORTED_MODULE_12__packages_boundless_portal__.a});var __WEBPACK_IMPORTED_MODULE_13__packages_boundless_progressive_disclosure__=__webpack_require__("./packages/boundless-progressive-disclosure/index.js");__webpack_require__.d(__webpack_exports__,"ProgressiveDisclosure",function(){return __WEBPACK_IMPORTED_MODULE_13__packages_boundless_progressive_disclosure__.a});var __WEBPACK_IMPORTED_MODULE_14__packages_boundless_progress__=__webpack_require__("./packages/boundless-progress/index.js");__webpack_require__.d(__webpack_exports__,"Progress",function(){return __WEBPACK_IMPORTED_MODULE_14__packages_boundless_progress__.a});var __WEBPACK_IMPORTED_MODULE_15__packages_boundless_radio__=__webpack_require__("./packages/boundless-radio/index.js");__webpack_require__.d(__webpack_exports__,"Radio",function(){return __WEBPACK_IMPORTED_MODULE_15__packages_boundless_radio__.a});var __WEBPACK_IMPORTED_MODULE_16__packages_boundless_segmented_control__=__webpack_require__("./packages/boundless-segmented-control/index.js");__webpack_require__.d(__webpack_exports__,"SegmentedControl",function(){return __WEBPACK_IMPORTED_MODULE_16__packages_boundless_segmented_control__.a});var __WEBPACK_IMPORTED_MODULE_17__packages_boundless_tokenized_input__=__webpack_require__("./packages/boundless-tokenized-input/index.js");__webpack_require__.d(__webpack_exports__,"TokenizedInput",function(){return __WEBPACK_IMPORTED_MODULE_17__packages_boundless_tokenized_input__.a});var __WEBPACK_IMPORTED_MODULE_18__packages_boundless_typeahead__=__webpack_require__("./packages/boundless-typeahead/index.js");__webpack_require__.d(__webpack_exports__,"Typeahead",function(){return __WEBPACK_IMPORTED_MODULE_18__packages_boundless_typeahead__.a})},"./node_modules/classnames/index.js":function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};!function(){"use strict";function classNames(){for(var classes=[],i=0;i<arguments.length;i++){var arg=arguments[i];if(arg){var argType=void 0===arg?"undefined":_typeof(arg);if("string"===argType||"number"===argType)classes.push(arg);else if(Array.isArray(arg))classes.push(classNames.apply(null,arg));else if("object"===argType)for(var key in arg)hasOwn.call(arg,key)&&arg[key]&&classes.push(key)}}return classes.join(" ")}var hasOwn={}.hasOwnProperty;void 0!==module&&module.exports?module.exports=classNames:"object"===_typeof(__webpack_require__("./node_modules/webpack/buildin/amd-options.js"))&&__webpack_require__("./node_modules/webpack/buildin/amd-options.js")?(__WEBPACK_AMD_DEFINE_ARRAY__=[],void 0!==(__WEBPACK_AMD_DEFINE_RESULT__=function(){return classNames}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)):window.classNames=classNames}()},"./node_modules/fbjs/lib/emptyFunction.js":function(module,exports,__webpack_require__){"use strict";function makeEmptyFunction(arg){return function(){return arg}}var emptyFunction=function(){};emptyFunction.thatReturns=makeEmptyFunction,emptyFunction.thatReturnsFalse=makeEmptyFunction(!1),emptyFunction.thatReturnsTrue=makeEmptyFunction(!0),emptyFunction.thatReturnsNull=makeEmptyFunction(null),emptyFunction.thatReturnsThis=function(){return this},emptyFunction.thatReturnsArgument=function(arg){return arg},module.exports=emptyFunction},"./node_modules/fbjs/lib/invariant.js":function(module,exports,__webpack_require__){"use strict";function invariant(condition,format,a,b,c,d,e,f){if(validateFormat(format),!condition){var error;if(void 0===format)error=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var args=[a,b,c,d,e,f],argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++]})),error.name="Invariant Violation"}throw error.framesToPop=1,error}}var validateFormat=function(format){};module.exports=invariant},"./node_modules/prop-types/factoryWithThrowingShims.js":function(module,exports,__webpack_require__){"use strict";var emptyFunction=__webpack_require__("./node_modules/fbjs/lib/emptyFunction.js"),invariant=__webpack_require__("./node_modules/fbjs/lib/invariant.js"),ReactPropTypesSecret=__webpack_require__("./node_modules/prop-types/lib/ReactPropTypesSecret.js");module.exports=function(){function shim(props,propName,componentName,location,propFullName,secret){secret!==ReactPropTypesSecret&&invariant(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function getShim(){return shim}shim.isRequired=shim;var ReactPropTypes={array:shim,bool:shim,func:shim,number:shim,object:shim,string:shim,symbol:shim,any:shim,arrayOf:getShim,element:shim,instanceOf:getShim,node:shim,objectOf:getShim,oneOf:getShim,oneOfType:getShim,shape:getShim};return ReactPropTypes.checkPropTypes=emptyFunction,ReactPropTypes.PropTypes=ReactPropTypes,ReactPropTypes}},"./node_modules/prop-types/index.js":function(module,exports,__webpack_require__){"function"==typeof Symbol&&Symbol.iterator;module.exports=__webpack_require__("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":function(module,exports,__webpack_require__){"use strict";module.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/webpack/buildin/amd-options.js":function(module,exports){(function(__webpack_amd_options__){module.exports=__webpack_amd_options__}).call(exports,{})},"./node_modules/webpack/buildin/global.js":function(module,exports){var g,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};g=function(){return this}();try{g=g||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":_typeof(window))&&(g=window)}module.exports=g},"./packages/boundless-arrow-key-navigation/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_react_dom__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__(1)),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_dom__),__webpack_require__("./packages/boundless-utils-omit-keys/index.js")),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),DATA_ATTRIBUTE_INDEX="data-focus-index",ArrowKeyNavigation=function(_PureComponent){function ArrowKeyNavigation(){var _ref,_temp,_this,_ret;_classCallCheck(this,ArrowKeyNavigation);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=ArrowKeyNavigation.__proto__||Object.getPrototypeOf(ArrowKeyNavigation)).call.apply(_ref,[this].concat(args))),_this.state={activeChildIndex:_this.props.defaultActiveChildIndex,children:[]},_this.handleKeyDown=function(event){switch(event.key){case"ArrowUp":_this.props.mode!==ArrowKeyNavigation.mode.VERTICAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(-1));break;case"ArrowLeft":_this.props.mode!==ArrowKeyNavigation.mode.HORIZONTAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(-1));break;case"ArrowDown":_this.props.mode!==ArrowKeyNavigation.mode.VERTICAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(1));break;case"ArrowRight":_this.props.mode!==ArrowKeyNavigation.mode.HORIZONTAL&&_this.props.mode!==ArrowKeyNavigation.mode.BOTH||(event.preventDefault(),_this.moveFocus(1))}_this.props.onKeyDown&&_this.props.onKeyDown(event)},_this.handleFocus=function(event){if(event.target.hasAttribute(DATA_ATTRIBUTE_INDEX)){var index=parseInt(event.target.getAttribute(DATA_ATTRIBUTE_INDEX),10),child=__WEBPACK_IMPORTED_MODULE_1_react__.Children.toArray(_this.state.children)[index];_this.setState({activeChildIndex:index}),child.props.onFocus&&child.props.onFocus(event)}},_this.persistWrapperElementReference=function(unknownType){_this.$wrapper=unknownType instanceof HTMLElement?unknownType:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react_dom__.findDOMNode)(unknownType)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(ArrowKeyNavigation,_PureComponent),_createClass(ArrowKeyNavigation,[{key:"getFilteredChildren",value:function(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return __WEBPACK_IMPORTED_MODULE_1_react__.Children.toArray(props.children).filter(Boolean)}},{key:"setActiveChildIndex",value:function(){if(0!==this.state.activeChildIndex){var numChildren=__WEBPACK_IMPORTED_MODULE_1_react__.Children.count(this.state.children);0===numChildren?this.setState({activeChildIndex:0}):this.state.activeChildIndex>=numChildren&&this.setState({activeChildIndex:numChildren-1})}}},{key:"componentWillMount",value:function(){this.setState({children:this.getFilteredChildren()})}},{key:"componentWillReceiveProps",value:function(nextProps){if(nextProps.children!==this.props.children)return this.setState({children:this.getFilteredChildren(nextProps)},this.setActiveChildIndex);this.setActiveChildIndex()}},{key:"componentDidUpdate",value:function(prevProps,prevState){this.state.activeChildIndex!==prevState.activeChildIndex&&this.setFocus(this.state.activeChildIndex)}},{key:"setFocus",value:function(index){var childNode=this.$wrapper.children[index];childNode&&childNode.hasAttribute("data-focus-skip")?this.moveFocus(childNode.compareDocumentPosition(document.activeElement)&Node.DOCUMENT_POSITION_FOLLOWING?-1:1):childNode&&document.activeElement!==childNode&&childNode.focus()}},{key:"moveFocus",value:function(delta){var numChildren=this.state.children?__WEBPACK_IMPORTED_MODULE_1_react__.Children.count(this.state.children):0,nextIndex=this.state.activeChildIndex+delta;nextIndex>=numChildren?nextIndex=0:nextIndex<0&&(nextIndex=numChildren-1),this.setState({activeChildIndex:nextIndex})}},{key:"renderChildren",value:function(){var _this2=this;return __WEBPACK_IMPORTED_MODULE_1_react__.Children.map(this.state.children,function(child,index){var _cloneElement;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.cloneElement)(child,(_cloneElement={},_defineProperty(_cloneElement,DATA_ATTRIBUTE_INDEX,index),_defineProperty(_cloneElement,"data-focus-skip",-1===parseInt(child.props.tabIndex,10)||void 0),_defineProperty(_cloneElement,"key",child.key||index),_defineProperty(_cloneElement,"tabIndex",_this2.state.activeChildIndex===index?0:-1),_cloneElement))})}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,ArrowKeyNavigation.internalKeys),{ref:this.persistWrapperElementReference,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown}),this.renderChildren())}}]),ArrowKeyNavigation}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);ArrowKeyNavigation.mode={HORIZONTAL:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),VERTICAL:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),BOTH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)()},ArrowKeyNavigation.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),defaultActiveChildIndex:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.number,mode:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOf([ArrowKeyNavigation.mode.BOTH,ArrowKeyNavigation.mode.HORIZONTAL,ArrowKeyNavigation.mode.VERTICAL])},ArrowKeyNavigation.defaultProps={component:"div",defaultActiveChildIndex:0,mode:ArrowKeyNavigation.mode.BOTH,onKeyDown:function(){}},ArrowKeyNavigation.internalKeys=Object.keys(ArrowKeyNavigation.defaultProps),__webpack_exports__.a=ArrowKeyNavigation},"./packages/boundless-async/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),get=function(base,path,fallback){return path.split(".").reduce(function(current,fragment){return current[fragment]||fallback},base)},Async=function(_PureComponent){function Async(){var _ref,_temp,_this,_ret;_classCallCheck(this,Async);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Async.__proto__||Object.getPrototypeOf(Async)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.promise=null,_this.state={},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Async,_PureComponent),_createClass(Async,[{key:"handlePromiseFulfillment",value:function(context,payload){this.mounted&&this.setState(function(state){return this.promise===context?(this.promise=null,{component:payload}):state},this.fireRenderCallback)}},{key:"handleChildren",value:function(children){var content=children;if(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.isValidElement)(content))return this.setState({component:content},this.fireRenderCallback);if("function"==typeof content)return this.handleChildren(content(this.props));var boundHandler=this.handlePromiseFulfillment.bind(this,content);this.promise=content,this.setState({component:null},function(){return content.then(boundHandler,boundHandler)})}},{key:"fireRenderCallback",value:function(){this.state.component&&this.props.childrenDidRender()}},{key:"componentWillMount",value:function(){this.handleChildren(this.props.children)}},{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillReceiveProps",value:function(nextProps){this.handleChildren(nextProps.children)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"render",value:function(){var props=this.props,state=this.state;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.cloneElement)(state.component||props.pendingContent,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(props,Async.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-async",props.className,null===state.component&&get(props,"pendingContent.props.className"),state.component&&get(state,"component.props.className",""),{"b-async-pending":null===state.component})}))}}]),Async}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Async.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,children:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.instanceOf(Promise)]).isRequired,childrenDidRender:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,pendingContent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node},Async.defaultProps={children:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",null),childrenDidRender:function(){},pendingContent:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",null)},Async.internalKeys=Object.keys(Async.defaultProps),__webpack_exports__.a=Async},"./packages/boundless-button/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Button=function(_PureComponent){function Button(){var _ref,_temp,_this,_ret;_classCallCheck(this,Button);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Button.__proto__||Object.getPrototypeOf(Button)).call.apply(_ref,[this].concat(args))),_this.handleClick=function(event){_this.props.disabled||(_this.props.onClick(event),_this.fireStatefulCallback(event))},_this.handleKeyDown=function(event){if(!_this.props.disabled)switch(_this.props.onKeyDown(event),event.key){case"Enter":case"Space":event.preventDefault(),_this.fireStatefulCallback(event)}},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Button,_PureComponent),_createClass(Button,[{key:"fireStatefulCallback",value:function(event){this.props[this.props.pressed?"onUnpressed":"onPressed"](event)}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Button.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-button",this.props.className,{"b-button-pressable":void 0!==this.props.pressed,"b-button-pressed":this.props.pressed}),"aria-pressed":this.props.pressed,role:"button",onKeyDown:this.handleKeyDown,onClick:this.handleClick}),this.props.children)}}]),Button}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Button.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),onPressed:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onUnpressed:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,pressed:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool},Button.defaultProps={component:"button",onClick:function(){},onKeyDown:function(){},onPressed:function(){},onUnpressed:function(){},pressed:void 0},Button.internalKeys=Object.keys(Button.defaultProps),__webpack_exports__.a=Button},"./packages/boundless-checkbox-group/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_checkbox__=__webpack_require__("./packages/boundless-checkbox/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),noop=function(){},CheckboxGroup=function(_PureComponent){function CheckboxGroup(){var _ref,_temp,_this,_ret;_classCallCheck(this,CheckboxGroup);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=CheckboxGroup.__proto__||Object.getPrototypeOf(CheckboxGroup)).call.apply(_ref,[this].concat(args))),_this.selectAllUUID=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_uuid__.a)(),_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(CheckboxGroup,_PureComponent),_createClass(CheckboxGroup,[{key:"allItemsChecked",value:function(){return this.props.items.every(function(item){return!0===item.inputProps.checked})}},{key:"anyItemsChecked",value:function(){return this.props.items.some(function(item){return!0===item.inputProps.checked})}},{key:"renderSelectAllCheckbox",value:function(){var allChecked=this.allItemsChecked(),inputProps=this.props.selectAllProps.inputProps;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_3_boundless_checkbox__.a,_extends({},this.props.selectAllProps,{key:this.selectAllUUID,className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-checkbox-group-all",this.props.selectAllProps.className),inputProps:_extends({},inputProps,{checked:allChecked,indeterminate:!allChecked&&this.anyItemsChecked(),name:inputProps&&inputProps.name?inputProps.name:null}),label:this.props.selectAllProps.label||"Select All",onChecked:this.props.onAllChecked,onUnchecked:this.props.onAllUnchecked}))}},{key:"renderCheckboxes",value:function(){var _this2=this;return this.props.items.map(function(item){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_3_boundless_checkbox__.a,_extends({},item,{key:item.inputProps.name,onChecked:_this2.props.onChildChecked,onUnchecked:_this2.props.onChildUnchecked}))})}},{key:"renderChildren",value:function(){var children=[this.renderCheckboxes()];switch(this.props.selectAll){case CheckboxGroup.selectAll.BEFORE:children.unshift(this.renderSelectAllCheckbox());break;case CheckboxGroup.selectAll.AFTER:children.push(this.renderSelectAllCheckbox())}return children}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__.a)(this.props,CheckboxGroup.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-checkbox-group",this.props.className)}),this.renderChildren())}}]),CheckboxGroup}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);CheckboxGroup.selectAll={BEFORE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_uuid__.a)(),AFTER:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_uuid__.a)(),NONE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_uuid__.a)()},CheckboxGroup.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,items:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_3_boundless_checkbox__.a.propTypes.inputProps).isRequired,onAllChecked:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onAllUnchecked:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onChildChecked:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onChildUnchecked:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,selectAll:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOf([CheckboxGroup.selectAll.BEFORE,CheckboxGroup.selectAll.AFTER,CheckboxGroup.selectAll.NONE]),selectAllProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,label:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.object})},CheckboxGroup.defaultProps={component:"div",items:[],onAllChecked:noop,onAllUnchecked:noop,onChildChecked:noop,onChildUnchecked:noop,selectAll:CheckboxGroup.selectAll.BEFORE,selectAllProps:{}},CheckboxGroup.internalKeys=Object.keys(CheckboxGroup.defaultProps),__webpack_exports__.a=CheckboxGroup},"./packages/boundless-checkbox/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},Checkbox=function(_PureComponent){function Checkbox(){var _ref,_temp,_this,_ret;_classCallCheck(this,Checkbox);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Checkbox.__proto__||Object.getPrototypeOf(Checkbox)).call.apply(_ref,[this].concat(args))),_this.id=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),_this.handleChange=function(event){_this.props.inputProps.disabled||(_this.props[_this.props.inputProps.checked?"onUnchecked":"onChecked"](_this.props.inputProps.name),isFunction(_this.props.inputProps.onChange)&&_this.props.inputProps.onChange(event))},_this.handleClick=function(event){_this.props.inputProps.disabled||(_this.refs.input.focus(),isFunction(_this.props.inputProps.onClick)&&_this.props.inputProps.onClick(event))},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Checkbox,_PureComponent),_createClass(Checkbox,[{key:"componentDidMount",value:function(){this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"componentDidUpdate",value:function(prevProps){prevProps.inputProps.indeterminate!==this.props.inputProps.indeterminate&&this.setIndeterminate()}},{key:"setIndeterminate",value:function(){this.refs.input.indeterminate=!!this.props.inputProps.indeterminate}},{key:"getAriaState",value:function(){return this.props.inputProps.indeterminate?"mixed":String(this.props.inputProps.checked)}},{key:"renderInput",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("input",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props.inputProps,"indeterminate"),{ref:"input",type:"checkbox",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-checkbox",this.props.inputProps.className,{"b-checkbox-mixed":this.props.inputProps.indeterminate,"b-checkbox-checked":this.props.inputProps.checked,"b-checkbox-unchecked":!this.props.inputProps.indeterminate&&!this.props.inputProps.checked}),id:this.props.inputProps.id||this.id,"aria-checked":this.getAriaState(),onChange:this.handleChange,onClick:this.handleClick}))}},{key:"renderLabel",value:function(){if(this.props.label)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("label",_extends({},this.props.labelProps,{ref:"label",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-checkbox-label",this.props.labelProps.className),htmlFor:this.props.inputProps.id||this.id}),this.props.label)}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Checkbox.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-checkbox-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),Checkbox}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Checkbox.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,checked:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,className:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,disabled:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,id:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,indeterminate:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,onChange:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onClick:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,name:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,value:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string}),label:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,labelProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),onChecked:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onUnchecked:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func},Checkbox.defaultProps={component:"div",inputProps:{checked:!1,indeterminate:!1},label:null,labelProps:{},onChecked:noop,onUnchecked:noop},Checkbox.internalKeys=Object.keys(Checkbox.defaultProps),__webpack_exports__.a=Checkbox},"./packages/boundless-dialog/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},toArray=Array.prototype.slice,Dialog=function(_PureComponent){function Dialog(){var _ref,_temp,_this,_ret;_classCallCheck(this,Dialog);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Dialog.__proto__||Object.getPrototypeOf(Dialog)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.handleFocus=function(nativeEvent){if(_this.props.captureFocus){var previous=nativeEvent.explicitOriginalTarget||nativeEvent.relatedTarget;_this.isPartOfDialog(previous)&&!_this.isPartOfDialog(nativeEvent.target)&&(nativeEvent.preventDefault(),previous.focus())}else if(_this.shouldDialogCloseOnEvent("closeOnOutsideFocus",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target))return window.setTimeout(_this.props.onClose,0)},_this.handleKeyDown=function(event){"Escape"===event.key&&_this.shouldDialogCloseOnEvent("closeOnEscKey",event)&&window.setTimeout(_this.props.onClose,0),_this.props.onKeyDown&&_this.props.onKeyDown(event)},_this.handleInsideClick=function(event){_this.shouldDialogCloseOnEvent("closeOnInsideClick",event)&&window.setTimeout(_this.props.onClose,0)},_this.handleOutsideClick=function(nativeEvent){_this.shouldDialogCloseOnEvent("closeOnOutsideClick",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target)&&window.setTimeout(_this.props.onClose,0)},_this.handleOutsideScrollWheel=function(nativeEvent){_this.shouldDialogCloseOnEvent("closeOnOutsideScroll",nativeEvent)&&!_this.isPartOfDialog(nativeEvent.target)&&window.setTimeout(_this.props.onClose,0)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Dialog,_PureComponent),_createClass(Dialog,[{key:"isPartOfDialog",value:function(node){if(!node||node===window)return!1;var roots=[this.$wrapper].concat(toArray.call(this.$wrapper.querySelectorAll("["+__WEBPACK_IMPORTED_MODULE_3_boundless_portal__.a.PORTAL_DATA_ATTRIBUTE+"]")).map(function(dom){return document.getElementById(dom.getAttribute(__WEBPACK_IMPORTED_MODULE_3_boundless_portal__.a.PORTAL_DATA_ATTRIBUTE))})),element=node.nodeType!==Node.ELEMENT_NODE?node.parentNode:node;return roots.some(function(dom){return dom.contains(element)})}},{key:"componentDidMount",value:function(){window.addEventListener("click",this.handleOutsideClick,!0),window.addEventListener("contextmenu",this.handleOutsideClick,!0),window.addEventListener("focus",this.handleFocus,!0),window.addEventListener("scroll",this.handleOutsideScrollWheel,!0),window.addEventListener("wheel",this.handleOutsideScrollWheel,!0),this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)&&this.$dialog.focus()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("click",this.handleOutsideClick,!0),window.removeEventListener("contextmenu",this.handleOutsideClick,!0),window.removeEventListener("focus",this.handleFocus,!0),window.removeEventListener("scroll",this.handleOutsideScrollWheel,!0),window.removeEventListener("wheel",this.handleOutsideScrollWheel,!0)}},{key:"shouldDialogCloseOnEvent",value:function(prop,event){return isFunction(this.props[prop])?this.props[prop](event):this.props[prop]}},{key:"renderFocusBoundary",value:function(){if(this.props.captureFocus)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"}," ")}},{key:"render",value:function(){var _this2=this;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__.a)(this.props,Dialog.internalKeys),{ref:function(node){return _this2.$wrapper=node},className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-dialog-wrapper",this.props.className)}),this.renderFocusBoundary(),this.props.before,__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.dialogComponent,_extends({},this.dialogProps,{ref:function(node){return _this2.$dialog=node},className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-dialog",this.props.dialogProps.className),onClick:this.handleInsideClick,onKeyDown:this.handleKeyDown,role:this.props.captureFocus?"alertdialog":"dialog",tabIndex:"0"}),this.props.children),this.props.after,this.renderFocusBoundary())}}]),Dialog}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Dialog.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,after:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,before:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,captureFocus:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,closeOnEscKey:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),closeOnInsideClick:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),closeOnOutsideClick:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),closeOnOutsideFocus:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),closeOnOutsideScroll:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,dialogComponent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,dialogProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),onClose:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func},Dialog.defaultProps={after:null,before:null,captureFocus:!0,children:null,closeOnEscKey:!1,closeOnInsideClick:!1,closeOnOutsideClick:!1,closeOnOutsideFocus:!1,closeOnOutsideScroll:!1,component:"div",dialogComponent:"div",dialogProps:{},onClose:noop,onKeyDown:noop},Dialog.internalKeys=Object.keys(Dialog.defaultProps),__webpack_exports__.a=Dialog},"./packages/boundless-fitted-text/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function toI(stringNumber){return parseInt(stringNumber,10)}function rescale(instance){var node=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react_dom__.findDOMNode)(instance),containerBox=window.getComputedStyle(node.parentNode),fontSize=toI(window.getComputedStyle(node).fontSize);null===instance.baseFontSize&&(instance.baseFontSize=fontSize);var containerHeight=toI(containerBox.height),containerWidth=toI(containerBox.width);"border-box"!==containerBox.boxSizing&&"padding-box"!==containerBox.boxSizing||(containerHeight-=toI(containerBox.paddingTop)+toI(containerBox.paddingBottom),containerWidth-=toI(containerBox.paddingLeft)+toI(containerBox.paddingRight));var optimizeForHeight=Math.floor(fontSize/node.offsetHeight*containerHeight),optimizeForWidth=Math.floor(fontSize/node.offsetWidth*containerWidth);instance.props.upscale?node.style.fontSize=(Math.max(optimizeForHeight,optimizeForWidth)||1)+"px":node.style.fontSize=(Math.min(instance.baseFontSize,optimizeForHeight,optimizeForWidth)||1)+"px"}function handleWindowResize(){instances.forEach(function(instance){return rescale(instance)})}function registerInstance(instance){0===instances.length&&window.addEventListener("resize",handleWindowResize,!0),instances.push(instance)}function unregisterInstance(instance){instances.splice(instances.indexOf(instance),1),0===instances.length&&window.removeEventListener("resize",handleWindowResize,!0)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_react_dom__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__(1)),__WEBPACK_IMPORTED_MODULE_3_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_3_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_classnames__),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),instances=[],FittedText=function(_PureComponent){function FittedText(){var _ref,_temp,_this,_ret;_classCallCheck(this,FittedText);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=FittedText.__proto__||Object.getPrototypeOf(FittedText)).call.apply(_ref,[this].concat(args))),_this.baseFontSize=null,_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(FittedText,_PureComponent),_createClass(FittedText,[{key:"componentDidMount",value:function(){rescale(this),registerInstance(this)}},{key:"componentDidUpdate",value:function(){rescale(this)}},{key:"componentWillUnmount",value:function(){unregisterInstance(this)}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__.a)(this.props,FittedText.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_3_classnames___default()("b-text",this.props.className)}),this.props.children)}}]),FittedText}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);FittedText.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,upscale:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool},FittedText.defaultProps={component:"span",upscale:!1},FittedText.internalKeys=Object.keys(FittedText.defaultProps),__webpack_exports__.a=FittedText},"./packages/boundless-image/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Image=function(_PureComponent){function Image(){var _ref,_temp,_this,_ret;_classCallCheck(this,Image);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Image.__proto__||Object.getPrototypeOf(Image)).call.apply(_ref,[this].concat(args))),_this.state={status:Image.status.LOADING},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Image,_PureComponent),_createClass(Image,[{key:"componentWillReceiveProps",value:function(nextProps){nextProps.src!==this.props.src&&(this.resetPreloader(),this.setState({status:Image.status.LOADING}))}},{key:"componentDidMount",value:function(){this.preload()}},{key:"componentDidUpdate",value:function(){this.preload()}},{key:"componentWillUnmount",value:function(){this.resetPreloader()}},{key:"resetPreloader",value:function(){this.loader.onload=null,this.loader.onerror=null,this.loader=null}},{key:"preload",value:function(){var _this2=this;this.loader||(this.loader=document.createElement("img"),this.loader.onload=function(){return _this2.setState({status:Image.status.LOADED})},this.loader.onerror=function(){return _this2.setState({status:Image.status.ERROR})},this.loader.src=this.props.src)}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Image.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-image",this.props.className,{"b-image-loading":this.state.status===Image.status.LOADING,"b-image-loaded":this.state.status===Image.status.LOADED,"b-image-error":this.state.status===Image.status.ERROR}),title:this.props.alt,role:"img",style:_extends({},this.props.style,{backgroundImage:"url("+this.props.src+")"})})," ")}}]),Image}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Image.status={LOADING:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),LOADED:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),ERROR:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)()},Image.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,alt:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,src:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string.isRequired},Image.defaultProps={alt:"",component:"div",src:"about:blank"},Image.internalKeys=Object.keys(Image.defaultProps),__webpack_exports__.a=Image},"./packages/boundless-input/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},Input=function(_PureComponent){function Input(){var _ref,_temp,_this,_ret;_classCallCheck(this,Input);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Input.__proto__||Object.getPrototypeOf(Input)).call.apply(_ref,[this].concat(args))),_this.state={input:"",isControlled:"string"==typeof _this.props.inputProps.value,isFocused:!1},_this.setInputValue=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return _this.setState({input:value})},_this.getValue=function(){return _this.refs.field.value},_this.handleBlur=function(event){_this.setState({isFocused:!1}),!0===isFunction(_this.props.inputProps.onBlur)&&_this.props.inputProps.onBlur(event)},_this.handleFocus=function(event){_this.setState({isFocused:!0}),!0===isFunction(_this.props.inputProps.onFocus)&&_this.props.inputProps.onFocus(event)},_this.handleChange=function(event){!1===_this.state.isControlled&&_this.setInputValue(event.target.value),!0===isFunction(_this.props.inputProps.onChange)&&_this.props.inputProps.onChange(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Input,_PureComponent),_createClass(Input,[{key:"componentWillMount",value:function(){if(!0===this.state.isControlled)return this.setInputValue(this.props.inputProps.value);this.setInputValue(this.props.inputProps.defaultValue)}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.inputProps.value!==this.props.inputProps.value&&this.setInputValue(nextProps.inputProps.value)}},{key:"setValue",value:function(nextValue){this.setInputValue(nextValue),this.refs.field.value=nextValue,!0===this.state.isControlled&&(this.refs.field.dispatchEvent(new Event("input",{bubbles:!0})),this.refs.field.dispatchEvent(new Event("change",{bubbles:!0})))}},{key:"getPlaceholderText",value:function(){var isNonEmpty=""!==this.state.input;return(!0===this.props.hidePlaceholderOnFocus?!1===this.state.isFocused&&!1===isNonEmpty:!1===isNonEmpty)?this.props.inputProps.placeholder:""}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Input.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-input-wrapper",this.props.className),title:this.getPlaceholderText()}),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("input",_extends({},this.props.inputProps,{ref:"field",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-input",this.props.inputProps.className),placeholder:null,onBlur:this.handleBlur,onFocus:this.handleFocus,onChange:this.handleChange})),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",{className:"b-input-placeholder b-input"},this.getPlaceholderText()))}}]),Input}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Input.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,hidePlaceholderOnFocus:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,inputProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,defaultValue:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,onBlur:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onFocus:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onChange:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,placeholder:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,type:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,value:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string})},Input.defaultProps={component:"div",hidePlaceholderOnFocus:!0,inputProps:{type:"text"}},Input.internalKeys=Object.keys(Input.defaultProps),__webpack_exports__.a=Input},"./packages/boundless-modal/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Modal=function(_PureComponent){function Modal(){return _classCallCheck(this,Modal),_possibleConstructorReturn(this,(Modal.__proto__||Object.getPrototypeOf(Modal)).apply(this,arguments))}return _inherits(Modal,_PureComponent),_createClass(Modal,[{key:"render",value:function(){var _this2=this,props=this.props;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_4_boundless_portal__.a,props.portalProps,__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_omit_keys__.a)(props,Modal.internalKeys),{ref:function(node){return _this2.$modal=node},className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-modal-wrapper",props.className)}),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",_extends({},props.maskProps,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-modal-mask",props.maskProps.className)})),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_object_intersection__.a)(props,__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.defaultProps),props.modalProps,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-modal",props.modalProps.className)}),props.children)))}}]),Modal}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Modal.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.propTypes,{maskProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),modalProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),portalProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape(__WEBPACK_IMPORTED_MODULE_4_boundless_portal__.a.propTypes)}),Modal.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_dialog__.a.defaultProps,{captureFocus:!0,maskProps:{},modalProps:{},portalProps:{}}),Modal.internalKeys=Object.keys(Modal.defaultProps),__webpack_exports__.a=Modal},"./packages/boundless-pagination/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_lodash_isInteger__=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/isInteger.js"),__WEBPACK_IMPORTED_MODULE_0_lodash_isInteger___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_isInteger__),__WEBPACK_IMPORTED_MODULE_1_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_1_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__),__WEBPACK_IMPORTED_MODULE_2_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_3_react_dom__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__),__webpack_require__(1)),__WEBPACK_IMPORTED_MODULE_4_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_4_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_classnames__),__WEBPACK_IMPORTED_MODULE_5_boundless_async__=__webpack_require__("./packages/boundless-async/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_segmented_control__=__webpack_require__("./packages/boundless-segmented-control/index.js"),__WEBPACK_IMPORTED_MODULE_7_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js"),__WEBPACK_IMPORTED_MODULE_8_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),identity=function(x){return x},isFunction=function(x){return"function"==typeof x},noop=function(){},Pagination=function(_PureComponent){function Pagination(){var _ref,_temp,_this,_ret;_classCallCheck(this,Pagination);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Pagination.__proto__||Object.getPrototypeOf(Pagination)).call.apply(_ref,[this].concat(args))),_this.mounted=!1,_this.state={currentPage:_this.props.initialPage,targetIndex:(_this.props.initialPage-1)*_this.props.numItemsPerPage},_this.currentPage=function(){return _this.state.currentPage},_this.getPageForIndex=function(index){var itemsPerPage=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_this.props.numItemsPerPage;return Math.ceil((index+1)/itemsPerPage)},_this.totalPages=function(){return Math.ceil(_this.props.totalItems/_this.props.numItemsPerPage)},_this.firstVisibleItemIndex=function(){return(_this.currentPage()-1)*_this.props.numItemsPerPage},_this.jumpToIndex=function(i){if(i<0||i>=_this.props.totalItems)throw Error("Cannot page to invalid index "+i+".");_this.setState({currentPage:_this.getPageForIndex(i),targetIndex:i})},_this.handlePageSelected=function(option){var nextTargetIndex=void 0;switch(option[Pagination.CONTROL_DATA_ATTRIBUTE]){case void 0:return;case Pagination.control.FIRST:nextTargetIndex=0;break;case Pagination.control.PREVIOUS:nextTargetIndex=_this.firstVisibleItemIndex()-_this.props.numItemsPerPage;break;case Pagination.control.NEXT:nextTargetIndex=_this.firstVisibleItemIndex()+_this.props.numItemsPerPage;break;case Pagination.control.LAST:nextTargetIndex=_this.props.totalItems-1;break;default:nextTargetIndex=parseInt(option[Pagination.CONTROL_DATA_ATTRIBUTE],10)*_this.props.numItemsPerPage-1}_this.setState({currentPage:_this.getPageForIndex(nextTargetIndex),targetIndex:nextTargetIndex})},_this.handleItemPromiseFulfillment=function(payload){if(_this.mounted)return _this.props.itemToJSXConverter(payload)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Pagination,_PureComponent),_createClass(Pagination,[{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"componentDidUpdate",value:function(_,prevState){prevState.currentPage!==this.currentPage()&&__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_react_dom__.findDOMNode)(this.refs.item_0).focus()}},{key:"componentWillReceiveProps",value:function(){var _this2=this,oldProps=this.props;this.setState(function(state,props){return props.identifier!==oldProps.identifier?{currentPage:1,targetIndex:0}:{currentPage:_this2.getPageForIndex(state.targetIndex,props.numItemsPerPage),targetIndex:state.targetIndex}})}},{key:"generateControls",value:function(){var options=[],currentPage=this.currentPage(),totalPages=this.totalPages(),startPage=currentPage-(currentPage-1)%this.props.numPageToggles,endPage=Math.min(startPage+this.props.numPageToggles-1,totalPages);if(this.props.showPaginationState&&options.push({children:isFunction(this.props.showPaginationState)?this.props.showPaginationState(currentPage,totalPages):currentPage+" / "+totalPages,className:"b-pagination-control b-pagination-control-state",disabled:!0}),this.props.showJumpToFirstPageControl){var _options$push;options.push((_options$push={},_defineProperty(_options$push,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.FIRST),_defineProperty(_options$push,"children",this.props.jumpToFirstPageControlContent),_defineProperty(_options$push,"className","b-pagination-control b-pagination-control-first"),_defineProperty(_options$push,"disabled",1===currentPage),_options$push))}if(this.props.showJumpToPreviousPageControl){var _options$push2;options.push((_options$push2={},_defineProperty(_options$push2,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.PREVIOUS),_defineProperty(_options$push2,"children",this.props.jumpToPreviousPageControlContent),_defineProperty(_options$push2,"className","b-pagination-control b-pagination-control-previous"),_defineProperty(_options$push2,"disabled",1===currentPage),_options$push2))}for(var i=startPage;i<=endPage;i++){var _options$push3;options.push((_options$push3={},_defineProperty(_options$push3,Pagination.CONTROL_DATA_ATTRIBUTE,i),_defineProperty(_options$push3,"children",i),_defineProperty(_options$push3,"className","b-pagination-control"),_defineProperty(_options$push3,"pressed",currentPage===i),_options$push3))}if(this.props.showJumpToNextPageControl){var _options$push4;options.push((_options$push4={},_defineProperty(_options$push4,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.NEXT),_defineProperty(_options$push4,"children",this.props.jumpToNextPageControlContent),_defineProperty(_options$push4,"className","b-pagination-control b-pagination-control-next"),_defineProperty(_options$push4,"disabled",currentPage===totalPages),_options$push4))}if(this.props.showJumpToLastPageControl){var _options$push5;options.push((_options$push5={},_defineProperty(_options$push5,Pagination.CONTROL_DATA_ATTRIBUTE,Pagination.control.LAST),_defineProperty(_options$push5,"children",this.props.jumpToLastPageControlContent),_defineProperty(_options$push5,"className","b-pagination-control b-pagination-control-last"),_defineProperty(_options$push5,"disabled",currentPage===totalPages),_options$push5))}return this.props.customControlContent&&options.push({children:this.props.customControlContent,className:"b-pagination-control b-pagination-control-custom",disabled:!0}),options}},{key:"generateItems",value:function(){for(var items=[],firstIndex=this.firstVisibleItemIndex(),lastIndex=Math.min(this.props.totalItems,firstIndex+this.props.numItemsPerPage)-1,i=firstIndex;i<=lastIndex;i+=1)items.push(this.props.getItem(i));return items}},{key:"renderItems",value:function(){var _this3=this,props=this.props.itemWrapperProps;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react__.createElement)(__WEBPACK_IMPORTED_MODULE_7_boundless_arrow_key_navigation__.a,_extends({},props,{className:__WEBPACK_IMPORTED_MODULE_4_classnames___default()("b-pagination-items",props.className)}),this.generateItems().map(function(item,index){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react__.createElement)(__WEBPACK_IMPORTED_MODULE_5_boundless_async__.a,{ref:0===index?"item_0":null,key:index,className:__WEBPACK_IMPORTED_MODULE_4_classnames___default()("b-pagination-item",{"b-pagination-item-even":index%2==0,"b-pagination-item-odd":index%2!=0}),"data-pagination-index":_this3.props.numItemsPerPage*(_this3.currentPage()-1)+index,pendingContent:_this3.props.itemLoadingContent},item instanceof Promise?item.then(_this3.handleItemPromiseFulfillment,_this3.handleItemPromiseFulfillment):_this3.props.itemToJSXConverter(item))}))}},{key:"renderControls",value:function(position){var _cx;if(!(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage))return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react__.createElement)(__WEBPACK_IMPORTED_MODULE_6_boundless_segmented_control__.a,_extends({},this.props.controlWrapperProps,{className:__WEBPACK_IMPORTED_MODULE_4_classnames___default()("b-pagination-controls",this.props.controlWrapperProps.className,(_cx={},_defineProperty(_cx,"b-pagination-controls-above",position===Pagination.position.ABOVE),_defineProperty(_cx,"b-pagination-controls-below",position===Pagination.position.BELOW),_cx)),options:this.generateControls(),onOptionSelected:this.handlePageSelected}))}},{key:"renderView",value:function(){var position=this.props.position,p=Pagination.position;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react__.createElement)("div",{className:"b-pagination"},position===p.ABOVE||position===p.BOTH?this.renderControls(p.ABOVE):null,this.props.before,this.renderItems(),this.props.after,position===p.BELOW||position===p.BOTH?this.renderControls(p.BELOW):null)}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react__.createElement)("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8_boundless_utils_omit_keys__.a)(this.props,Pagination.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_4_classnames___default()("b-pagination-wrapper",this.props.className)}),this.renderView())}}]),Pagination}(__WEBPACK_IMPORTED_MODULE_2_react__.PureComponent);Pagination.control={CUSTOM:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)(),FIRST:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)(),LAST:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)(),NEXT:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)(),PREVIOUS:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)()},Pagination.position={ABOVE:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)(),BELOW:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)(),BOTH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)()},Pagination.CONTROL_DATA_ATTRIBUTE="data-page-control",Pagination.propTypes={"*":__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.any,after:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,before:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,controlWrapperProps:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.any}),customControlContent:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,getItem:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,hidePagerIfNotNeeded:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,identifier:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string.isRequired,initialPage:function(props){if(!1===__WEBPACK_IMPORTED_MODULE_0_lodash_isInteger___default()(props.initialPage))return new Error("`initialPage` must be an integer.");var numberOfPages=Math.ceil(props.totalItems/props.numItemsPerPage);return props.initialPage<1||props.initialPage>numberOfPages?new Error("`initialPage` must be between 1 and "+numberOfPages+"."):void 0},itemLoadingContent:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,itemToJSXConverter:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,itemWrapperProps:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.any}),jumpToFirstPageControlContent:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,jumpToLastPageControlContent:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,jumpToNextPageControlContent:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,jumpToPreviousPageControlContent:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,numItemsPerPage:function(props){return!1===__WEBPACK_IMPORTED_MODULE_0_lodash_isInteger___default()(props.numItemsPerPage)?new Error("`numItemsPerPage` must be an integer."):props.numItemsPerPage<1?new Error("`numItemsPerPage` must be greater than zero."):void 0},numPageToggles:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.number,position:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOf([Pagination.position.ABOVE,Pagination.position.BELOW,Pagination.position.BOTH]),showJumpToFirstPageControl:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,showJumpToLastPageControl:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,showJumpToNextPageControl:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,showJumpToPreviousPageControl:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,showPaginationState:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func]),totalItems:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.number.isRequired},Pagination.defaultProps={after:null,before:null,controlWrapperProps:{},customControlContent:null,getItem:noop,hidePagerIfNotNeeded:!1,identifier:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9_boundless_utils_uuid__.a)(),initialPage:1,itemLoadingContent:void 0,itemToJSXConverter:identity,itemWrapperProps:{},jumpToFirstPageControlContent:"⇤",jumpToLastPageControlContent:"⇥",jumpToNextPageControlContent:"→",jumpToPreviousPageControlContent:"←",numItemsPerPage:10,numPageToggles:5,position:Pagination.position.ABOVE,showJumpToFirstPageControl:!0,showJumpToLastPageControl:!0,showJumpToNextPageControl:!0,showJumpToPreviousPageControl:!0,showPaginationState:!0,totalItems:null},Pagination.internalKeys=Object.keys(Pagination.defaultProps),__webpack_exports__.a=Pagination},"./packages/boundless-pagination/node_modules/lodash/_Symbol.js":function(module,exports,__webpack_require__){var root=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_root.js"),_Symbol=root.Symbol;module.exports=_Symbol},"./packages/boundless-pagination/node_modules/lodash/_baseGetTag.js":function(module,exports,__webpack_require__){function baseGetTag(value){return null==value?void 0===value?undefinedTag:nullTag:symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value)}var _Symbol=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_Symbol.js"),getRawTag=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_getRawTag.js"),objectToString=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_objectToString.js"),nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag=_Symbol?_Symbol.toStringTag:void 0;module.exports=baseGetTag},"./packages/boundless-pagination/node_modules/lodash/_freeGlobal.js":function(module,exports,__webpack_require__){(function(global){var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},freeGlobal="object"==(void 0===global?"undefined":_typeof(global))&&global&&global.Object===Object&&global;module.exports=freeGlobal}).call(exports,__webpack_require__("./node_modules/webpack/buildin/global.js"))},"./packages/boundless-pagination/node_modules/lodash/_getRawTag.js":function(module,exports,__webpack_require__){function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=void 0;var unmasked=!0}catch(e){}var result=nativeObjectToString.call(value);return unmasked&&(isOwn?value[symToStringTag]=tag:delete value[symToStringTag]),result}var _Symbol=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_Symbol.js"),objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,nativeObjectToString=objectProto.toString,symToStringTag=_Symbol?_Symbol.toStringTag:void 0;module.exports=getRawTag},"./packages/boundless-pagination/node_modules/lodash/_objectToString.js":function(module,exports){function objectToString(value){return nativeObjectToString.call(value)}var objectProto=Object.prototype,nativeObjectToString=objectProto.toString;module.exports=objectToString},"./packages/boundless-pagination/node_modules/lodash/_root.js":function(module,exports,__webpack_require__){var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},freeGlobal=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_freeGlobal.js"),freeSelf="object"==("undefined"==typeof self?"undefined":_typeof(self))&&self&&self.Object===Object&&self,root=freeGlobal||freeSelf||Function("return this")();module.exports=root},"./packages/boundless-pagination/node_modules/lodash/isInteger.js":function(module,exports,__webpack_require__){function isInteger(value){return"number"==typeof value&&value==toInteger(value)}var toInteger=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/toInteger.js");module.exports=isInteger},"./packages/boundless-pagination/node_modules/lodash/isObject.js":function(module,exports){function isObject(value){var type=void 0===value?"undefined":_typeof(value);return null!=value&&("object"==type||"function"==type)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};module.exports=isObject},"./packages/boundless-pagination/node_modules/lodash/isObjectLike.js":function(module,exports){function isObjectLike(value){return null!=value&&"object"==(void 0===value?"undefined":_typeof(value))}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};module.exports=isObjectLike},"./packages/boundless-pagination/node_modules/lodash/isSymbol.js":function(module,exports,__webpack_require__){function isSymbol(value){return"symbol"==(void 0===value?"undefined":_typeof(value))||isObjectLike(value)&&baseGetTag(value)==symbolTag}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},baseGetTag=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/_baseGetTag.js"),isObjectLike=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/isObjectLike.js"),symbolTag="[object Symbol]";module.exports=isSymbol},"./packages/boundless-pagination/node_modules/lodash/toFinite.js":function(module,exports,__webpack_require__){function toFinite(value){if(!value)return 0===value?value:0;if((value=toNumber(value))===INFINITY||value===-INFINITY){return(value<0?-1:1)*MAX_INTEGER}return value===value?value:0}var toNumber=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/toNumber.js"),INFINITY=1/0,MAX_INTEGER=1.7976931348623157e308;module.exports=toFinite},"./packages/boundless-pagination/node_modules/lodash/toInteger.js":function(module,exports,__webpack_require__){function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0}var toFinite=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/toFinite.js");module.exports=toInteger},"./packages/boundless-pagination/node_modules/lodash/toNumber.js":function(module,exports,__webpack_require__){function toNumber(value){if("number"==typeof value)return value;if(isSymbol(value))return NAN;if(isObject(value)){var other="function"==typeof value.valueOf?value.valueOf():value;value=isObject(other)?other+"":other}if("string"!=typeof value)return 0===value?value:+value;value=value.replace(reTrim,"");var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value}var isObject=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/isObject.js"),isSymbol=__webpack_require__("./packages/boundless-pagination/node_modules/lodash/isSymbol.js"),NAN=NaN,reTrim=/^\s+|\s+$/g,reIsBadHex=/^[-+]0x[0-9a-f]+$/i,reIsBinary=/^0b[01]+$/i,reIsOctal=/^0o[0-7]+$/i,freeParseInt=parseInt;module.exports=toNumber},"./packages/boundless-popover/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function getOppositeCardinal(direction){switch(direction[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_react_dom__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__(1)),__WEBPACK_IMPORTED_MODULE_3_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_dom__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_3_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_classnames__),__WEBPACK_IMPORTED_MODULE_4_boundless_dialog__=__webpack_require__("./packages/boundless-dialog/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_portal__=__webpack_require__("./packages/boundless-portal/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_7_boundless_utils_transform_property__=__webpack_require__("./packages/boundless-utils-transform-property/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),CLASS_REMOVAL_REGEX=/\s?b-popover-(anchor|self)-(start|middle|end)/g,DEFAULT_CARET_COMPONENT=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("g",null,__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"}))),combinations=[{name:"NNW",ax:0,ay:0,dx:0,dy:2},{name:"N",ax:1,ay:0,dx:1,dy:2},{name:"NNE",ax:2,ay:0,dx:2,dy:2},{name:"ENE",ax:2,ay:0,dx:0,dy:0},{name:"E",ax:2,ay:1,dx:0,dy:1},{name:"ESE",ax:2,ay:2,dx:0,dy:2},{name:"SSE",ax:2,ay:2,dx:2,dy:0},{name:"S",ax:1,ay:2,dx:1,dy:0},{name:"SSW",ax:0,ay:2,dx:0,dy:0},{name:"WSW",ax:0,ay:2,dx:2,dy:2},{name:"W",ax:0,ay:1,dx:2,dy:1},{name:"WNW",ax:0,ay:0,dx:2,dy:0}],Popover=function(_PureComponent){function Popover(){var _ref,_temp,_this,_ret;_classCallCheck(this,Popover);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Popover.__proto__||Object.getPrototypeOf(Popover)).call.apply(_ref,[this].concat(args))),_this.align=function(){var anchor=_this.props.anchor instanceof HTMLElement?_this.props.anchor:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react_dom__.findDOMNode)(_this.props.anchor),caretAnchor=_this.props.caretAnchor?_this.props.caretAnchor instanceof HTMLElement?_this.props.caretAnchor:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react_dom__.findDOMNode)(_this.props.caretAnchor):anchor;_this.cacheViewportCartography(anchor,caretAnchor);var preset=_this.getValidAlignmentPreset(),frag=Popover.getAlignmentClassFragment;_this.dialog.$wrapper.className=_this.dialog.$wrapper.className.replace(CLASS_REMOVAL_REGEX,"")+" b-popover-anchor-x-"+frag(preset.ax)+" b-popover-anchor-y-"+frag(preset.ay)+" b-popover-self-x-"+frag(preset.dx)+" b-popover-self-y-"+frag(preset.dy);var dx=Math.round(_this.getNextDialogXPosition(preset)),dy=Math.round(_this.getNextDialogYPosition(preset));_this.dialog.$wrapper.style[__WEBPACK_IMPORTED_MODULE_7_boundless_utils_transform_property__.a]="translate("+dx+"px, "+dy+"px)";var cardinal=preset.name[0],longitudinal="N"===cardinal||"S"===cardinal;_this.$caret.style[longitudinal?"left":"top"]=Math.round(_this.getNextCaretXPosition(preset))+"px",_this.$caret.style[longitudinal?"top":"left"]="0px"},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Popover,_PureComponent),_createClass(Popover,[{key:"cacheViewportCartography",value:function(anchor,caretAnchor){var bodyRect=document.body.getBoundingClientRect();this.anchorRect=anchor.getBoundingClientRect(),this.caretAnchorRect=caretAnchor.getBoundingClientRect(),this.bodyLeft=-1*bodyRect.left,this.bodyTop=-1*bodyRect.top}},{key:"getNextCaretXPosition",value:function(_ref2){var name=_ref2.name,dx=(_ref2.ax,_ref2.dx),dy=(_ref2.ay,_ref2.dy),caret=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.$caret,nextX=0;return"N"===name[0]||"S"===name[0]?(nextX=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2,1===dx?nextX+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2:2===dx&&(nextX+=this.dialog.$wrapper.clientWidth-this.anchorRect.width)):(nextX=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2,1===dy?nextX+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2:2===dy&&(nextX+=this.dialog.$wrapper.clientHeight-this.anchorRect.height)),nextX-=caret.clientWidth/2}},{key:"getNextDialogXPosition",value:function(_ref3){var ax=_ref3.ax,dx=_ref3.dx,dialog=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,nextX=this.anchorRect.left+this.bodyLeft;switch(ax){case 1:nextX+=this.anchorRect.width/2;break;case 2:nextX+=this.anchorRect.width}switch(dx){case 1:nextX-=dialog.clientWidth/2;break;case 2:nextX-=dialog.clientWidth}return nextX}},{key:"getNextDialogYPosition",value:function(_ref4){var ay=_ref4.ay,dy=_ref4.dy,dialog=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,nextY=this.anchorRect.top+this.bodyTop;switch(ay){case 1:nextY+=this.anchorRect.height/2;break;case 2:nextY+=this.anchorRect.height}switch(dy){case 1:nextY-=dialog.clientHeight/2;break;case 2:nextY-=dialog.clientHeight}return nextY}},{key:"isPositionValid",value:function(_ref5,pHeight,pWidth){var name=_ref5.name,ax=_ref5.ax,ay=_ref5.ay,cardinal=(_ref5.dx,_ref5.dy,name[0]);return"N"===cardinal||"S"===cardinal?!("N"===cardinal&&this.anchorRect.top-pHeight<0)&&(!("S"===cardinal&&this.anchorRect.bottom+pHeight>window.innerHeight)&&(0===ax?!(this.anchorRect.left+pWidth>window.innerWidth||this.anchorRect.left<0):1===ax?!(this.anchorRect.left-pWidth/2<0||this.anchorRect.left+pWidth/2>window.innerWidth):!(this.anchorRect.left-pWidth<0||this.anchorRect.right>window.innerWidth))):"W"!==cardinal&&"E"!==cardinal||!("W"===cardinal&&this.anchorRect.left-pWidth<0)&&(!("E"===cardinal&&this.anchorRect.right+pWidth>window.innerWidth)&&(0===ay?!(this.anchorRect.top+pHeight>window.innerHeight||this.anchorRect.top<0):1===ay?!(this.anchorRect.top+this.anchorRect.height/2-pHeight/2<0||this.anchorRect.top+this.anchorRect.height/2+pHeight/2>window.innerHeight):!(this.anchorRect.top-pHeight<0||this.anchorRect.bottom>window.innerHeight)))}},{key:"getValidAlignmentPreset",value:function(){var _this2=this,width=this.dialog.$wrapper.clientWidth,height=this.dialog.$wrapper.clientHeight,validCombos=combinations.filter(function(config){return _this2.isPositionValid(config,height,width)});if(-1!==validCombos.indexOf(this.props.preset)||!this.props.autoReposition||!validCombos.length)return this.props.preset;var bestCombos=validCombos.filter(function(_ref6){return _ref6.name[0]===_this2.props.preset.name[0]});if(bestCombos.length)return bestCombos[0];var oppositeCardinal=getOppositeCardinal(this.props.preset.name),okayCombos=validCombos.filter(function(_ref7){return _ref7.name[0]===oppositeCardinal});return okayCombos.length?okayCombos[0]:validCombos[0]}},{key:"componentDidMount",value:function(){this.align(),window.addEventListener("resize",this.align,!0)}},{key:"componentDidUpdate",value:function(){this.align()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.align,!0)}},{key:"render",value:function(){var _this3=this,props=this.props;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_5_boundless_portal__.a,props.portalProps,__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_4_boundless_dialog__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_omit_keys__.a)(props,Popover.internalKeys),{ref:function(instance){return _this3.dialog=instance},before:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.cloneElement)(props.caretComponent,{ref:function(node){return _this3.$caret=node},className:__WEBPACK_IMPORTED_MODULE_3_classnames___default()("b-popover-caret",props.caretComponent.props.className)}),className:__WEBPACK_IMPORTED_MODULE_3_classnames___default()("b-popover",props.className)})))}}],[{key:"getAlignmentClassFragment",value:function(constant){switch(constant){case 0:return"start";case 1:return"middle";case 2:return"end"}}}]),Popover}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Popover.preset=combinations.reduce(function(map,def){return map[def.name]=def,map},{}),Popover.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_4_boundless_dialog__.a.propTypes,{anchor:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.instanceOf(HTMLElement),__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({props:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.object})]).isRequired,autoReposition:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,caretAnchor:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.instanceOf(HTMLElement),__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({props:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.object})]),caretComponent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.element,portalProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape(__WEBPACK_IMPORTED_MODULE_5_boundless_portal__.a.PropTypes),preset:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOf([Popover.preset.NNW,Popover.preset.N,Popover.preset.NNE,Popover.preset.ENE,Popover.preset.E,Popover.preset.ESE,Popover.preset.SSE,Popover.preset.S,Popover.preset.SSW,Popover.preset.WSW,Popover.preset.W,Popover.preset.WNW])}),Popover.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_4_boundless_dialog__.a.defaultProps,{anchor:void 0,autoReposition:!0,captureFocus:!1,caretAnchor:void 0,caretComponent:DEFAULT_CARET_COMPONENT,closeOnEscKey:!0,closeOnOutsideClick:!0,closeOnOutsideScroll:!0,portalProps:{},preset:Popover.preset.S}),Popover.internalKeys=function(arr1,arr2){return arr1.filter(function(item){return-1===arr2.indexOf(item)})}(Object.keys(Popover.defaultProps),__WEBPACK_IMPORTED_MODULE_4_boundless_dialog__.a.internalKeys),__webpack_exports__.a=Popover},"./packages/boundless-portal/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_react_dom__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__(1)),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_dom__),__webpack_require__("./packages/boundless-utils-omit-keys/index.js")),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Portal=function(_Component){function Portal(){var _ref,_temp,_this,_ret;_classCallCheck(this,Portal);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Portal.__proto__||Object.getPrototypeOf(Portal)).call.apply(_ref,[this].concat(args))),_this.id=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),_this.$portal=null,_this.$passenger=null,_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Portal,_Component),_createClass(Portal,[{key:"componentWillMount",value:function(){this.$portal=document.createElement("div"),this.props.destination.appendChild(this.$portal),this.renderPortalledContent()}},{key:"renderPortalledContent",value:function(){var child=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.isValidElement)(this.props.children)?this.props.children:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",null,this.props.children);this.$portal.id=this.props.portalId||this.id,__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react_dom__.unstable_renderSubtreeIntoContainer)(this,child,this.$portal),this.$passenger=this.$portal.children[0]}},{key:"componentDidUpdate",value:function(){this.renderPortalledContent()}},{key:"componentWillUnmount",value:function(){__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_react_dom__.unmountComponentAtNode)(this.$portal),this.props.destination.removeChild(this.$portal)}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("span",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Portal.internalKeys),_defineProperty({},Portal.PORTAL_DATA_ATTRIBUTE,this.props.portalId||this.id)))}}]),Portal}(__WEBPACK_IMPORTED_MODULE_1_react__.Component);Portal.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,children:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,destination:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.instanceOf(HTMLElement),portalId:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string},Portal.defaultProps={children:null,destination:document.body,portalId:null},Portal.internalKeys=Object.keys(Portal.defaultProps),Portal.PORTAL_DATA_ATTRIBUTE="data-portal-id",__webpack_exports__.a=Portal},"./packages/boundless-progress/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_button__=__webpack_require__("./packages/boundless-button/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),Progress=function(_PureComponent){function Progress(){return _classCallCheck(this,Progress),_possibleConstructorReturn(this,(Progress.__proto__||Object.getPrototypeOf(Progress)).apply(this,arguments))}return _inherits(Progress,_PureComponent),_createClass(Progress,[{key:"renderCancel",value:function(){if(this.props.onCancel)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_3_boundless_button__.a,_extends({},this.props.cancelProps,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-progress-cancel",this.props.cancelProps.className),component:this.props.cancelComponent,onPressed:this.props.onCancel}))}},{key:"renderProgress",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.progressComponent,_extends({},this.props.progressProps,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-progress",this.props.progressProps.className,{"b-progress-indeterminate":void 0===this.props.progress}),role:"presentation",style:_extends({},this.props.progressProps.style,_defineProperty({},this.props.tweenProperty,this.props.progress))}))}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_omit_keys__.a)(this.props,Progress.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-progress-wrapper",this.props.className),"data-progress":void 0!==this.props.progress?this.props.progress:null}),this.renderProgress(),this.props.children,this.renderCancel())}}]),Progress}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Progress.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,cancelComponent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),cancelProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,onCancel:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,progress:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.number]),progressComponent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,progressProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),tweenProperty:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string},Progress.defaultProps={cancelComponent:"button",cancelProps:{},component:"div",onCancel:null,progress:void 0,progressComponent:"div",progressProps:{},tweenProperty:"width"},Progress.internalKeys=Object.keys(Progress.defaultProps),__webpack_exports__.a=Progress},"./packages/boundless-progressive-disclosure/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},noop=function(){},ProgressiveDisclosure=function(_PureComponent){function ProgressiveDisclosure(){var _ref,_temp,_this,_ret;_classCallCheck(this,ProgressiveDisclosure);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=ProgressiveDisclosure.__proto__||Object.getPrototypeOf(ProgressiveDisclosure)).call.apply(_ref,[this].concat(args))),_this.state={expanded:_this.props.expanded},_this.fireStatefulCallback=function(){return _this.props[_this.state.expanded?"onExpand":"onHide"]()},_this.handleClick=function(event){_this.setState({expanded:!_this.state.expanded},_this.fireStatefulCallback),isFunction(_this.props.toggleProps.onClick)&&_this.props.toggleProps.onClick(event)},_this.handleKeyDown=function(event){"Enter"===event.key&&(event.preventDefault(),_this.setState({expanded:!_this.state.expanded},_this.fireStatefulCallback)),isFunction(_this.props.toggleProps.onKeyDown)&&_this.props.toggleProps.onKeyDown(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(ProgressiveDisclosure,_PureComponent),_createClass(ProgressiveDisclosure,[{key:"componentWillReceiveProps",value:function(newProps){newProps.expanded!==this.props.expanded&&this.setState({expanded:newProps.expanded},this.fireStatefulCallback)}},{key:"renderContent",value:function(){if(this.state.expanded)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",{className:"b-disclosure-content"},isFunction(this.props.children)?this.props.children():this.props.children)}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,ProgressiveDisclosure.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-disclosure",this.props.className,{"b-disclosure-expanded":this.state.expanded})}),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.toggleComponent,_extends({},this.props.toggleProps,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-disclosure-toggle",this.props.toggleProps.className),onClick:this.handleClick,onKeyDown:this.handleKeyDown,tabIndex:"0"}),this.state.expanded?this.props.toggleExpandedContent||this.props.toggleContent:this.props.toggleContent),this.renderContent())}}]),ProgressiveDisclosure}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);ProgressiveDisclosure.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,children:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node),__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,expanded:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,onExpand:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onHide:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,toggleComponent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,toggleContent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,toggleExpandedContent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,toggleProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any})},ProgressiveDisclosure.defaultProps={children:null,component:"div",expanded:!1,onExpand:noop,onHide:noop,toggleComponent:"div",toggleContent:null,toggleExpandedContent:null,toggleProps:{}},ProgressiveDisclosure.internalKeys=Object.keys(ProgressiveDisclosure.defaultProps),__webpack_exports__.a=ProgressiveDisclosure},"./packages/boundless-radio/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},Radio=function(_PureComponent){function Radio(){var _ref,_temp,_this,_ret;_classCallCheck(this,Radio);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Radio.__proto__||Object.getPrototypeOf(Radio)).call.apply(_ref,[this].concat(args))),_this.uuid=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_uuid__.a)(),_this.handleChange=function(event){event.target.checked&&_this.props.onSelected(event.target.value),isFunction(_this.props.inputProps.onChange)&&_this.props.inputProps.onChange(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Radio,_PureComponent),_createClass(Radio,[{key:"renderInput",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("input",_extends({},this.props.inputProps,{type:"radio",id:this.props.id||this.props.inputProps.id||this.uuid,className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-radio",this.props.inputProps.className,{"b-radio-selected":this.props.selected}),name:this.props.name,value:this.props.value,checked:this.props.selected,"aria-checked":String(this.props.selected),onChange:this.handleChange}))}},{key:"renderLabel",value:function(){if(this.props.labelContent)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("label",_extends({},this.props.labelProps,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-radio-label",this.props.labelProps.className),htmlFor:this.props.id||this.props.inputProps.id||this.uuid}),this.props.labelContent)}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(this.props.component,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_boundless_utils_omit_keys__.a)(this.props,Radio.internalKeys),{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-radio-wrapper",this.props.className)}),this.renderInput(),this.renderLabel())}}]),Radio}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Radio.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,component:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,inputProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),labelContent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node)]),labelProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),name:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string.isRequired,onSelected:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,selected:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,value:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string.isRequired},Radio.defaultProps={component:"div",inputProps:{},labelContent:null,labelProps:{},name:"",onSelected:function(){},selected:!1,value:""},Radio.internalKeys=Object.keys(Radio.defaultProps),__webpack_exports__.a=Radio},"./packages/boundless-segmented-control/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}function findIndex(arr,test){for(var found=void 0,i=0,len=arr.length;i<len;i+=1)if(test(arr[i])){found=i;break}return found}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_arrow_key_navigation__=__webpack_require__("./packages/boundless-arrow-key-navigation/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_button__=__webpack_require__("./packages/boundless-button/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),SegmentedControl=function(_PureComponent){function SegmentedControl(){var _ref,_temp,_this,_ret;_classCallCheck(this,SegmentedControl);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=SegmentedControl.__proto__||Object.getPrototypeOf(SegmentedControl)).call.apply(_ref,[this].concat(args))),_this.state={selectedIndex:null},_this.handleOptionSelection=function(event){var index=Array.prototype.indexOf.call(event.target.parentElement.children,event.target);_this.state.selectedIndex!==index&&_this.setState({selectedIndex:index},function(){_this.props.onOptionSelected(_this.props.options[_this.state.selectedIndex],_this.state.selectedIndex)})},_this.getSelectedOption=function(){return _this.props.options[_this.state.selectedIndex]},_this.getSelectedOptionIndex=function(){return _this.state.selectedIndex},_this.selectOption=function(option){return _this.setState({selectedIndex:_this.props.options.indexOf(option)})},_this.selectOptionByKey=function(k,v){return _this.setState({selectedIndex:findIndex(_this.props.options,function(option){return option[k]===v})})},_this.selectOptionIndex=function(index){return _this.setState({selectedIndex:index})},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(SegmentedControl,_PureComponent),_createClass(SegmentedControl,[{key:"inferSelectedOptionIndex",value:function(){var props=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,state=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state;return findIndex(props.options,function(option){return option.pressed})||state.selectedIndex}},{key:"componentWillMount",value:function(){this.setState({selectedIndex:this.inferSelectedOptionIndex()||this.props.defaultOptionSelectedIndex})}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.options!==this.props.options&&this.setState({selectedIndex:this.inferSelectedOptionIndex(nextProps)})}},{key:"render",value:function(){var _this2=this;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_3_boundless_arrow_key_navigation__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__.a)(this.props,SegmentedControl.internalKeys),{role:"radiogroup",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-segmented-control",this.props.className),mode:__WEBPACK_IMPORTED_MODULE_3_boundless_arrow_key_navigation__.a.mode.HORIZONTAL}),this.props.options.map(function(props,index){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_4_boundless_button__.a,_extends({},props,{key:props.key||index,"aria-checked":index===_this2.state.selectedIndex,component:props.component||_this2.props.optionComponent,className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-segmented-control-option",props.className,{"b-segmented-control-option-selected":index===_this2.state.selectedIndex}),onPressed:_this2.handleOptionSelection,pressed:index===_this2.state.selectedIndex,role:"radio"}),props.children)}))}}]),SegmentedControl}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);SegmentedControl.propTypes={"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,defaultOptionSelectedIndex:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.number,onOptionSelected:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,optionComponent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func]),options:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any,children:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.node})).isRequired},SegmentedControl.defaultProps={defaultOptionSelectedIndex:0,onOptionSelected:function(){},optionComponent:"button",options:[]},SegmentedControl.internalKeys=Object.keys(SegmentedControl.defaultProps),__webpack_exports__.a=SegmentedControl},"./packages/boundless-tokenized-input/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_boundless_typeahead__=__webpack_require__("./packages/boundless-typeahead/index.js"),__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),first=function(array){return array[0]},last=function(array){return array[array.length-1]},isFunction=function(x){return"function"==typeof x},TokenizedInput=function(_PureComponent){function TokenizedInput(){var _ref,_temp,_this,_ret;_classCallCheck(this,TokenizedInput);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=TokenizedInput.__proto__||Object.getPrototypeOf(TokenizedInput)).call.apply(_ref,[this].concat(args))),_this.focus=function(){return _this.refs.typeahead.focus()},_this.getInputNode=function(){return _this.refs.typeahead.getInputNode()},_this.getSelectedEntityText=function(){return _this.refs.typeahead.getSelectedEntityText()},_this.getValue=function(){return _this.refs.typeahead.getValue()},_this.select=function(){return _this.refs.typeahead.select()},_this.setValue=function(value){return _this.refs.typeahead.setValue(value)},_this.add=function(index){-1===_this.props.tokens.indexOf(index)&&_this.props.handleAddToken(index)},_this.handleInputClick=function(event){_this.clearSelection(),isFunction(_this.props.inputProps.onClick)&&_this.props.inputProps.onClick(event)},_this.handleInputFocus=function(event){_this.clearSelection(),isFunction(_this.props.inputProps.onFocus)&&_this.props.inputProps.onFocus(event)},_this.handleKeyDown=function(event){switch(event.which){case 37:_this.selectPreviousToken(event.shiftKey);break;case 39:_this.selectNextToken(event.shiftKey);break;case 8:_this.props.tokensSelected.length&&(_this.remove(_this.props.tokensSelected),_this.focus());break;case 65:event.metaKey&&(event.preventDefault(),_this.focus(),_this.select(),_this._suppressNextTokenSelection=!0,_this.props.handleNewSelection(_this.props.tokens))}isFunction(_this.props.onKeyDown)&&_this.props.onKeyDown(event)},_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(TokenizedInput,_PureComponent),_createClass(TokenizedInput,[{key:"componentDidUpdate",value:function(prevProps){var previousSelectedIndexes=prevProps.tokensSelected,currentSelectedIndexes=this.props.tokensSelected;if(this.props.tokens.length>prevProps.tokens.length&&this.setValue(""),this._suppressNextTokenSelection)return void(this._suppressNextTokenSelection=!1);if(previousSelectedIndexes!==currentSelectedIndexes&&0!==currentSelectedIndexes.length){if(1===currentSelectedIndexes.length||currentSelectedIndexes[0]!==previousSelectedIndexes[0])return this.refs["token_"+currentSelectedIndexes[0]].focus();if(last(currentSelectedIndexes)!==last(previousSelectedIndexes))return this.refs["token_"+last(currentSelectedIndexes)].focus();this.refs["token_"+currentSelectedIndexes[0]].focus()}}},{key:"remove",value:function(index){var _this2=this,indexes=(Array.isArray(index)?index:[index]).filter(function(idx){return-1!==_this2.props.tokens.indexOf(idx)});indexes.length&&this.props.handleRemoveTokens(indexes)}},{key:"selectToken",value:function(index){this.props.handleNewSelection([index])}},{key:"selectTokens",value:function(indexes){this.props.handleNewSelection(indexes)}},{key:"selectPreviousToken",value:function(append){var selected=this.props.tokensSelected,indexes=this.props.tokens;if(1!==selected.length||first(selected)!==first(indexes))if(0===selected.length)this.selectToken(last(indexes));else{var previousToken=indexes[indexes.indexOf(first(selected))-1];this.selectTokens(append?[previousToken].concat(selected):[previousToken])}}},{key:"selectNextToken",value:function(append){var selected=this.props.tokensSelected,indexes=this.props.tokens;if(0!==selected.length)if(last(selected)===last(indexes))this.clearSelection(),this.focus();else{var nextToken=indexes[indexes.indexOf(last(selected))+1];this.selectTokens(append?selected.concat(nextToken):[nextToken])}}},{key:"clearSelection",value:function(){this.props.handleNewSelection([])}},{key:"handleTokenCloseClick",value:function(index,event){event.stopPropagation(),this.remove(index),this.focus(),this.props.tokenCloseComponent.props.onClick&&this.props.tokenCloseComponent.props.onClick(event)}},{key:"renderTokenClose",value:function(index){if(this.props.tokenCloseVisible)return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.cloneElement)(this.props.tokenCloseComponent,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-tokenfield-token-close",this.props.tokenCloseComponent.props.className),onClick:this.handleTokenCloseClick.bind(this,index)})}},{key:"handleTokenKeyDown",value:function(index,event){switch(event.which){case 13:case 32:this.selectToken(index),event.preventDefault();break;case 8:this.remove(index),this.focus(),event.preventDefault()}}},{key:"renderTokens",value:function(){var _this3=this;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",{className:"b-tokenfield-tokens",role:"listbox"},this.props.tokens.map(function(index){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",{ref:"token_"+index,key:index,className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-tokenfield-token",{"b-tokenfield-token-selected":-1!==_this3.props.tokensSelected.indexOf(index)}),onClick:_this3.selectToken.bind(_this3,index),onKeyDown:_this3.handleTokenKeyDown.bind(_this3,index),role:"option",tabIndex:"0"},_this3.props.entities[index].text,_this3.renderTokenClose(index))}))}},{key:"render",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_omit_keys__.a)(this.props,TokenizedInput.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-tokenfield-wrapper",this.props.className),onKeyDown:this.handleKeyDown}),this.renderTokens(),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_3_boundless_typeahead__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4_boundless_utils_object_intersection__.a)(this.props,__WEBPACK_IMPORTED_MODULE_3_boundless_typeahead__.a.defaultProps),{ref:"typeahead",className:"b-tokenfield",clearOnSelection:!0,inputProps:_extends({},this.props.inputProps,{onClick:this.handleInputClick,onFocus:this.handleInputFocus}),onEntitySelected:this.add})))}}]),TokenizedInput}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);TokenizedInput.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_typeahead__.a.propTypes,{handleAddToken:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,handleRemoveTokens:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,handleNewSelection:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,tokenCloseComponent:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.element,tokenCloseVisible:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,tokens:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.number),tokensSelected:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.number)}),TokenizedInput.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_3_boundless_typeahead__.a.defaultProps,{handleAddToken:function(){},handleRemoveTokens:function(){},handleNewSelection:function(){},tokenCloseComponent:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",null,"X"),tokenCloseVisible:!0,tokens:[],tokensSelected:[]}),TokenizedInput.internalKeys=Object.keys(TokenizedInput.defaultProps),__webpack_exports__.a=TokenizedInput},"./packages/boundless-typeahead/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function _objectWithoutProperties(obj,keys){var target={};for(var i in obj)keys.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(obj,i)&&(target[i]=obj[i]);return target}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}var __WEBPACK_IMPORTED_MODULE_0_prop_types__=__webpack_require__("./node_modules/prop-types/index.js"),__WEBPACK_IMPORTED_MODULE_0_prop_types___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__),__WEBPACK_IMPORTED_MODULE_1_react__=__webpack_require__(0),__WEBPACK_IMPORTED_MODULE_2_classnames__=(__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__),__webpack_require__("./node_modules/classnames/index.js")),__WEBPACK_IMPORTED_MODULE_2_classnames___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__),__WEBPACK_IMPORTED_MODULE_3_escape_string_regexp__=__webpack_require__("./packages/boundless-typeahead/node_modules/escape-string-regexp/index.js"),__WEBPACK_IMPORTED_MODULE_3_escape_string_regexp___default=__webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_escape_string_regexp__),__WEBPACK_IMPORTED_MODULE_4_boundless_input__=__webpack_require__("./packages/boundless-input/index.js"),__WEBPACK_IMPORTED_MODULE_5_boundless_utils_object_intersection__=__webpack_require__("./packages/boundless-utils-object-intersection/index.js"),__WEBPACK_IMPORTED_MODULE_6_boundless_utils_omit_keys__=__webpack_require__("./packages/boundless-utils-omit-keys/index.js"),__WEBPACK_IMPORTED_MODULE_7_boundless_utils_uuid__=__webpack_require__("./packages/boundless-utils-uuid/index.js"),_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),isFunction=function(x){return"function"==typeof x},isString=function(x){return"string"==typeof x},noop=function(){},Typeahead=function(_PureComponent){function Typeahead(){var _ref,_temp,_this,_ret;_classCallCheck(this,Typeahead);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return _temp=_this=_possibleConstructorReturn(this,(_ref=Typeahead.__proto__||Object.getPrototypeOf(Typeahead)).call.apply(_ref,[this].concat(args))),_initialiseProps.call(_this),_ret=_temp,_possibleConstructorReturn(_this,_ret)}return _inherits(Typeahead,_PureComponent),_createClass(Typeahead,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(nextProps){nextProps.entities!==this.props.entities&&this.computeMatches(nextProps.entities),nextProps.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(nextProps.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(prevProps,prevState){this.state.entityMatchIndexes.length&&!prevState.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==prevProps.entities[prevState.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(index){this.setState({selectedEntityIndex:index},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(delta){var matches=this.state.entityMatchIndexes,totalMatches=matches.length,nextIndex=matches.indexOf(this.state.selectedEntityIndex)+delta;if(totalMatches){nextIndex<0?nextIndex=totalMatches-1:nextIndex>=totalMatches&&(nextIndex=0);var matchIndex=matches[nextIndex],matchesNode=this.refs.matches,matchesNodeYEnd=matchesNode.scrollTop+matchesNode.clientHeight,matchNode=this.refs["match_$"+matchIndex],matchNodeYStart=matchNode.offsetTop,matchNodeYEnd=matchNodeYStart+matchNode.clientHeight;matchNodeYEnd>=matchesNodeYEnd?matchesNode.scrollTop+=matchNodeYEnd-matchesNodeYEnd:matchNodeYStart<=matchesNode.scrollTop&&(matchesNode.scrollTop=matchNodeYStart),this.setState({selectedEntityIndex:matchIndex})}}},{key:"cursorAtEndOfInput",value:function(){var node=this.getInputNode();return node.selectionStart===node.selectionEnd&&node.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(input,entity){for(var entityContent=entity.text,frags=entityContent.split(new RegExp("("+__WEBPACK_IMPORTED_MODULE_3_escape_string_regexp___default()(input)+")","ig")),normalizedUserText=input.toLowerCase(),threshold=frags.length,i=-1;++i<threshold;)frags[i].toLowerCase()===normalizedUserText&&(frags[i]=__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("mark",{key:i,className:"b-typeahead-match-highlight"},frags[i]));return frags}},{key:"markStartsWithMatchSubstring",value:function(input,entity){var entityContent=entity.text,seekValue=input.toLowerCase(),indexStart=entityContent.toLowerCase().indexOf(seekValue),indexEnd=indexStart+seekValue.length;return[__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("span",{key:"0"},entityContent.slice(0,indexStart)),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("mark",{key:"1",className:"b-typeahead-match-highlight"},entityContent.slice(indexStart,indexEnd)),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("span",{key:"2"},entityContent.slice(indexEnd))]}},{key:"getMarkingFunction",value:function(){return isString(this.props.algorithm)?this.props.algorithm===Typeahead.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:isFunction(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(userText,entities){var normalized=userText.toLowerCase();return entities.reduce(function(result,entity,index){return-1!==entity.text.toLowerCase().indexOf(normalized)?result.push(index)&&result:result},[])}},{key:"getStartsWithMatchIndexes",value:function(userText,entities){var seekValue=userText.toLowerCase();return entities.reduce(function(results,entity,index){return 0===entity.text.toLowerCase().indexOf(seekValue)&&results.push(index),results},[])}},{key:"getMatchingFunction",value:function(){return isString(this.props.algorithm)?this.props.algorithm===Typeahead.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:isFunction(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(providedEntities){var _this2=this;this.setState(function(state,props){var entities=providedEntities||props.entities,currentValue=state.input,matches=""===currentValue?[]:_this2.getMatchIndexes(currentValue,entities);return{selectedEntityIndex:matches.length?matches[0]:-1,entityMatchIndexes:matches}})}},{key:"renderNotification",value:function(){return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite",role:"status"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var userText=this.state.input,raw=this.getSelectedEntityText(),processed="";return raw&&0===raw.toLowerCase().indexOf(userText.toLowerCase())&&(processed=raw.replace(new RegExp(userText,"i"),userText)),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",_extends({},this.props.hintProps,{ref:"hint",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),processed)}}},{key:"renderMatches",value:function(){var _this3=this;if(this.state.entityMatchIndexes.length){var props=this.props.matchWrapperProps;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",_extends({},props,{ref:"matches",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-typeahead-match-wrapper",props.className),role:"listbox"}),this.state.entityMatchIndexes.map(function(index){var entity=_this3.props.entities[index],className=entity.className,text=entity.text,rest=_objectWithoutProperties(entity,["className","text"]);return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",_extends({},rest,{ref:"match_$"+index,className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-typeahead-match",className,{"b-typeahead-match-selected":_this3.state.selectedEntityIndex===index}),key:text,onClick:_this3.handleMatchClick.bind(_this3,index),role:"option"}),_this3.markMatchSubstring(_this3.state.input,entity))}))}}},{key:"render",value:function(){var props=this.props,state=this.state;return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)("div",_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6_boundless_utils_omit_keys__.a)(props,Typeahead.internalKeys),{ref:"wrapper",className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-typeahead-wrapper",props.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_react__.createElement)(__WEBPACK_IMPORTED_MODULE_4_boundless_input__.a,_extends({},__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_boundless_utils_object_intersection__.a)(props,__WEBPACK_IMPORTED_MODULE_4_boundless_input__.a.defaultProps),{ref:"input","aria-controls":state.id,inputProps:_extends({},props.inputProps,{className:__WEBPACK_IMPORTED_MODULE_2_classnames___default()("b-typeahead",props.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),Typeahead}(__WEBPACK_IMPORTED_MODULE_1_react__.PureComponent);Typeahead.mode={STARTS_WITH:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_boundless_utils_uuid__.a)(),FUZZY:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_boundless_utils_uuid__.a)()},Typeahead.propTypes=_extends({},__WEBPACK_IMPORTED_MODULE_4_boundless_input__.a.propTypes,{algorithm:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY]),__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({marker:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])]),matcher:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.oneOf([Typeahead.mode.STARTS_WITH,Typeahead.mode.FUZZY])])})]),clearOnSelection:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,entities:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({text:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string.isRequired})),hint:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.bool,hintProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),matchWrapperProps:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({"*":__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.any}),offscreenClass:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.string,onComplete:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onEntityHighlighted:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func,onEntitySelected:__WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func}),Typeahead.defaultProps=_extends({},__WEBPACK_IMPORTED_MODULE_4_boundless_input__.a.defaultProps,{algorithm:Typeahead.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:noop,onEntityHighlighted:noop,onEntitySelected:noop}),Typeahead.internalKeys=Object.keys(Typeahead.defaultProps);var _initialiseProps=function(){var _this4=this;this.state={entityMatchIndexes:[],id:__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_boundless_utils_uuid__.a)(),isControlled:isString(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return _this4.setState({input:value})},this.getSelectedEntityText=function(){var entity=_this4.props.entities[_this4.state.selectedEntityIndex];return entity?entity.text:""},this.resetMatches=function(){_this4.mounted&&_this4.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return _this4.refs.input.refs.field},this.select=function(){var input=_this4.getInputNode();input.selectionStart=0,input.selectionEnd=_this4.getValue().length},this.focus=function(){return _this4.getInputNode().focus()},this.getValue=function(){return _this4.refs.input.getValue()},this.setValue=function(){var value=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";_this4.refs.input.setValue(value),_this4.updateInputState(value),_this4.resetMatches(),_this4.focus()},this.setValueWithSelectedEntity=function(){_this4.props.onEntitySelected(_this4.state.selectedEntityIndex),_this4.props.clearOnSelection?_this4.setValue(""):_this4.setValue(_this4.getSelectedEntityText()),window.setTimeout(_this4.resetMatches,0)},this.markMatchSubstring=function(){return _this4.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return _this4.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(event){!1===_this4.state.isControlled&&(_this4.updateInputState(event.target.value),_this4.computeMatches()),isFunction(_this4.props.inputProps.onChange)&&_this4.props.inputProps.onChange(event)},this.handleKeyDown=function(event){switch(event.key){case"ArrowLeft":event.target.selectionStart>1&&event.stopPropagation();break;case"Tab":case"ArrowRight":-1!==_this4.state.selectedEntityIndex&&_this4.cursorAtEndOfInput()&&_this4.getInputNode()===event.target&&!event.shiftKey&&(event.nativeEvent.preventDefault(),_this4.setValueWithSelectedEntity());break;case"ArrowUp":event.nativeEvent.preventDefault(),_this4.selectMatch(-1),_this4.focus();break;case"ArrowDown":event.nativeEvent.preventDefault(),_this4.selectMatch(1),_this4.focus();break;case"Escape":-1!==_this4.state.selectedEntityIndex&&_this4.getInputNode()===event.target&&_this4.resetMatches();break;case"Enter":-1!==_this4.state.selectedEntityIndex&&_this4.getInputNode()===event.target?(event.nativeEvent.preventDefault(),_this4.setValueWithSelectedEntity()):_this4.props.onComplete(_this4.state.input,event)}isFunction(_this4.props.onKeyDown)&&_this4.props.onKeyDown(event)}};__webpack_exports__.a=Typeahead},"./packages/boundless-typeahead/node_modules/escape-string-regexp/index.js":function(module,exports,__webpack_require__){"use strict";var matchOperatorsRe=/[|\\{}()[\]^$+*?.]/g;module.exports=function(str){if("string"!=typeof str)throw new TypeError("Expected a string");return str.replace(matchOperatorsRe,"\\$&")}},"./packages/boundless-utils-object-intersection/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function getIntersection(obj1,obj2){return Object.keys(obj2).reduce(function(childProps,key){return key in obj1&&(childProps[key]=obj1[key]),childProps},{})}__webpack_exports__.a=getIntersection},"./packages/boundless-utils-omit-keys/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function omitKeysFromSourceObject(source){var omittedKeys=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Object.keys(source).reduce(function(hash,key){return-1===omittedKeys.indexOf(key)&&(hash[key]=source[key]),hash},{})}__webpack_exports__.a=omitKeysFromSourceObject},"./packages/boundless-utils-transform-property/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_exports__.a=function(){for(var props=["transform","WebkitTransform","MozTransform","OTransform","msTransform","webkit-transform"],i=0,len=props.length;i<len;i++)if(props[i]in document.documentElement.style)return props[i];return!1}()},"./packages/boundless-utils-uuid/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";function uuid(){return"b-"+([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,function(a){return(a^16*Math.random()>>a/4).toString(16)})}__webpack_exports__.a=uuid},0:function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_0__},1:function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_1__}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9ib3VuZGxlc3MuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDQwMzBkMDQ1N2I3OWJlOWRjNjgzIiwid2VicGFjazovLy8uL34vY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLWFzeW5jL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1idXR0b24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94LWdyb3VwL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1jaGVja2JveC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtZGlhbG9nL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1maXR0ZWQtdGV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtaW1hZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLWlucHV0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1tb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9+L2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL34vbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL34vbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL34vbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL34vbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL34vbG9kYXNoL2lzSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9+L2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9+L2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvdG9GaW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvdG9JbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL34vbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3BvdmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3J0YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1wcm9ncmVzc2l2ZS1kaXNjbG9zdXJlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy1yYWRpby9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3Mtc2VnbWVudGVkLWNvbnRyb2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXRva2VuaXplZC1pbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtdHlwZWFoZWFkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy10eXBlYWhlYWQvfi9lc2NhcGUtc3RyaW5nLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy10cmFuc2Zvcm0tcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcImFtZFwiOlwicmVhY3RcIixcImNvbW1vbmpzMlwiOlwicmVhY3RcIixcInJvb3RcIjpcIlJlYWN0XCJ9Iiwid2VicGFjazovLy9leHRlcm5hbCB7XCJhbWRcIjpcInJlYWN0LWRvbVwiLFwiY29tbW9uanMyXCI6XCJyZWFjdC1kb21cIixcInJvb3RcIjpcIlJlYWN0RE9NXCJ9Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJ1bmRlZmluZWQiLCJ0aGlzIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzFfXyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJ2YWx1ZSIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiLi9leHBvcnRzLmpzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fcGFja2FnZXNfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3BhY2thZ2VzX2JvdW5kbGVzc19hc3luY19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19wYWNrYWdlc19ib3VuZGxlc3NfYnV0dG9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX3BhY2thZ2VzX2JvdW5kbGVzc19jaGVja2JveF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19wYWNrYWdlc19ib3VuZGxlc3NfY2hlY2tib3hfZ3JvdXBfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fcGFja2FnZXNfYm91bmRsZXNzX2RpYWxvZ19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19wYWNrYWdlc19ib3VuZGxlc3NfZml0dGVkX3RleHRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fcGFja2FnZXNfYm91bmRsZXNzX2ltYWdlX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX3BhY2thZ2VzX2JvdW5kbGVzc19pbnB1dF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19wYWNrYWdlc19ib3VuZGxlc3NfbW9kYWxfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX3BhY2thZ2VzX2JvdW5kbGVzc19wYWdpbmF0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX19wYWNrYWdlc19ib3VuZGxlc3NfcG9wb3Zlcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fcGFja2FnZXNfYm91bmRsZXNzX3BvcnRhbF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fcGFja2FnZXNfYm91bmRsZXNzX3Byb2dyZXNzaXZlX2Rpc2Nsb3N1cmVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfX3BhY2thZ2VzX2JvdW5kbGVzc19wcm9ncmVzc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fcGFja2FnZXNfYm91bmRsZXNzX3JhZGlvX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X19wYWNrYWdlc19ib3VuZGxlc3Nfc2VnbWVudGVkX2NvbnRyb2xfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfX3BhY2thZ2VzX2JvdW5kbGVzc190b2tlbml6ZWRfaW5wdXRfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfX3BhY2thZ2VzX2JvdW5kbGVzc190eXBlYWhlYWRfXyIsIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJhcHBseSIsImtleSIsImhhc093biIsImpvaW4iLCJ3aW5kb3ciLCIuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsIi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsImludmFyaWFudCIsImNvbmRpdGlvbiIsImZvcm1hdCIsImEiLCJiIiwiZSIsImYiLCJ2YWxpZGF0ZUZvcm1hdCIsImVycm9yIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwiZnVuYyIsIm51bWJlciIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIl9fd2VicGFja19hbWRfb3B0aW9uc19fIiwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyIsImciLCJGdW5jdGlvbiIsImV2YWwiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1hcnJvdy1rZXktbmF2aWdhdGlvbi9pbmRleC5qcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX18iLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiREFUQV9BVFRSSUJVVEVfSU5ERVgiLCJBcnJvd0tleU5hdmlnYXRpb24iLCJfUHVyZUNvbXBvbmVudCIsIl9yZWYiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJfa2V5IiwiZ2V0UHJvdG90eXBlT2YiLCJjb25jYXQiLCJzdGF0ZSIsImFjdGl2ZUNoaWxkSW5kZXgiLCJkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleCIsImNoaWxkcmVuIiwiaGFuZGxlS2V5RG93biIsImV2ZW50IiwibW9kZSIsIlZFUlRJQ0FMIiwiQk9USCIsInByZXZlbnREZWZhdWx0IiwibW92ZUZvY3VzIiwiSE9SSVpPTlRBTCIsIm9uS2V5RG93biIsImhhbmRsZUZvY3VzIiwiaGFzQXR0cmlidXRlIiwiaW5kZXgiLCJwYXJzZUludCIsImdldEF0dHJpYnV0ZSIsImNoaWxkIiwidG9BcnJheSIsInNldFN0YXRlIiwib25Gb2N1cyIsInBlcnNpc3RXcmFwcGVyRWxlbWVudFJlZmVyZW5jZSIsInVua25vd25UeXBlIiwiJHdyYXBwZXIiLCJIVE1MRWxlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJudW1DaGlsZHJlbiIsImNvdW50IiwiZ2V0RmlsdGVyZWRDaGlsZHJlbiIsIm5leHRQcm9wcyIsInNldEFjdGl2ZUNoaWxkSW5kZXgiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJzZXRGb2N1cyIsImNoaWxkTm9kZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsImZvY3VzIiwiZGVsdGEiLCJuZXh0SW5kZXgiLCJfdGhpczIiLCJtYXAiLCJfY2xvbmVFbGVtZW50IiwidGFiSW5kZXgiLCJjb21wb25lbnQiLCJpbnRlcm5hbEtleXMiLCJyZWYiLCJyZW5kZXJDaGlsZHJlbiIsInByb3BUeXBlcyIsIioiLCJkZWZhdWx0UHJvcHMiLCJrZXlzIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXN5bmMvaW5kZXguanMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0IiwiYmFzZSIsInBhdGgiLCJmYWxsYmFjayIsInNwbGl0IiwicmVkdWNlIiwiY3VycmVudCIsImZyYWdtZW50IiwiQXN5bmMiLCJtb3VudGVkIiwicHJvbWlzZSIsImNvbnRleHQiLCJwYXlsb2FkIiwiZmlyZVJlbmRlckNhbGxiYWNrIiwiY29udGVudCIsImhhbmRsZUNoaWxkcmVuIiwiYm91bmRIYW5kbGVyIiwiaGFuZGxlUHJvbWlzZUZ1bGZpbGxtZW50IiwiYmluZCIsInRoZW4iLCJjaGlsZHJlbkRpZFJlbmRlciIsInBlbmRpbmdDb250ZW50IiwiY2xhc3NOYW1lIiwiYi1hc3luYy1wZW5kaW5nIiwiUHJvbWlzZSIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWJ1dHRvbi9pbmRleC5qcyIsIkJ1dHRvbiIsImhhbmRsZUNsaWNrIiwiZGlzYWJsZWQiLCJvbkNsaWNrIiwiZmlyZVN0YXRlZnVsQ2FsbGJhY2siLCJwcmVzc2VkIiwiYi1idXR0b24tcHJlc3NhYmxlIiwiYi1idXR0b24tcHJlc3NlZCIsImFyaWEtcHJlc3NlZCIsInJvbGUiLCJvblByZXNzZWQiLCJvblVucHJlc3NlZCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94LWdyb3VwL2luZGV4LmpzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19jaGVja2JveF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fIiwibm9vcCIsIkNoZWNrYm94R3JvdXAiLCJzZWxlY3RBbGxVVUlEIiwiaXRlbXMiLCJldmVyeSIsIml0ZW0iLCJpbnB1dFByb3BzIiwiY2hlY2tlZCIsInNvbWUiLCJhbGxDaGVja2VkIiwiYWxsSXRlbXNDaGVja2VkIiwic2VsZWN0QWxsUHJvcHMiLCJpbmRldGVybWluYXRlIiwiYW55SXRlbXNDaGVja2VkIiwibGFiZWwiLCJvbkNoZWNrZWQiLCJvbkFsbENoZWNrZWQiLCJvblVuY2hlY2tlZCIsIm9uQWxsVW5jaGVja2VkIiwib25DaGlsZENoZWNrZWQiLCJvbkNoaWxkVW5jaGVja2VkIiwicmVuZGVyQ2hlY2tib3hlcyIsInNlbGVjdEFsbCIsIkJFRk9SRSIsInVuc2hpZnQiLCJyZW5kZXJTZWxlY3RBbGxDaGVja2JveCIsIkFGVEVSIiwiTk9ORSIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94L2luZGV4LmpzIiwiaXNGdW5jdGlvbiIsIngiLCJDaGVja2JveCIsImlkIiwiaGFuZGxlQ2hhbmdlIiwib25DaGFuZ2UiLCJyZWZzIiwiaW5wdXQiLCJzZXRJbmRldGVybWluYXRlIiwiU3RyaW5nIiwidHlwZSIsImItY2hlY2tib3gtbWl4ZWQiLCJiLWNoZWNrYm94LWNoZWNrZWQiLCJiLWNoZWNrYm94LXVuY2hlY2tlZCIsImFyaWEtY2hlY2tlZCIsImdldEFyaWFTdGF0ZSIsImxhYmVsUHJvcHMiLCJodG1sRm9yIiwicmVuZGVySW5wdXQiLCJyZW5kZXJMYWJlbCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfcG9ydGFsX18iLCJzbGljZSIsIkRpYWxvZyIsIm5hdGl2ZUV2ZW50IiwiY2FwdHVyZUZvY3VzIiwicHJldmlvdXMiLCJleHBsaWNpdE9yaWdpbmFsVGFyZ2V0IiwicmVsYXRlZFRhcmdldCIsImlzUGFydE9mRGlhbG9nIiwic2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50Iiwic2V0VGltZW91dCIsIm9uQ2xvc2UiLCJoYW5kbGVJbnNpZGVDbGljayIsImhhbmRsZU91dHNpZGVDbGljayIsImhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCIsInJvb3RzIiwicXVlcnlTZWxlY3RvckFsbCIsIlBPUlRBTF9EQVRBX0FUVFJJQlVURSIsImRvbSIsImdldEVsZW1lbnRCeUlkIiwibm9kZVR5cGUiLCJFTEVNRU5UX05PREUiLCJwYXJlbnROb2RlIiwiY29udGFpbnMiLCJhZGRFdmVudExpc3RlbmVyIiwiJGRpYWxvZyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwcm9wIiwiYXJpYS1oaWRkZW4iLCJyZW5kZXJGb2N1c0JvdW5kYXJ5IiwiYmVmb3JlIiwiZGlhbG9nQ29tcG9uZW50IiwiZGlhbG9nUHJvcHMiLCJhZnRlciIsImNsb3NlT25Fc2NLZXkiLCJjbG9zZU9uSW5zaWRlQ2xpY2siLCJjbG9zZU9uT3V0c2lkZUNsaWNrIiwiY2xvc2VPbk91dHNpZGVGb2N1cyIsImNsb3NlT25PdXRzaWRlU2Nyb2xsIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtZml0dGVkLXRleHQvaW5kZXguanMiLCJ0b0kiLCJzdHJpbmdOdW1iZXIiLCJyZXNjYWxlIiwiY29udGFpbmVyQm94IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImZvbnRTaXplIiwiYmFzZUZvbnRTaXplIiwiY29udGFpbmVySGVpZ2h0IiwiaGVpZ2h0IiwiY29udGFpbmVyV2lkdGgiLCJ3aWR0aCIsImJveFNpemluZyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJvcHRpbWl6ZUZvckhlaWdodCIsIk1hdGgiLCJmbG9vciIsIm9mZnNldEhlaWdodCIsIm9wdGltaXplRm9yV2lkdGgiLCJvZmZzZXRXaWR0aCIsInVwc2NhbGUiLCJzdHlsZSIsIm1heCIsIm1pbiIsImhhbmRsZVdpbmRvd1Jlc2l6ZSIsImluc3RhbmNlcyIsImZvckVhY2giLCJyZWdpc3Rlckluc3RhbmNlIiwidW5yZWdpc3Rlckluc3RhbmNlIiwic3BsaWNlIiwiaW5kZXhPZiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19jbGFzc25hbWVzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfY2xhc3NuYW1lc19fX2RlZmF1bHQiLCJGaXR0ZWRUZXh0IiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtaW1hZ2UvaW5kZXguanMiLCJJbWFnZSIsInN0YXR1cyIsIkxPQURJTkciLCJzcmMiLCJyZXNldFByZWxvYWRlciIsInByZWxvYWQiLCJsb2FkZXIiLCJvbmxvYWQiLCJvbmVycm9yIiwiY3JlYXRlRWxlbWVudCIsIkxPQURFRCIsIkVSUk9SIiwiYi1pbWFnZS1sb2FkaW5nIiwiYi1pbWFnZS1sb2FkZWQiLCJiLWltYWdlLWVycm9yIiwidGl0bGUiLCJhbHQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1pbnB1dC9pbmRleC5qcyIsIklucHV0IiwiaXNDb250cm9sbGVkIiwiaXNGb2N1c2VkIiwic2V0SW5wdXRWYWx1ZSIsImdldFZhbHVlIiwiZmllbGQiLCJoYW5kbGVCbHVyIiwib25CbHVyIiwiZGVmYXVsdFZhbHVlIiwibmV4dFZhbHVlIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiYnViYmxlcyIsImlzTm9uRW1wdHkiLCJoaWRlUGxhY2Vob2xkZXJPbkZvY3VzIiwicGxhY2Vob2xkZXIiLCJnZXRQbGFjZWhvbGRlclRleHQiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1tb2RhbC9pbmRleC5qcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfZGlhbG9nX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3BvcnRhbF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vYmplY3RfaW50ZXJzZWN0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fIiwiTW9kYWwiLCJwb3J0YWxQcm9wcyIsIiRtb2RhbCIsIm1hc2tQcm9wcyIsIm1vZGFsUHJvcHMiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL2luZGV4LmpzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2xvZGFzaF9pc0ludGVnZXJfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9sb2Rhc2hfaXNJbnRlZ2VyX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19yZWFjdF9kb21fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9jbGFzc25hbWVzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfY2xhc3NuYW1lc19fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX2FzeW5jX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3NlZ21lbnRlZF9jb250cm9sX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X2JvdW5kbGVzc191dGlsc191dWlkX18iLCJpZGVudGl0eSIsIlBhZ2luYXRpb24iLCJjdXJyZW50UGFnZSIsImluaXRpYWxQYWdlIiwidGFyZ2V0SW5kZXgiLCJudW1JdGVtc1BlclBhZ2UiLCJnZXRQYWdlRm9ySW5kZXgiLCJpdGVtc1BlclBhZ2UiLCJjZWlsIiwidG90YWxQYWdlcyIsInRvdGFsSXRlbXMiLCJmaXJzdFZpc2libGVJdGVtSW5kZXgiLCJqdW1wVG9JbmRleCIsImhhbmRsZVBhZ2VTZWxlY3RlZCIsIm9wdGlvbiIsIm5leHRUYXJnZXRJbmRleCIsIkNPTlRST0xfREFUQV9BVFRSSUJVVEUiLCJjb250cm9sIiwiRklSU1QiLCJQUkVWSU9VUyIsIk5FWFQiLCJMQVNUIiwiaGFuZGxlSXRlbVByb21pc2VGdWxmaWxsbWVudCIsIml0ZW1Ub0pTWENvbnZlcnRlciIsIl8iLCJpdGVtXzAiLCJvbGRQcm9wcyIsImlkZW50aWZpZXIiLCJvcHRpb25zIiwic3RhcnRQYWdlIiwibnVtUGFnZVRvZ2dsZXMiLCJlbmRQYWdlIiwic2hvd1BhZ2luYXRpb25TdGF0ZSIsInNob3dKdW1wVG9GaXJzdFBhZ2VDb250cm9sIiwiX29wdGlvbnMkcHVzaCIsImp1bXBUb0ZpcnN0UGFnZUNvbnRyb2xDb250ZW50Iiwic2hvd0p1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2wiLCJfb3B0aW9ucyRwdXNoMiIsImp1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2xDb250ZW50IiwiX29wdGlvbnMkcHVzaDMiLCJzaG93SnVtcFRvTmV4dFBhZ2VDb250cm9sIiwiX29wdGlvbnMkcHVzaDQiLCJqdW1wVG9OZXh0UGFnZUNvbnRyb2xDb250ZW50Iiwic2hvd0p1bXBUb0xhc3RQYWdlQ29udHJvbCIsIl9vcHRpb25zJHB1c2g1IiwianVtcFRvTGFzdFBhZ2VDb250cm9sQ29udGVudCIsImN1c3RvbUNvbnRyb2xDb250ZW50IiwiZmlyc3RJbmRleCIsImxhc3RJbmRleCIsImdldEl0ZW0iLCJfdGhpczMiLCJpdGVtV3JhcHBlclByb3BzIiwiZ2VuZXJhdGVJdGVtcyIsImItcGFnaW5hdGlvbi1pdGVtLWV2ZW4iLCJiLXBhZ2luYXRpb24taXRlbS1vZGQiLCJkYXRhLXBhZ2luYXRpb24taW5kZXgiLCJpdGVtTG9hZGluZ0NvbnRlbnQiLCJwb3NpdGlvbiIsIl9jeCIsImhpZGVQYWdlcklmTm90TmVlZGVkIiwiY29udHJvbFdyYXBwZXJQcm9wcyIsIkFCT1ZFIiwiQkVMT1ciLCJnZW5lcmF0ZUNvbnRyb2xzIiwib25PcHRpb25TZWxlY3RlZCIsInJlbmRlckNvbnRyb2xzIiwicmVuZGVySXRlbXMiLCJyZW5kZXJWaWV3IiwiQ1VTVE9NIiwibnVtYmVyT2ZQYWdlcyIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwiYmFzZUdldFRhZyIsInVuZGVmaW5lZFRhZyIsIm51bGxUYWciLCJzeW1Ub1N0cmluZ1RhZyIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwidG9TdHJpbmdUYWciLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJnbG9iYWwiLCJmcmVlR2xvYmFsIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJpc093biIsInRhZyIsInVubWFza2VkIiwicmVzdWx0IiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RQcm90byIsInRvU3RyaW5nIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsImZyZWVTZWxmIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzSW50ZWdlci5qcyIsImlzSW50ZWdlciIsInRvSW50ZWdlciIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsImlzT2JqZWN0IiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsImlzT2JqZWN0TGlrZSIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsImlzU3ltYm9sIiwic3ltYm9sVGFnIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvRmluaXRlLmpzIiwidG9GaW5pdGUiLCJ0b051bWJlciIsIklORklOSVRZIiwiTUFYX0lOVEVHRVIiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9JbnRlZ2VyLmpzIiwicmVtYWluZGVyIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwiTkFOIiwib3RoZXIiLCJ2YWx1ZU9mIiwicmVUcmltIiwiaXNCaW5hcnkiLCJyZUlzQmluYXJ5IiwidGVzdCIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInJlSXNCYWRIZXgiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3BvdmVyL2luZGV4LmpzIiwiZ2V0T3Bwb3NpdGVDYXJkaW5hbCIsImRpcmVjdGlvbiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfZGlhbG9nX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3BvcnRhbF9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X2JvdW5kbGVzc191dGlsc190cmFuc2Zvcm1fcHJvcGVydHlfXyIsIkNMQVNTX1JFTU9WQUxfUkVHRVgiLCJERUZBVUxUX0NBUkVUX0NPTVBPTkVOVCIsInZpZXdCb3giLCJ4bWxucyIsImZpbGwiLCJwb2ludHMiLCJjb21iaW5hdGlvbnMiLCJheCIsImF5IiwiZHgiLCJkeSIsIlBvcG92ZXIiLCJhbGlnbiIsImFuY2hvciIsImNhcmV0QW5jaG9yIiwiY2FjaGVWaWV3cG9ydENhcnRvZ3JhcGh5IiwicHJlc2V0IiwiZ2V0VmFsaWRBbGlnbm1lbnRQcmVzZXQiLCJmcmFnIiwiZ2V0QWxpZ25tZW50Q2xhc3NGcmFnbWVudCIsImRpYWxvZyIsInJvdW5kIiwiZ2V0TmV4dERpYWxvZ1hQb3NpdGlvbiIsImdldE5leHREaWFsb2dZUG9zaXRpb24iLCJjYXJkaW5hbCIsImxvbmdpdHVkaW5hbCIsIiRjYXJldCIsImdldE5leHRDYXJldFhQb3NpdGlvbiIsImJvZHlSZWN0IiwiYm9keSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFuY2hvclJlY3QiLCJjYXJldEFuY2hvclJlY3QiLCJib2R5TGVmdCIsImxlZnQiLCJib2R5VG9wIiwidG9wIiwiX3JlZjIiLCJjYXJldCIsIm5leHRYIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJfcmVmMyIsIl9yZWY0IiwibmV4dFkiLCJfcmVmNSIsInBIZWlnaHQiLCJwV2lkdGgiLCJib3R0b20iLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJyaWdodCIsInZhbGlkQ29tYm9zIiwiY29uZmlnIiwiaXNQb3NpdGlvblZhbGlkIiwiYXV0b1JlcG9zaXRpb24iLCJiZXN0Q29tYm9zIiwiX3JlZjYiLCJvcHBvc2l0ZUNhcmRpbmFsIiwib2theUNvbWJvcyIsIl9yZWY3IiwiY2FyZXRDb21wb25lbnQiLCJjb25zdGFudCIsImRlZiIsIk5OVyIsIk4iLCJOTkUiLCJFTkUiLCJFIiwiRVNFIiwiU1NFIiwiUyIsIlNTVyIsIldTVyIsIlciLCJXTlciLCJhcnIxIiwiYXJyMiIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcnRhbC9pbmRleC5qcyIsIlBvcnRhbCIsIl9Db21wb25lbnQiLCIkcG9ydGFsIiwiJHBhc3NlbmdlciIsImRlc3RpbmF0aW9uIiwiYXBwZW5kQ2hpbGQiLCJyZW5kZXJQb3J0YWxsZWRDb250ZW50IiwicG9ydGFsSWQiLCJyZW1vdmVDaGlsZCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzL2luZGV4LmpzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19idXR0b25fXyIsIlByb2dyZXNzIiwib25DYW5jZWwiLCJjYW5jZWxQcm9wcyIsImNhbmNlbENvbXBvbmVudCIsInByb2dyZXNzQ29tcG9uZW50IiwicHJvZ3Jlc3NQcm9wcyIsImItcHJvZ3Jlc3MtaW5kZXRlcm1pbmF0ZSIsInByb2dyZXNzIiwidHdlZW5Qcm9wZXJ0eSIsImRhdGEtcHJvZ3Jlc3MiLCJyZW5kZXJQcm9ncmVzcyIsInJlbmRlckNhbmNlbCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzaXZlLWRpc2Nsb3N1cmUvaW5kZXguanMiLCJQcm9ncmVzc2l2ZURpc2Nsb3N1cmUiLCJleHBhbmRlZCIsInRvZ2dsZVByb3BzIiwibmV3UHJvcHMiLCJiLWRpc2Nsb3N1cmUtZXhwYW5kZWQiLCJ0b2dnbGVDb21wb25lbnQiLCJ0b2dnbGVFeHBhbmRlZENvbnRlbnQiLCJ0b2dnbGVDb250ZW50IiwicmVuZGVyQ29udGVudCIsIm9uRXhwYW5kIiwib25IaWRlIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcmFkaW8vaW5kZXguanMiLCJSYWRpbyIsInV1aWQiLCJvblNlbGVjdGVkIiwiYi1yYWRpby1zZWxlY3RlZCIsInNlbGVjdGVkIiwibGFiZWxDb250ZW50IiwiLi9wYWNrYWdlcy9ib3VuZGxlc3Mtc2VnbWVudGVkLWNvbnRyb2wvaW5kZXguanMiLCJmaW5kSW5kZXgiLCJhcnIiLCJmb3VuZCIsImxlbiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfYnV0dG9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fIiwiU2VnbWVudGVkQ29udHJvbCIsInNlbGVjdGVkSW5kZXgiLCJoYW5kbGVPcHRpb25TZWxlY3Rpb24iLCJwYXJlbnRFbGVtZW50IiwiZ2V0U2VsZWN0ZWRPcHRpb24iLCJnZXRTZWxlY3RlZE9wdGlvbkluZGV4Iiwic2VsZWN0T3B0aW9uIiwic2VsZWN0T3B0aW9uQnlLZXkiLCJrIiwidiIsInNlbGVjdE9wdGlvbkluZGV4IiwiaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4IiwiZGVmYXVsdE9wdGlvblNlbGVjdGVkSW5kZXgiLCJvcHRpb25Db21wb25lbnQiLCJiLXNlZ21lbnRlZC1jb250cm9sLW9wdGlvbi1zZWxlY3RlZCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXRva2VuaXplZC1pbnB1dC9pbmRleC5qcyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdHlwZWFoZWFkX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fXyIsImZpcnN0IiwibGFzdCIsIlRva2VuaXplZElucHV0IiwidHlwZWFoZWFkIiwiZ2V0SW5wdXROb2RlIiwiZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0Iiwic2VsZWN0Iiwic2V0VmFsdWUiLCJhZGQiLCJ0b2tlbnMiLCJoYW5kbGVBZGRUb2tlbiIsImhhbmRsZUlucHV0Q2xpY2siLCJjbGVhclNlbGVjdGlvbiIsImhhbmRsZUlucHV0Rm9jdXMiLCJ3aGljaCIsInNlbGVjdFByZXZpb3VzVG9rZW4iLCJzaGlmdEtleSIsInNlbGVjdE5leHRUb2tlbiIsInRva2Vuc1NlbGVjdGVkIiwicmVtb3ZlIiwibWV0YUtleSIsIl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbiIsImhhbmRsZU5ld1NlbGVjdGlvbiIsInByZXZpb3VzU2VsZWN0ZWRJbmRleGVzIiwiY3VycmVudFNlbGVjdGVkSW5kZXhlcyIsImluZGV4ZXMiLCJpZHgiLCJoYW5kbGVSZW1vdmVUb2tlbnMiLCJhcHBlbmQiLCJzZWxlY3RUb2tlbiIsInByZXZpb3VzVG9rZW4iLCJzZWxlY3RUb2tlbnMiLCJuZXh0VG9rZW4iLCJzdG9wUHJvcGFnYXRpb24iLCJ0b2tlbkNsb3NlQ29tcG9uZW50IiwidG9rZW5DbG9zZVZpc2libGUiLCJoYW5kbGVUb2tlbkNsb3NlQ2xpY2siLCJiLXRva2VuZmllbGQtdG9rZW4tc2VsZWN0ZWQiLCJoYW5kbGVUb2tlbktleURvd24iLCJlbnRpdGllcyIsInRleHQiLCJyZW5kZXJUb2tlbkNsb3NlIiwicmVuZGVyVG9rZW5zIiwiY2xlYXJPblNlbGVjdGlvbiIsIm9uRW50aXR5U2VsZWN0ZWQiLCIuL3BhY2thZ2VzL2JvdW5kbGVzcy10eXBlYWhlYWQvaW5kZXguanMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfZXNjYXBlX3N0cmluZ19yZWdleHBfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19lc2NhcGVfc3RyaW5nX3JlZ2V4cF9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX2lucHV0X18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyIsImlzU3RyaW5nIiwiVHlwZWFoZWFkIiwiX2luaXRpYWxpc2VQcm9wcyIsImNvbXB1dGVNYXRjaGVzIiwic2VsZWN0ZWRFbnRpdHlJbmRleCIsIm9uRW50aXR5SGlnaGxpZ2h0ZWQiLCJ1cGRhdGVJbnB1dFN0YXRlIiwiZW50aXR5TWF0Y2hJbmRleGVzIiwibWF0Y2hlcyIsInNjcm9sbFRvcCIsInNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5IiwidG90YWxNYXRjaGVzIiwibWF0Y2hJbmRleCIsIm1hdGNoZXNOb2RlIiwibWF0Y2hlc05vZGVZRW5kIiwibWF0Y2hOb2RlIiwibWF0Y2hOb2RlWVN0YXJ0Iiwib2Zmc2V0VG9wIiwibWF0Y2hOb2RlWUVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZW50aXR5IiwiZW50aXR5Q29udGVudCIsImZyYWdzIiwiUmVnRXhwIiwibm9ybWFsaXplZFVzZXJUZXh0IiwidG9Mb3dlckNhc2UiLCJ0aHJlc2hvbGQiLCJzZWVrVmFsdWUiLCJpbmRleFN0YXJ0IiwiaW5kZXhFbmQiLCJhbGdvcml0aG0iLCJTVEFSVFNfV0lUSCIsIm1hcmtTdGFydHNXaXRoTWF0Y2hTdWJzdHJpbmciLCJtYXJrRnV6enlNYXRjaFN1YnN0cmluZyIsIm1hcmtlciIsIndhcm5lZE1hcmtlciIsImNvbnNvbGUiLCJ3YXJuIiwidXNlclRleHQiLCJub3JtYWxpemVkIiwicmVzdWx0cyIsImdldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXMiLCJnZXRGdXp6eU1hdGNoSW5kZXhlcyIsIm1hdGNoZXIiLCJ3YXJuZWRNYXRjaGVyIiwicHJvdmlkZWRFbnRpdGllcyIsImN1cnJlbnRWYWx1ZSIsImdldE1hdGNoSW5kZXhlcyIsIm9mZnNjcmVlbkNsYXNzIiwiYXJpYS1saXZlIiwiaGludCIsInJhdyIsInByb2Nlc3NlZCIsImhpbnRQcm9wcyIsIm1hdGNoV3JhcHBlclByb3BzIiwicmVzdCIsImItdHlwZWFoZWFkLW1hdGNoLXNlbGVjdGVkIiwiaGFuZGxlTWF0Y2hDbGljayIsIm1hcmtNYXRjaFN1YnN0cmluZyIsInJlbmRlck5vdGlmaWNhdGlvbiIsInJlbmRlckhpbnQiLCJhcmlhLWNvbnRyb2xzIiwicmVuZGVyTWF0Y2hlcyIsIkZVWlpZIiwib25Db21wbGV0ZSIsIl90aGlzNCIsInJlc2V0TWF0Y2hlcyIsImdldE1hcmtpbmdGdW5jdGlvbiIsImdldE1hdGNoaW5nRnVuY3Rpb24iLCJjdXJzb3JBdEVuZE9mSW5wdXQiLCJzZWxlY3RNYXRjaCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9ub2RlX21vZHVsZXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanMiLCJtYXRjaE9wZXJhdG9yc1JlIiwic3RyIiwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbi9pbmRleC5qcyIsImdldEludGVyc2VjdGlvbiIsIm9iajEiLCJvYmoyIiwiY2hpbGRQcm9wcyIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qcyIsIm9taXRLZXlzRnJvbVNvdXJjZU9iamVjdCIsIm9taXR0ZWRLZXlzIiwiaGFzaCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eS9pbmRleC5qcyIsImRvY3VtZW50RWxlbWVudCIsIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanMiLCJyYW5kb20iLCIwIiwiMSJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsS0FBQUMsU0FDQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFDQUEsT0FBQUQsUUFBQUQsUUFBQUcsUUFBQSxTQUFBQSxRQUFBLGNBQ0Esa0JBQUFDLGdCQUFBQyxJQUNBRCxRQUFBLHFCQUFBSixTQUNBLGdCQUFBQyxTQUNBQSxRQUFBLFVBQUFELFFBQUFHLFlBQUFHLElBQUFILFlBQUFHLEtBRUFQLEtBQUEsVUFBQUMsUUFBQUQsS0FBQSxNQUFBQSxLQUFBLFdBQ0NRLEtBQUEsU0FBQUMsOEJBQUFDLCtCQUNELE1DQWdCLFVBQVVDLFNDTjFCLFFBQUFDLHFCQUFBQyxVQUdBLEdBQUFDLGlCQUFBRCxVQUNBLE1BQUFDLGtCQUFBRCxVQUFBWCxPQUdBLElBQUFDLFFBQUFXLGlCQUFBRCxXQUNBRSxFQUFBRixTQUNBRyxHQUFBLEVBQ0FkLFdBVUEsT0FOQVMsU0FBQUUsVUFBQUksS0FBQWQsT0FBQUQsUUFBQUMsY0FBQUQsUUFBQVUscUJBR0FULE9BQUFhLEdBQUEsRUFHQWIsT0FBQUQsUUF2QkEsR0FBQVksb0JBK0RBLE9BbkNBRixxQkFBQU0sRUFBQVAsUUFHQUMsb0JBQUFPLEVBQUFMLGlCQUdBRixvQkFBQUcsRUFBQSxTQUFBSyxPQUEyQyxNQUFBQSxRQUczQ1Isb0JBQUFT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LHFCQUU3QyxZNkN6bkJBMkIscUJBQUEsRUFBZSxXQVVYLElBQUssR0FUQ3FFLFFBQ0YsWUFDQSxrQkFDQSxlQUNBLGFBQ0EsY0FDQSxvQkFHSzdGLEVBQUksRUFBR3FzQixJQUFNeG1CLE1BQU10QyxPQUFRdkQsRUFBSXFzQixJQUFLcnNCLElBQ3pDLEdBQUk2RixNQUFNN0YsSUFBTStNLFVBQVNvcEIsZ0JBQWdCcGUsTUFDckMsTUFBT2xTLE9BQU03RixFQUlyQixRQUFPLE03QzhtQkxvMkIsMkNBQ0EsU0FBVWgzQixPQUFRb0Msb0JBQXFCM0IscUJBRTdDLFk4QzluQmUsU0FBUytyQixRQUVwQixNQUFPLE9BQVMsTUFBTSxLQUFLLEtBQUssS0FBSyxNQUFNcG1CLFFBQVEsU0FBUyxTQUFBVCxHQUFBLE9BQUlBLEVBQWdCLEdBQWQwUyxLQUFLNGUsVUFBYXR4QixFQUFFLEdBQUdtZCxTQUFTLE05QzZuQnJFMWdCLG9CQUF1QixFQUFJb3FCLE1BS3REMEssRUFDQSxTQUFVbDNCLE9BQVFELFMrQ3hvQnhCQyxPQUFBRCxRQUFBTywrQi9DOG9CTTYyQixFQUNBLFNBQVVuM0IsT0FBUUQsU2dEL29CeEJDLE9BQUFELFFBQUFRIiwiZmlsZSI6ImJvdW5kbGVzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCIsIFwicmVhY3QtZG9tXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkJvdW5kbGVzc1wiXSA9IGZhY3RvcnkocmVxdWlyZSh1bmRlZmluZWQpLCByZXF1aXJlKHVuZGVmaW5lZCkpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkJvdW5kbGVzc1wiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdLCByb290W1wiUmVhY3RET01cIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpLCByZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJlYWN0XCIsIFwicmVhY3QtZG9tXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkJvdW5kbGVzc1wiXSA9IGZhY3RvcnkocmVxdWlyZSh1bmRlZmluZWQpLCByZXF1aXJlKHVuZGVmaW5lZCkpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkJvdW5kbGVzc1wiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdLCByb290W1wiUmVhY3RET01cIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL2V4cG9ydHMuanNcIik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIFwiLi9leHBvcnRzLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fcGFja2FnZXNfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb24vaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJBcnJvd0tleU5hdmlnYXRpb25cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3BhY2thZ2VzX2JvdW5kbGVzc19hcnJvd19rZXlfbmF2aWdhdGlvbl9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19wYWNrYWdlc19ib3VuZGxlc3NfYXN5bmNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1hc3luYy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkFzeW5jXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19wYWNrYWdlc19ib3VuZGxlc3NfYXN5bmNfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fcGFja2FnZXNfYm91bmRsZXNzX2J1dHRvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWJ1dHRvbi9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkJ1dHRvblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fcGFja2FnZXNfYm91bmRsZXNzX2J1dHRvbl9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19wYWNrYWdlc19ib3VuZGxlc3NfY2hlY2tib3hfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1jaGVja2JveC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkNoZWNrYm94XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19wYWNrYWdlc19ib3VuZGxlc3NfY2hlY2tib3hfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fcGFja2FnZXNfYm91bmRsZXNzX2NoZWNrYm94X2dyb3VwX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gtZ3JvdXAvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDaGVja2JveEdyb3VwXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19wYWNrYWdlc19ib3VuZGxlc3NfY2hlY2tib3hfZ3JvdXBfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fcGFja2FnZXNfYm91bmRsZXNzX2RpYWxvZ19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkRpYWxvZ1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fcGFja2FnZXNfYm91bmRsZXNzX2RpYWxvZ19fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19wYWNrYWdlc19ib3VuZGxlc3NfZml0dGVkX3RleHRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1maXR0ZWQtdGV4dC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkZpdHRlZFRleHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX3BhY2thZ2VzX2JvdW5kbGVzc19maXR0ZWRfdGV4dF9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19wYWNrYWdlc19ib3VuZGxlc3NfaW1hZ2VfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1pbWFnZS9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkltYWdlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19wYWNrYWdlc19ib3VuZGxlc3NfaW1hZ2VfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fcGFja2FnZXNfYm91bmRsZXNzX2lucHV0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtaW5wdXQvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJJbnB1dFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fcGFja2FnZXNfYm91bmRsZXNzX2lucHV0X19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX3BhY2thZ2VzX2JvdW5kbGVzc19tb2RhbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLW1vZGFsL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTW9kYWxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX3BhY2thZ2VzX2JvdW5kbGVzc19tb2RhbF9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fcGFja2FnZXNfYm91bmRsZXNzX3BhZ2luYXRpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUGFnaW5hdGlvblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX3BhY2thZ2VzX2JvdW5kbGVzc19wYWdpbmF0aW9uX19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX19wYWNrYWdlc19ib3VuZGxlc3NfcG9wb3Zlcl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcG92ZXIvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQb3BvdmVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fcGFja2FnZXNfYm91bmRsZXNzX3BvcG92ZXJfX1tcImFcIl07IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfX3BhY2thZ2VzX2JvdW5kbGVzc19wb3J0YWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3J0YWwvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQb3J0YWxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX19wYWNrYWdlc19ib3VuZGxlc3NfcG9ydGFsX19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX19wYWNrYWdlc19ib3VuZGxlc3NfcHJvZ3Jlc3NpdmVfZGlzY2xvc3VyZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzaXZlLWRpc2Nsb3N1cmUvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcm9ncmVzc2l2ZURpc2Nsb3N1cmVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX19wYWNrYWdlc19ib3VuZGxlc3NfcHJvZ3Jlc3NpdmVfZGlzY2xvc3VyZV9fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fcGFja2FnZXNfYm91bmRsZXNzX3Byb2dyZXNzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcHJvZ3Jlc3MvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcm9ncmVzc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfX3BhY2thZ2VzX2JvdW5kbGVzc19wcm9ncmVzc19fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fcGFja2FnZXNfYm91bmRsZXNzX3JhZGlvX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcmFkaW8vaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJSYWRpb1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfX3BhY2thZ2VzX2JvdW5kbGVzc19yYWRpb19fW1wiYVwiXTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fcGFja2FnZXNfYm91bmRsZXNzX3NlZ21lbnRlZF9jb250cm9sX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3Mtc2VnbWVudGVkLWNvbnRyb2wvaW5kZXguanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTZWdtZW50ZWRDb250cm9sXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fcGFja2FnZXNfYm91bmRsZXNzX3NlZ21lbnRlZF9jb250cm9sX19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X19wYWNrYWdlc19ib3VuZGxlc3NfdG9rZW5pemVkX2lucHV0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdG9rZW5pemVkLWlucHV0L2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVG9rZW5pemVkSW5wdXRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X19wYWNrYWdlc19ib3VuZGxlc3NfdG9rZW5pemVkX2lucHV0X19bXCJhXCJdOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE4X19wYWNrYWdlc19ib3VuZGxlc3NfdHlwZWFoZWFkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdHlwZWFoZWFkL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVHlwZWFoZWFkXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9fcGFja2FnZXNfYm91bmRsZXNzX3R5cGVhaGVhZF9fW1wiYVwiXTsgfSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187dmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9OyhmdW5jdGlvbigpeyd1c2Ugc3RyaWN0Jzt2YXIgaGFzT3duPXt9Lmhhc093blByb3BlcnR5O2Z1bmN0aW9uIGNsYXNzTmFtZXMoKXt2YXIgY2xhc3Nlcz1bXTtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgYXJnPWFyZ3VtZW50c1tpXTtpZighYXJnKWNvbnRpbnVlO3ZhciBhcmdUeXBlPXR5cGVvZiBhcmc9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKGFyZyk7aWYoYXJnVHlwZT09PSdzdHJpbmcnfHxhcmdUeXBlPT09J251bWJlcicpe2NsYXNzZXMucHVzaChhcmcpO31lbHNlIGlmKEFycmF5LmlzQXJyYXkoYXJnKSl7Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCxhcmcpKTt9ZWxzZSBpZihhcmdUeXBlPT09J29iamVjdCcpe2Zvcih2YXIga2V5IGluIGFyZyl7aWYoaGFzT3duLmNhbGwoYXJnLGtleSkmJmFyZ1trZXldKXtjbGFzc2VzLnB1c2goa2V5KTt9fX19cmV0dXJuIGNsYXNzZXMuam9pbignICcpO31pZih0eXBlb2YgbW9kdWxlIT09J3VuZGVmaW5lZCcmJm1vZHVsZS5leHBvcnRzKXttb2R1bGUuZXhwb3J0cz1jbGFzc05hbWVzO31lbHNlIGlmKFwiZnVuY3Rpb25cIj09PSdmdW5jdGlvbicmJl90eXBlb2YoX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1wiKSk9PT0nb2JqZWN0JyYmX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1wiKSl7IShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW10sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24oKXtyZXR1cm4gY2xhc3NOYW1lczt9LmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7fWVsc2V7d2luZG93LmNsYXNzTmFtZXM9Y2xhc3NOYW1lczt9fSkoKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZyl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGFyZzt9O312YXIgZW1wdHlGdW5jdGlvbj1mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCl7fTtlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zPW1ha2VFbXB0eUZ1bmN0aW9uO2VtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZT1tYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU9bWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGw9bWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9O2VtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudD1mdW5jdGlvbihhcmcpe3JldHVybiBhcmc7fTttb2R1bGUuZXhwb3J0cz1lbXB0eUZ1bmN0aW9uO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdmFsaWRhdGVGb3JtYXQ9ZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KXt9O2lmKGZhbHNlKXt2YWxpZGF0ZUZvcm1hdD1mdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpe2lmKGZvcm1hdD09PXVuZGVmaW5lZCl7dGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO319O31mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLGZvcm1hdCxhLGIsYyxkLGUsZil7dmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtpZighY29uZGl0aW9uKXt2YXIgZXJyb3I7aWYoZm9ybWF0PT09dW5kZWZpbmVkKXtlcnJvcj1uZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcrJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7fWVsc2V7dmFyIGFyZ3M9W2EsYixjLGQsZSxmXTt2YXIgYXJnSW5kZXg9MDtlcnJvcj1uZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gYXJnc1thcmdJbmRleCsrXTt9KSk7ZXJyb3IubmFtZT0nSW52YXJpYW50IFZpb2xhdGlvbic7fWVycm9yLmZyYW1lc1RvUG9wPTE7dGhyb3cgZXJyb3I7fX1tb2R1bGUuZXhwb3J0cz1pbnZhcmlhbnQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xudmFyIGVtcHR5RnVuY3Rpb249X193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanNcIik7dmFyIGludmFyaWFudD1fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzXCIpO3ZhciBSZWFjdFByb3BUeXBlc1NlY3JldD1fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanNcIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBzaGltKHByb3BzLHByb3BOYW1lLGNvbXBvbmVudE5hbWUsbG9jYXRpb24scHJvcEZ1bGxOYW1lLHNlY3JldCl7aWYoc2VjcmV0PT09UmVhY3RQcm9wVHlwZXNTZWNyZXQpe3JldHVybjt9aW52YXJpYW50KGZhbHNlLCdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnKydVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnKydSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJyk7fTtzaGltLmlzUmVxdWlyZWQ9c2hpbTtmdW5jdGlvbiBnZXRTaGltKCl7cmV0dXJuIHNoaW07fTt2YXIgUmVhY3RQcm9wVHlwZXM9e2FycmF5OnNoaW0sYm9vbDpzaGltLGZ1bmM6c2hpbSxudW1iZXI6c2hpbSxvYmplY3Q6c2hpbSxzdHJpbmc6c2hpbSxzeW1ib2w6c2hpbSxhbnk6c2hpbSxhcnJheU9mOmdldFNoaW0sZWxlbWVudDpzaGltLGluc3RhbmNlT2Y6Z2V0U2hpbSxub2RlOnNoaW0sb2JqZWN0T2Y6Z2V0U2hpbSxvbmVPZjpnZXRTaGltLG9uZU9mVHlwZTpnZXRTaGltLHNoYXBlOmdldFNoaW19O1JlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzPWVtcHR5RnVuY3Rpb247UmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzPVJlYWN0UHJvcFR5cGVzO3JldHVybiBSZWFjdFByb3BUeXBlczt9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtpZihmYWxzZSl7dmFyIFJFQUNUX0VMRU1FTlRfVFlQRT10eXBlb2YgU3ltYm9sPT09J2Z1bmN0aW9uJyYmU3ltYm9sLmZvciYmU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpfHwweGVhYzc7dmFyIGlzVmFsaWRFbGVtZW50PWZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KG9iamVjdCl7cmV0dXJuKHR5cGVvZiBvYmplY3Q9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKG9iamVjdCkpPT09J29iamVjdCcmJm9iamVjdCE9PW51bGwmJm9iamVjdC4kJHR5cGVvZj09PVJFQUNUX0VMRU1FTlRfVFlQRTt9O3ZhciB0aHJvd09uRGlyZWN0QWNjZXNzPXRydWU7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LHRocm93T25EaXJlY3RBY2Nlc3MpO31lbHNle21vZHVsZS5leHBvcnRzPV9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qc1wiKSgpO31cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQ9J1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJzttb2R1bGUuZXhwb3J0cz1SZWFjdFByb3BUeXBlc1NlY3JldDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2FtZC1vcHRpb25zLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihfX3dlYnBhY2tfYW1kX29wdGlvbnNfXykgey8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywge30pKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTt2YXIgZztnPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM7fSgpO3RyeXtnPWd8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKXx8KDEsZXZhbCkoXCJ0aGlzXCIpO31jYXRjaChlKXtpZigodHlwZW9mIHdpbmRvdz09PVwidW5kZWZpbmVkXCI/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKHdpbmRvdykpPT09XCJvYmplY3RcIilnPXdpbmRvdzt9bW9kdWxlLmV4cG9ydHM9ZztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb24vaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX3JlYWN0X2RvbV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXV1aWQvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaixrZXksdmFsdWUpe2lmKGtleSBpbiBvYmope09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHt2YWx1ZTp2YWx1ZSxlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsd3JpdGFibGU6dHJ1ZX0pO31lbHNle29ialtrZXldPXZhbHVlO31yZXR1cm4gb2JqO31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIERBVEFfQVRUUklCVVRFX0lOREVYPSdkYXRhLWZvY3VzLWluZGV4Jzt2YXIgREFUQV9BVFRSSUJVVEVfU0tJUD0nZGF0YS1mb2N1cy1za2lwJzt2YXIgQXJyb3dLZXlOYXZpZ2F0aW9uPWZ1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoQXJyb3dLZXlOYXZpZ2F0aW9uLF9QdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBBcnJvd0tleU5hdmlnYXRpb24oKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxBcnJvd0tleU5hdmlnYXRpb24pO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9QXJyb3dLZXlOYXZpZ2F0aW9uLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKEFycm93S2V5TmF2aWdhdGlvbikpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLnN0YXRlPXthY3RpdmVDaGlsZEluZGV4Ol90aGlzLnByb3BzLmRlZmF1bHRBY3RpdmVDaGlsZEluZGV4LGNoaWxkcmVuOltdfSxfdGhpcy5oYW5kbGVLZXlEb3duPWZ1bmN0aW9uKGV2ZW50KXtzd2l0Y2goZXZlbnQua2V5KXtjYXNlJ0Fycm93VXAnOmlmKF90aGlzLnByb3BzLm1vZGU9PT1BcnJvd0tleU5hdmlnYXRpb24ubW9kZS5WRVJUSUNBTHx8X3RoaXMucHJvcHMubW9kZT09PUFycm93S2V5TmF2aWdhdGlvbi5tb2RlLkJPVEgpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7X3RoaXMubW92ZUZvY3VzKC0xKTt9YnJlYWs7Y2FzZSdBcnJvd0xlZnQnOmlmKF90aGlzLnByb3BzLm1vZGU9PT1BcnJvd0tleU5hdmlnYXRpb24ubW9kZS5IT1JJWk9OVEFMfHxfdGhpcy5wcm9wcy5tb2RlPT09QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCl7ZXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpcy5tb3ZlRm9jdXMoLTEpO31icmVhaztjYXNlJ0Fycm93RG93bic6aWYoX3RoaXMucHJvcHMubW9kZT09PUFycm93S2V5TmF2aWdhdGlvbi5tb2RlLlZFUlRJQ0FMfHxfdGhpcy5wcm9wcy5tb2RlPT09QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCl7ZXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpcy5tb3ZlRm9jdXMoMSk7fWJyZWFrO2Nhc2UnQXJyb3dSaWdodCc6aWYoX3RoaXMucHJvcHMubW9kZT09PUFycm93S2V5TmF2aWdhdGlvbi5tb2RlLkhPUklaT05UQUx8fF90aGlzLnByb3BzLm1vZGU9PT1BcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIKXtldmVudC5wcmV2ZW50RGVmYXVsdCgpO190aGlzLm1vdmVGb2N1cygxKTt9YnJlYWs7fWlmKF90aGlzLnByb3BzLm9uS2V5RG93bil7X3RoaXMucHJvcHMub25LZXlEb3duKGV2ZW50KTt9fSxfdGhpcy5oYW5kbGVGb2N1cz1mdW5jdGlvbihldmVudCl7aWYoZXZlbnQudGFyZ2V0Lmhhc0F0dHJpYnV0ZShEQVRBX0FUVFJJQlVURV9JTkRFWCkpe3ZhciBpbmRleD1wYXJzZUludChldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKERBVEFfQVRUUklCVVRFX0lOREVYKSwxMCk7dmFyIGNoaWxkPV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiQ2hpbGRyZW5cIl0udG9BcnJheShfdGhpcy5zdGF0ZS5jaGlsZHJlbilbaW5kZXhdO190aGlzLnNldFN0YXRlKHthY3RpdmVDaGlsZEluZGV4OmluZGV4fSk7aWYoY2hpbGQucHJvcHMub25Gb2N1cyl7Y2hpbGQucHJvcHMub25Gb2N1cyhldmVudCk7fX19LF90aGlzLnBlcnNpc3RXcmFwcGVyRWxlbWVudFJlZmVyZW5jZT1mdW5jdGlvbih1bmtub3duVHlwZSl7X3RoaXMuJHdyYXBwZXI9dW5rbm93blR5cGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudD91bmtub3duVHlwZTpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX3JlYWN0X2RvbV9fW1wiZmluZERPTU5vZGVcIl0pKHVua25vd25UeXBlKTt9LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKEFycm93S2V5TmF2aWdhdGlvbixbe2tleTonZ2V0RmlsdGVyZWRDaGlsZHJlbicsdmFsdWU6ZnVuY3Rpb24gZ2V0RmlsdGVyZWRDaGlsZHJlbigpe3ZhciBwcm9wcz1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06dGhpcy5wcm9wcztyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJDaGlsZHJlblwiXS50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5maWx0ZXIoQm9vbGVhbik7fX0se2tleTonc2V0QWN0aXZlQ2hpbGRJbmRleCcsdmFsdWU6ZnVuY3Rpb24gc2V0QWN0aXZlQ2hpbGRJbmRleCgpe2lmKHRoaXMuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleCE9PTApe3ZhciBudW1DaGlsZHJlbj1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIkNoaWxkcmVuXCJdLmNvdW50KHRoaXMuc3RhdGUuY2hpbGRyZW4pO2lmKG51bUNoaWxkcmVuPT09MCl7dGhpcy5zZXRTdGF0ZSh7YWN0aXZlQ2hpbGRJbmRleDowfSk7fWVsc2UgaWYodGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4Pj1udW1DaGlsZHJlbil7dGhpcy5zZXRTdGF0ZSh7YWN0aXZlQ2hpbGRJbmRleDpudW1DaGlsZHJlbi0xfSk7fX19fSx7a2V5Oidjb21wb25lbnRXaWxsTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpe3RoaXMuc2V0U3RhdGUoe2NoaWxkcmVuOnRoaXMuZ2V0RmlsdGVyZWRDaGlsZHJlbigpfSk7fX0se2tleTonY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpe2lmKG5leHRQcm9wcy5jaGlsZHJlbiE9PXRoaXMucHJvcHMuY2hpbGRyZW4pe3JldHVybiB0aGlzLnNldFN0YXRlKHtjaGlsZHJlbjp0aGlzLmdldEZpbHRlcmVkQ2hpbGRyZW4obmV4dFByb3BzKX0sdGhpcy5zZXRBY3RpdmVDaGlsZEluZGV4KTt9dGhpcy5zZXRBY3RpdmVDaGlsZEluZGV4KCk7fX0se2tleTonY29tcG9uZW50RGlkVXBkYXRlJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLHByZXZTdGF0ZSl7aWYodGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4IT09cHJldlN0YXRlLmFjdGl2ZUNoaWxkSW5kZXgpe3RoaXMuc2V0Rm9jdXModGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4KTt9fX0se2tleTonc2V0Rm9jdXMnLHZhbHVlOmZ1bmN0aW9uIHNldEZvY3VzKGluZGV4KXt2YXIgY2hpbGROb2RlPXRoaXMuJHdyYXBwZXIuY2hpbGRyZW5baW5kZXhdO2lmKGNoaWxkTm9kZSYmY2hpbGROb2RlLmhhc0F0dHJpYnV0ZShEQVRBX0FUVFJJQlVURV9TS0lQKSl7dGhpcy5tb3ZlRm9jdXMoY2hpbGROb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpJk5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HPy0xOjEpO31lbHNlIGlmKGNoaWxkTm9kZSYmZG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWNoaWxkTm9kZSl7Y2hpbGROb2RlLmZvY3VzKCk7fX19LHtrZXk6J21vdmVGb2N1cycsdmFsdWU6ZnVuY3Rpb24gbW92ZUZvY3VzKGRlbHRhKXt2YXIgbnVtQ2hpbGRyZW49dGhpcy5zdGF0ZS5jaGlsZHJlbj9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIkNoaWxkcmVuXCJdLmNvdW50KHRoaXMuc3RhdGUuY2hpbGRyZW4pOjA7dmFyIG5leHRJbmRleD10aGlzLnN0YXRlLmFjdGl2ZUNoaWxkSW5kZXgrZGVsdGE7aWYobmV4dEluZGV4Pj1udW1DaGlsZHJlbil7bmV4dEluZGV4PTA7fWVsc2UgaWYobmV4dEluZGV4PDApe25leHRJbmRleD1udW1DaGlsZHJlbi0xO310aGlzLnNldFN0YXRlKHthY3RpdmVDaGlsZEluZGV4Om5leHRJbmRleH0pO319LHtrZXk6J3JlbmRlckNoaWxkcmVuJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJDaGlsZHJlbigpe3ZhciBfdGhpczI9dGhpcztyZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJDaGlsZHJlblwiXS5tYXAodGhpcy5zdGF0ZS5jaGlsZHJlbixmdW5jdGlvbihjaGlsZCxpbmRleCl7dmFyIF9jbG9uZUVsZW1lbnQ7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNsb25lRWxlbWVudFwiXSkoY2hpbGQsKF9jbG9uZUVsZW1lbnQ9e30sX2RlZmluZVByb3BlcnR5KF9jbG9uZUVsZW1lbnQsREFUQV9BVFRSSUJVVEVfSU5ERVgsaW5kZXgpLF9kZWZpbmVQcm9wZXJ0eShfY2xvbmVFbGVtZW50LERBVEFfQVRUUklCVVRFX1NLSVAscGFyc2VJbnQoY2hpbGQucHJvcHMudGFiSW5kZXgsMTApPT09LTF8fHVuZGVmaW5lZCksX2RlZmluZVByb3BlcnR5KF9jbG9uZUVsZW1lbnQsJ2tleScsY2hpbGQua2V5fHxpbmRleCksX2RlZmluZVByb3BlcnR5KF9jbG9uZUVsZW1lbnQsJ3RhYkluZGV4JyxfdGhpczIuc3RhdGUuYWN0aXZlQ2hpbGRJbmRleD09PWluZGV4PzA6LTEpLF9jbG9uZUVsZW1lbnQpKTt9KTt9fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSh0aGlzLnByb3BzLmNvbXBvbmVudCxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkodGhpcy5wcm9wcyxBcnJvd0tleU5hdmlnYXRpb24uaW50ZXJuYWxLZXlzKSx7cmVmOnRoaXMucGVyc2lzdFdyYXBwZXJFbGVtZW50UmVmZXJlbmNlLG9uRm9jdXM6dGhpcy5oYW5kbGVGb2N1cyxvbktleURvd246dGhpcy5oYW5kbGVLZXlEb3dufSksdGhpcy5yZW5kZXJDaGlsZHJlbigpKTt9fV0pO3JldHVybiBBcnJvd0tleU5hdmlnYXRpb247fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIlB1cmVDb21wb25lbnRcIl0pO0Fycm93S2V5TmF2aWdhdGlvbi5tb2RlPXtIT1JJWk9OVEFMOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxWRVJUSUNBTDpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksQk9USDpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCl9O0Fycm93S2V5TmF2aWdhdGlvbi5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnksY29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmNdKSxkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIsbW9kZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZihbQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCxBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5IT1JJWk9OVEFMLEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLlZFUlRJQ0FMXSl9O0Fycm93S2V5TmF2aWdhdGlvbi5kZWZhdWx0UHJvcHM9e2NvbXBvbmVudDonZGl2JyxkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleDowLG1vZGU6QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCxvbktleURvd246ZnVuY3Rpb24gb25LZXlEb3duKCl7fX07QXJyb3dLZXlOYXZpZ2F0aW9uLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhBcnJvd0tleU5hdmlnYXRpb24uZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKEFycm93S2V5TmF2aWdhdGlvbik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLWFzeW5jL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBnZXQ9ZnVuY3Rpb24gZ2V0KGJhc2UscGF0aCxmYWxsYmFjayl7cmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24oY3VycmVudCxmcmFnbWVudCl7cmV0dXJuIGN1cnJlbnRbZnJhZ21lbnRdfHxmYWxsYmFjazt9LGJhc2UpO307dmFyIEFzeW5jPWZ1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoQXN5bmMsX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIEFzeW5jKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsQXN5bmMpO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9QXN5bmMuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXN5bmMpKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfdGhpcy5tb3VudGVkPWZhbHNlLF90aGlzLnByb21pc2U9bnVsbCxfdGhpcy5zdGF0ZT17fSxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhBc3luYyxbe2tleTonaGFuZGxlUHJvbWlzZUZ1bGZpbGxtZW50Jyx2YWx1ZTpmdW5jdGlvbiBoYW5kbGVQcm9taXNlRnVsZmlsbG1lbnQoY29udGV4dCxwYXlsb2FkKXtpZighdGhpcy5tb3VudGVkKXtyZXR1cm47fXRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gcmVuZGVyUGF5bG9hZElmUHJvbWlzZU1hdGNoZXMoc3RhdGUpe2lmKHRoaXMucHJvbWlzZT09PWNvbnRleHQpe3RoaXMucHJvbWlzZT1udWxsO3JldHVybntjb21wb25lbnQ6cGF5bG9hZH07fXJldHVybiBzdGF0ZTt9LHRoaXMuZmlyZVJlbmRlckNhbGxiYWNrKTt9fSx7a2V5OidoYW5kbGVDaGlsZHJlbicsdmFsdWU6ZnVuY3Rpb24gaGFuZGxlQ2hpbGRyZW4oY2hpbGRyZW4pe3ZhciBjb250ZW50PWNoaWxkcmVuO2lmKF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImlzVmFsaWRFbGVtZW50XCJdKShjb250ZW50KSl7cmV0dXJuIHRoaXMuc2V0U3RhdGUoe2NvbXBvbmVudDpjb250ZW50fSx0aGlzLmZpcmVSZW5kZXJDYWxsYmFjayk7fWVsc2UgaWYodHlwZW9mIGNvbnRlbnQ9PT0nZnVuY3Rpb24nKXtyZXR1cm4gdGhpcy5oYW5kbGVDaGlsZHJlbihjb250ZW50KHRoaXMucHJvcHMpKTt9dmFyIGJvdW5kSGFuZGxlcj10aGlzLmhhbmRsZVByb21pc2VGdWxmaWxsbWVudC5iaW5kKHRoaXMsY29udGVudCk7dGhpcy5wcm9taXNlPWNvbnRlbnQ7dGhpcy5zZXRTdGF0ZSh7Y29tcG9uZW50Om51bGx9LGZ1bmN0aW9uKCl7cmV0dXJuIGNvbnRlbnQudGhlbihib3VuZEhhbmRsZXIsYm91bmRIYW5kbGVyKTt9KTt9fSx7a2V5OidmaXJlUmVuZGVyQ2FsbGJhY2snLHZhbHVlOmZ1bmN0aW9uIGZpcmVSZW5kZXJDYWxsYmFjaygpe2lmKHRoaXMuc3RhdGUuY29tcG9uZW50KXt0aGlzLnByb3BzLmNoaWxkcmVuRGlkUmVuZGVyKCk7fX19LHtrZXk6J2NvbXBvbmVudFdpbGxNb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCl7dGhpcy5oYW5kbGVDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKTt9fSx7a2V5Oidjb21wb25lbnREaWRNb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKXt0aGlzLm1vdW50ZWQ9dHJ1ZTt9fSx7a2V5Oidjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcyl7dGhpcy5oYW5kbGVDaGlsZHJlbihuZXh0UHJvcHMuY2hpbGRyZW4pO319LHtrZXk6J2NvbXBvbmVudFdpbGxVbm1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpe3RoaXMubW91bnRlZD1mYWxzZTt9fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3ZhciBwcm9wcz10aGlzLnByb3BzLHN0YXRlPXRoaXMuc3RhdGU7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNsb25lRWxlbWVudFwiXSkoc3RhdGUuY29tcG9uZW50fHxwcm9wcy5wZW5kaW5nQ29udGVudCxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkocHJvcHMsQXN5bmMuaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWFzeW5jJyxwcm9wcy5jbGFzc05hbWUsc3RhdGUuY29tcG9uZW50PT09bnVsbCYmZ2V0KHByb3BzLCdwZW5kaW5nQ29udGVudC5wcm9wcy5jbGFzc05hbWUnKSxzdGF0ZS5jb21wb25lbnQmJmdldChzdGF0ZSwnY29tcG9uZW50LnByb3BzLmNsYXNzTmFtZScsJycpLHsnYi1hc3luYy1wZW5kaW5nJzpzdGF0ZS5jb21wb25lbnQ9PT1udWxsfSl9KSk7fX1dKTtyZXR1cm4gQXN5bmM7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIlB1cmVDb21wb25lbnRcIl0pO0FzeW5jLnByb3BUeXBlcz17JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueSxjaGlsZHJlbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmMsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEubm9kZSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5pbnN0YW5jZU9mKFByb21pc2UpXSkuaXNSZXF1aXJlZCxjaGlsZHJlbkRpZFJlbmRlcjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLHBlbmRpbmdDb250ZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGV9O0FzeW5jLmRlZmF1bHRQcm9wcz17Y2hpbGRyZW46X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2RpdicsbnVsbCksY2hpbGRyZW5EaWRSZW5kZXI6ZnVuY3Rpb24gY2hpbGRyZW5EaWRSZW5kZXIoKXt9LHBlbmRpbmdDb250ZW50Ol9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLG51bGwpfTtBc3luYy5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoQXN5bmMuZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKEFzeW5jKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYnV0dG9uL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBCdXR0b249ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhCdXR0b24sX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIEJ1dHRvbigpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLEJ1dHRvbik7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1CdXR0b24uX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnV0dG9uKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuaGFuZGxlQ2xpY2s9ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzLnByb3BzLmRpc2FibGVkKXtyZXR1cm47fV90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO190aGlzLmZpcmVTdGF0ZWZ1bENhbGxiYWNrKGV2ZW50KTt9LF90aGlzLmhhbmRsZUtleURvd249ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzLnByb3BzLmRpc2FibGVkKXtyZXR1cm47fV90aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7c3dpdGNoKGV2ZW50LmtleSl7Y2FzZSdFbnRlcic6Y2FzZSdTcGFjZSc6ZXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpcy5maXJlU3RhdGVmdWxDYWxsYmFjayhldmVudCk7fX0sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoQnV0dG9uLFt7a2V5OidmaXJlU3RhdGVmdWxDYWxsYmFjaycsdmFsdWU6ZnVuY3Rpb24gZmlyZVN0YXRlZnVsQ2FsbGJhY2soZXZlbnQpe3RoaXMucHJvcHNbdGhpcy5wcm9wcy5wcmVzc2VkPydvblVucHJlc3NlZCc6J29uUHJlc3NlZCddKGV2ZW50KTt9fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSh0aGlzLnByb3BzLmNvbXBvbmVudCxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkodGhpcy5wcm9wcyxCdXR0b24uaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWJ1dHRvbicsdGhpcy5wcm9wcy5jbGFzc05hbWUseydiLWJ1dHRvbi1wcmVzc2FibGUnOnRoaXMucHJvcHMucHJlc3NlZCE9PXVuZGVmaW5lZCwnYi1idXR0b24tcHJlc3NlZCc6dGhpcy5wcm9wcy5wcmVzc2VkfSksJ2FyaWEtcHJlc3NlZCc6dGhpcy5wcm9wcy5wcmVzc2VkLHJvbGU6J2J1dHRvbicsb25LZXlEb3duOnRoaXMuaGFuZGxlS2V5RG93bixvbkNsaWNrOnRoaXMuaGFuZGxlQ2xpY2t9KSx0aGlzLnByb3BzLmNoaWxkcmVuKTt9fV0pO3JldHVybiBCdXR0b247fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIlB1cmVDb21wb25lbnRcIl0pO0J1dHRvbi5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnksY29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmNdKSxvblByZXNzZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxvblVucHJlc3NlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLHByZXNzZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbH07QnV0dG9uLmRlZmF1bHRQcm9wcz17Y29tcG9uZW50OididXR0b24nLG9uQ2xpY2s6ZnVuY3Rpb24gb25DbGljaygpe30sb25LZXlEb3duOmZ1bmN0aW9uIG9uS2V5RG93bigpe30sb25QcmVzc2VkOmZ1bmN0aW9uIG9uUHJlc3NlZCgpe30sb25VbnByZXNzZWQ6ZnVuY3Rpb24gb25VbnByZXNzZWQoKXt9LHByZXNzZWQ6dW5kZWZpbmVkfTtCdXR0b24uaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKEJ1dHRvbi5kZWZhdWx0UHJvcHMpOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoQnV0dG9uKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gtZ3JvdXAvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2NoZWNrYm94X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc191dWlkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtdXVpZC9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIG5vb3A9ZnVuY3Rpb24gbm9vcCgpe307dmFyIENoZWNrYm94R3JvdXA9ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhDaGVja2JveEdyb3VwLF9QdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBDaGVja2JveEdyb3VwKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsQ2hlY2tib3hHcm91cCk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1DaGVja2JveEdyb3VwLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKENoZWNrYm94R3JvdXApKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfdGhpcy5zZWxlY3RBbGxVVUlEPV9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhDaGVja2JveEdyb3VwLFt7a2V5OidhbGxJdGVtc0NoZWNrZWQnLHZhbHVlOmZ1bmN0aW9uIGFsbEl0ZW1zQ2hlY2tlZCgpe3JldHVybiB0aGlzLnByb3BzLml0ZW1zLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0pe3JldHVybiBpdGVtLmlucHV0UHJvcHMuY2hlY2tlZD09PXRydWU7fSk7fX0se2tleTonYW55SXRlbXNDaGVja2VkJyx2YWx1ZTpmdW5jdGlvbiBhbnlJdGVtc0NoZWNrZWQoKXtyZXR1cm4gdGhpcy5wcm9wcy5pdGVtcy5zb21lKGZ1bmN0aW9uKGl0ZW0pe3JldHVybiBpdGVtLmlucHV0UHJvcHMuY2hlY2tlZD09PXRydWU7fSk7fX0se2tleToncmVuZGVyU2VsZWN0QWxsQ2hlY2tib3gnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlclNlbGVjdEFsbENoZWNrYm94KCl7dmFyIGFsbENoZWNrZWQ9dGhpcy5hbGxJdGVtc0NoZWNrZWQoKTt2YXIgaW5wdXRQcm9wcz10aGlzLnByb3BzLnNlbGVjdEFsbFByb3BzLmlucHV0UHJvcHM7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfY2hlY2tib3hfX1tcImFcIiAvKiBkZWZhdWx0ICovXSxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLnNlbGVjdEFsbFByb3BzLHtrZXk6dGhpcy5zZWxlY3RBbGxVVUlELGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1jaGVja2JveC1ncm91cC1hbGwnLHRoaXMucHJvcHMuc2VsZWN0QWxsUHJvcHMuY2xhc3NOYW1lKSxpbnB1dFByb3BzOl9leHRlbmRzKHt9LGlucHV0UHJvcHMse2NoZWNrZWQ6YWxsQ2hlY2tlZCxpbmRldGVybWluYXRlOiFhbGxDaGVja2VkJiZ0aGlzLmFueUl0ZW1zQ2hlY2tlZCgpLG5hbWU6aW5wdXRQcm9wcyYmaW5wdXRQcm9wcy5uYW1lP2lucHV0UHJvcHMubmFtZTpudWxsfSksbGFiZWw6dGhpcy5wcm9wcy5zZWxlY3RBbGxQcm9wcy5sYWJlbHx8J1NlbGVjdCBBbGwnLG9uQ2hlY2tlZDp0aGlzLnByb3BzLm9uQWxsQ2hlY2tlZCxvblVuY2hlY2tlZDp0aGlzLnByb3BzLm9uQWxsVW5jaGVja2VkfSkpO319LHtrZXk6J3JlbmRlckNoZWNrYm94ZXMnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlckNoZWNrYm94ZXMoKXt2YXIgX3RoaXMyPXRoaXM7cmV0dXJuIHRoaXMucHJvcHMuaXRlbXMubWFwKGZ1bmN0aW9uKGl0ZW0pe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2NoZWNrYm94X19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30saXRlbSx7a2V5Oml0ZW0uaW5wdXRQcm9wcy5uYW1lLG9uQ2hlY2tlZDpfdGhpczIucHJvcHMub25DaGlsZENoZWNrZWQsb25VbmNoZWNrZWQ6X3RoaXMyLnByb3BzLm9uQ2hpbGRVbmNoZWNrZWR9KSk7fSk7fX0se2tleToncmVuZGVyQ2hpbGRyZW4nLHZhbHVlOmZ1bmN0aW9uIHJlbmRlckNoaWxkcmVuKCl7dmFyIGNoaWxkcmVuPVt0aGlzLnJlbmRlckNoZWNrYm94ZXMoKV07c3dpdGNoKHRoaXMucHJvcHMuc2VsZWN0QWxsKXtjYXNlIENoZWNrYm94R3JvdXAuc2VsZWN0QWxsLkJFRk9SRTpjaGlsZHJlbi51bnNoaWZ0KHRoaXMucmVuZGVyU2VsZWN0QWxsQ2hlY2tib3goKSk7YnJlYWs7Y2FzZSBDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5BRlRFUjpjaGlsZHJlbi5wdXNoKHRoaXMucmVuZGVyU2VsZWN0QWxsQ2hlY2tib3goKSk7YnJlYWs7fXJldHVybiBjaGlsZHJlbjt9fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSh0aGlzLnByb3BzLmNvbXBvbmVudCxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkodGhpcy5wcm9wcyxDaGVja2JveEdyb3VwLmludGVybmFsS2V5cykse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1jaGVja2JveC1ncm91cCcsdGhpcy5wcm9wcy5jbGFzc05hbWUpfSksdGhpcy5yZW5kZXJDaGlsZHJlbigpKTt9fV0pO3JldHVybiBDaGVja2JveEdyb3VwO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJQdXJlQ29tcG9uZW50XCJdKTtDaGVja2JveEdyb3VwLnNlbGVjdEFsbD17QkVGT1JFOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxBRlRFUjpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksTk9ORTpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCl9O0NoZWNrYm94R3JvdXAucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55LGNvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsaXRlbXM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYXJyYXlPZihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2NoZWNrYm94X19bXCJhXCIgLyogZGVmYXVsdCAqL10ucHJvcFR5cGVzLmlucHV0UHJvcHMpLmlzUmVxdWlyZWQsb25BbGxDaGVja2VkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmMsb25BbGxVbmNoZWNrZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxvbkNoaWxkQ2hlY2tlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLG9uQ2hpbGRVbmNoZWNrZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxzZWxlY3RBbGw6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2YoW0NoZWNrYm94R3JvdXAuc2VsZWN0QWxsLkJFRk9SRSxDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5BRlRFUixDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5OT05FXSksc2VsZWN0QWxsUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnksbGFiZWw6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLGlucHV0UHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub2JqZWN0fSl9O0NoZWNrYm94R3JvdXAuZGVmYXVsdFByb3BzPXtjb21wb25lbnQ6J2RpdicsaXRlbXM6W10sb25BbGxDaGVja2VkOm5vb3Asb25BbGxVbmNoZWNrZWQ6bm9vcCxvbkNoaWxkQ2hlY2tlZDpub29wLG9uQ2hpbGRVbmNoZWNrZWQ6bm9vcCxzZWxlY3RBbGw6Q2hlY2tib3hHcm91cC5zZWxlY3RBbGwuQkVGT1JFLHNlbGVjdEFsbFByb3BzOnt9fTtDaGVja2JveEdyb3VwLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhDaGVja2JveEdyb3VwLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChDaGVja2JveEdyb3VwKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgaXNGdW5jdGlvbj1mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpe3JldHVybiB0eXBlb2YgeD09PSdmdW5jdGlvbic7fTt2YXIgbm9vcD1mdW5jdGlvbiBub29wKCl7fTt2YXIgQ2hlY2tib3g9ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhDaGVja2JveCxfUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gQ2hlY2tib3goKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxDaGVja2JveCk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1DaGVja2JveC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihDaGVja2JveCkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLmlkPV9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxfdGhpcy5oYW5kbGVDaGFuZ2U9ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzLnByb3BzLmlucHV0UHJvcHMuZGlzYWJsZWQpe3JldHVybjt9X3RoaXMucHJvcHNbIV90aGlzLnByb3BzLmlucHV0UHJvcHMuY2hlY2tlZD8nb25DaGVja2VkJzonb25VbmNoZWNrZWQnXShfdGhpcy5wcm9wcy5pbnB1dFByb3BzLm5hbWUpO2lmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZSkpe190aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO319LF90aGlzLmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGV2ZW50KXtpZihfdGhpcy5wcm9wcy5pbnB1dFByb3BzLmRpc2FibGVkKXtyZXR1cm47fV90aGlzLnJlZnMuaW5wdXQuZm9jdXMoKTtpZihpc0Z1bmN0aW9uKF90aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljaykpe190aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljayhldmVudCk7fX0sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoQ2hlY2tib3gsW3trZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe2lmKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlKXt0aGlzLnNldEluZGV0ZXJtaW5hdGUoKTt9fX0se2tleTonY29tcG9uZW50RGlkVXBkYXRlJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKXtpZihwcmV2UHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlIT09dGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUpe3RoaXMuc2V0SW5kZXRlcm1pbmF0ZSgpO319fSx7a2V5OidzZXRJbmRldGVybWluYXRlJyx2YWx1ZTpmdW5jdGlvbiBzZXRJbmRldGVybWluYXRlKCl7dGhpcy5yZWZzLmlucHV0LmluZGV0ZXJtaW5hdGU9ISF0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZTt9fSx7a2V5OidnZXRBcmlhU3RhdGUnLHZhbHVlOmZ1bmN0aW9uIGdldEFyaWFTdGF0ZSgpe3JldHVybiB0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZT8nbWl4ZWQnOlN0cmluZyh0aGlzLnByb3BzLmlucHV0UHJvcHMuY2hlY2tlZCk7fX0se2tleToncmVuZGVySW5wdXQnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcklucHV0KCl7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdpbnB1dCcsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMuaW5wdXRQcm9wcywnaW5kZXRlcm1pbmF0ZScpLHtyZWY6J2lucHV0Jyx0eXBlOidjaGVja2JveCcsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWNoZWNrYm94Jyx0aGlzLnByb3BzLmlucHV0UHJvcHMuY2xhc3NOYW1lLHsnYi1jaGVja2JveC1taXhlZCc6dGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUsJ2ItY2hlY2tib3gtY2hlY2tlZCc6dGhpcy5wcm9wcy5pbnB1dFByb3BzLmNoZWNrZWQsJ2ItY2hlY2tib3gtdW5jaGVja2VkJzohdGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUmJiF0aGlzLnByb3BzLmlucHV0UHJvcHMuY2hlY2tlZH0pLGlkOnRoaXMucHJvcHMuaW5wdXRQcm9wcy5pZHx8dGhpcy5pZCwnYXJpYS1jaGVja2VkJzp0aGlzLmdldEFyaWFTdGF0ZSgpLG9uQ2hhbmdlOnRoaXMuaGFuZGxlQ2hhbmdlLG9uQ2xpY2s6dGhpcy5oYW5kbGVDbGlja30pKTt9fSx7a2V5OidyZW5kZXJMYWJlbCcsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyTGFiZWwoKXtpZih0aGlzLnByb3BzLmxhYmVsKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2xhYmVsJyxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmxhYmVsUHJvcHMse3JlZjonbGFiZWwnLGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1jaGVja2JveC1sYWJlbCcsdGhpcy5wcm9wcy5sYWJlbFByb3BzLmNsYXNzTmFtZSksaHRtbEZvcjp0aGlzLnByb3BzLmlucHV0UHJvcHMuaWR8fHRoaXMuaWR9KSx0aGlzLnByb3BzLmxhYmVsKTt9fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsQ2hlY2tib3guaW50ZXJuYWxLZXlzKSx7cmVmOid3cmFwcGVyJyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItY2hlY2tib3gtd3JhcHBlcicsdGhpcy5wcm9wcy5jbGFzc05hbWUpfSksdGhpcy5yZW5kZXJJbnB1dCgpLHRoaXMucmVuZGVyTGFiZWwoKSk7fX1dKTtyZXR1cm4gQ2hlY2tib3g7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIlB1cmVDb21wb25lbnRcIl0pO0NoZWNrYm94LnByb3BUeXBlcz17JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLGlucHV0UHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnksY2hlY2tlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sLGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsZGlzYWJsZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxpZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsaW5kZXRlcm1pbmF0ZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sLG9uQ2hhbmdlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmMsb25DbGljazpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLG5hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLHZhbHVlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZ30pLGxhYmVsOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUsbGFiZWxQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueX0pLG9uQ2hlY2tlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLG9uVW5jaGVja2VkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmN9O0NoZWNrYm94LmRlZmF1bHRQcm9wcz17Y29tcG9uZW50OidkaXYnLGlucHV0UHJvcHM6e2NoZWNrZWQ6ZmFsc2UsaW5kZXRlcm1pbmF0ZTpmYWxzZX0sbGFiZWw6bnVsbCxsYWJlbFByb3BzOnt9LG9uQ2hlY2tlZDpub29wLG9uVW5jaGVja2VkOm5vb3B9O0NoZWNrYm94LmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhDaGVja2JveC5kZWZhdWx0UHJvcHMpOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoQ2hlY2tib3gpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1kaWFsb2cvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3BvcnRhbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcnRhbC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIGlzRnVuY3Rpb249ZnVuY3Rpb24gaXNGdW5jdGlvbih4KXtyZXR1cm4gdHlwZW9mIHg9PT0nZnVuY3Rpb24nO307dmFyIG5vb3A9ZnVuY3Rpb24gbm9vcCgpe307dmFyIHRvQXJyYXk9QXJyYXkucHJvdG90eXBlLnNsaWNlO3ZhciBEaWFsb2c9ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhEaWFsb2csX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIERpYWxvZygpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLERpYWxvZyk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1EaWFsb2cuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoRGlhbG9nKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMubW91bnRlZD1mYWxzZSxfdGhpcy5oYW5kbGVGb2N1cz1mdW5jdGlvbihuYXRpdmVFdmVudCl7aWYoIV90aGlzLnByb3BzLmNhcHR1cmVGb2N1cyl7aWYoX3RoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZUZvY3VzJyxuYXRpdmVFdmVudCkmJiFfdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKXtyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoX3RoaXMucHJvcHMub25DbG9zZSwwKTt9cmV0dXJuO312YXIgcHJldmlvdXM9bmF0aXZlRXZlbnQuZXhwbGljaXRPcmlnaW5hbFRhcmdldHx8bmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldDtpZihfdGhpcy5pc1BhcnRPZkRpYWxvZyhwcmV2aW91cykmJiFfdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKXtuYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO3ByZXZpb3VzLmZvY3VzKCk7fX0sX3RoaXMuaGFuZGxlS2V5RG93bj1mdW5jdGlvbihldmVudCl7aWYoZXZlbnQua2V5PT09J0VzY2FwZScpe2lmKF90aGlzLnNob3VsZERpYWxvZ0Nsb3NlT25FdmVudCgnY2xvc2VPbkVzY0tleScsZXZlbnQpKXt3aW5kb3cuc2V0VGltZW91dChfdGhpcy5wcm9wcy5vbkNsb3NlLDApO319aWYoX3RoaXMucHJvcHMub25LZXlEb3duKXtfdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO319LF90aGlzLmhhbmRsZUluc2lkZUNsaWNrPWZ1bmN0aW9uKGV2ZW50KXtpZihfdGhpcy5zaG91bGREaWFsb2dDbG9zZU9uRXZlbnQoJ2Nsb3NlT25JbnNpZGVDbGljaycsZXZlbnQpKXt3aW5kb3cuc2V0VGltZW91dChfdGhpcy5wcm9wcy5vbkNsb3NlLDApO319LF90aGlzLmhhbmRsZU91dHNpZGVDbGljaz1mdW5jdGlvbihuYXRpdmVFdmVudCl7aWYoX3RoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZUNsaWNrJyxuYXRpdmVFdmVudCkmJiFfdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKXt3aW5kb3cuc2V0VGltZW91dChfdGhpcy5wcm9wcy5vbkNsb3NlLDApO319LF90aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbD1mdW5jdGlvbihuYXRpdmVFdmVudCl7aWYoX3RoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZVNjcm9sbCcsbmF0aXZlRXZlbnQpJiYhX3RoaXMuaXNQYXJ0T2ZEaWFsb2cobmF0aXZlRXZlbnQudGFyZ2V0KSl7d2luZG93LnNldFRpbWVvdXQoX3RoaXMucHJvcHMub25DbG9zZSwwKTt9fSxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhEaWFsb2csW3trZXk6J2lzUGFydE9mRGlhbG9nJyx2YWx1ZTpmdW5jdGlvbiBpc1BhcnRPZkRpYWxvZyhub2RlKXtpZighbm9kZXx8bm9kZT09PXdpbmRvdyl7cmV0dXJuIGZhbHNlO312YXIgcm9vdHM9W3RoaXMuJHdyYXBwZXJdLmNvbmNhdCh0b0FycmF5LmNhbGwodGhpcy4kd3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKCdbJytfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3BvcnRhbF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLlBPUlRBTF9EQVRBX0FUVFJJQlVURSsnXScpKS5tYXAoZnVuY3Rpb24oZG9tKXtyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZG9tLmdldEF0dHJpYnV0ZShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3BvcnRhbF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLlBPUlRBTF9EQVRBX0FUVFJJQlVURSkpO30pKTt2YXIgZWxlbWVudD1ub2RlLm5vZGVUeXBlIT09Tm9kZS5FTEVNRU5UX05PREU/bm9kZS5wYXJlbnROb2RlOm5vZGU7cmV0dXJuIHJvb3RzLnNvbWUoZnVuY3Rpb24oZG9tKXtyZXR1cm4gZG9tLmNvbnRhaW5zKGVsZW1lbnQpO30pO319LHtrZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssdHJ1ZSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51Jyx0aGlzLmhhbmRsZU91dHNpZGVDbGljayx0cnVlKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLHRoaXMuaGFuZGxlRm9jdXMsdHJ1ZSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsdGhpcy5oYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwsdHJ1ZSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJyx0aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCx0cnVlKTtpZih0aGlzLnByb3BzLmNhcHR1cmVGb2N1cyYmIXRoaXMuaXNQYXJ0T2ZEaWFsb2coZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpe3RoaXMuJGRpYWxvZy5mb2N1cygpO319fSx7a2V5Oidjb21wb25lbnRXaWxsVW5tb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLHRydWUpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssdHJ1ZSk7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJyx0aGlzLmhhbmRsZUZvY3VzLHRydWUpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLHRoaXMuaGFuZGxlT3V0c2lkZVNjcm9sbFdoZWVsLHRydWUpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsdGhpcy5oYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwsdHJ1ZSk7fX0se2tleTonc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50Jyx2YWx1ZTpmdW5jdGlvbiBzaG91bGREaWFsb2dDbG9zZU9uRXZlbnQocHJvcCxldmVudCl7cmV0dXJuIGlzRnVuY3Rpb24odGhpcy5wcm9wc1twcm9wXSk/dGhpcy5wcm9wc1twcm9wXShldmVudCk6dGhpcy5wcm9wc1twcm9wXTt9fSx7a2V5OidyZW5kZXJGb2N1c0JvdW5kYXJ5Jyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJGb2N1c0JvdW5kYXJ5KCl7aWYodGhpcy5wcm9wcy5jYXB0dXJlRm9jdXMpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSgnZGl2Jyx7Y2xhc3NOYW1lOidiLW9mZnNjcmVlbicsdGFiSW5kZXg6JzAnLCdhcmlhLWhpZGRlbic6J3RydWUnfSwnXFx4QTAnKTt9fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXt2YXIgX3RoaXMyPXRoaXM7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKHRoaXMucHJvcHMuY29tcG9uZW50LF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLERpYWxvZy5pbnRlcm5hbEtleXMpLHtyZWY6ZnVuY3Rpb24gcmVmKG5vZGUpe3JldHVybiBfdGhpczIuJHdyYXBwZXI9bm9kZTt9LGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1kaWFsb2ctd3JhcHBlcicsdGhpcy5wcm9wcy5jbGFzc05hbWUpfSksdGhpcy5yZW5kZXJGb2N1c0JvdW5kYXJ5KCksdGhpcy5wcm9wcy5iZWZvcmUsX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkodGhpcy5wcm9wcy5kaWFsb2dDb21wb25lbnQsX2V4dGVuZHMoe30sdGhpcy5kaWFsb2dQcm9wcyx7cmVmOmZ1bmN0aW9uIHJlZihub2RlKXtyZXR1cm4gX3RoaXMyLiRkaWFsb2c9bm9kZTt9LGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1kaWFsb2cnLHRoaXMucHJvcHMuZGlhbG9nUHJvcHMuY2xhc3NOYW1lKSxvbkNsaWNrOnRoaXMuaGFuZGxlSW5zaWRlQ2xpY2ssb25LZXlEb3duOnRoaXMuaGFuZGxlS2V5RG93bixyb2xlOnRoaXMucHJvcHMuY2FwdHVyZUZvY3VzPydhbGVydGRpYWxvZyc6J2RpYWxvZycsdGFiSW5kZXg6JzAnfSksdGhpcy5wcm9wcy5jaGlsZHJlbiksdGhpcy5wcm9wcy5hZnRlcix0aGlzLnJlbmRlckZvY3VzQm91bmRhcnkoKSk7fX1dKTtyZXR1cm4gRGlhbG9nO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJQdXJlQ29tcG9uZW50XCJdKTtEaWFsb2cucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55LGFmdGVyOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUsYmVmb3JlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUsY2FwdHVyZUZvY3VzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsY2xvc2VPbkVzY0tleTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuY10pLGNsb3NlT25JbnNpZGVDbGljazpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuY10pLGNsb3NlT25PdXRzaWRlQ2xpY2s6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmNdKSxjbG9zZU9uT3V0c2lkZUZvY3VzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jXSksY2xvc2VPbk91dHNpZGVTY3JvbGw6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmNdKSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLGRpYWxvZ0NvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsZGlhbG9nUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnl9KSxvbkNsb3NlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmN9O0RpYWxvZy5kZWZhdWx0UHJvcHM9e2FmdGVyOm51bGwsYmVmb3JlOm51bGwsY2FwdHVyZUZvY3VzOnRydWUsY2hpbGRyZW46bnVsbCxjbG9zZU9uRXNjS2V5OmZhbHNlLGNsb3NlT25JbnNpZGVDbGljazpmYWxzZSxjbG9zZU9uT3V0c2lkZUNsaWNrOmZhbHNlLGNsb3NlT25PdXRzaWRlRm9jdXM6ZmFsc2UsY2xvc2VPbk91dHNpZGVTY3JvbGw6ZmFsc2UsY29tcG9uZW50OidkaXYnLGRpYWxvZ0NvbXBvbmVudDonZGl2JyxkaWFsb2dQcm9wczp7fSxvbkNsb3NlOm5vb3Asb25LZXlEb3duOm5vb3B9O0RpYWxvZy5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoRGlhbG9nLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChEaWFsb2cpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1maXR0ZWQtdGV4dC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIGluc3RhbmNlcz1bXTtmdW5jdGlvbiB0b0koc3RyaW5nTnVtYmVyKXtyZXR1cm4gcGFyc2VJbnQoc3RyaW5nTnVtYmVyLDEwKTt9ZnVuY3Rpb24gcmVzY2FsZShpbnN0YW5jZSl7dmFyIG5vZGU9X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fX1tcImZpbmRET01Ob2RlXCJdKShpbnN0YW5jZSk7dmFyIGNvbnRhaW5lckJveD13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLnBhcmVudE5vZGUpO3ZhciBmb250U2l6ZT10b0kod2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSkuZm9udFNpemUpO2lmKGluc3RhbmNlLmJhc2VGb250U2l6ZT09PW51bGwpe2luc3RhbmNlLmJhc2VGb250U2l6ZT1mb250U2l6ZTt9dmFyIGNvbnRhaW5lckhlaWdodD10b0koY29udGFpbmVyQm94LmhlaWdodCk7dmFyIGNvbnRhaW5lcldpZHRoPXRvSShjb250YWluZXJCb3gud2lkdGgpO2lmKGNvbnRhaW5lckJveC5ib3hTaXppbmc9PT0nYm9yZGVyLWJveCd8fGNvbnRhaW5lckJveC5ib3hTaXppbmc9PT0ncGFkZGluZy1ib3gnKXtjb250YWluZXJIZWlnaHQtPXRvSShjb250YWluZXJCb3gucGFkZGluZ1RvcCkrdG9JKGNvbnRhaW5lckJveC5wYWRkaW5nQm90dG9tKTtjb250YWluZXJXaWR0aC09dG9JKGNvbnRhaW5lckJveC5wYWRkaW5nTGVmdCkrdG9JKGNvbnRhaW5lckJveC5wYWRkaW5nUmlnaHQpO312YXIgb3B0aW1pemVGb3JIZWlnaHQ9TWF0aC5mbG9vcihmb250U2l6ZS9ub2RlLm9mZnNldEhlaWdodCpjb250YWluZXJIZWlnaHQpO3ZhciBvcHRpbWl6ZUZvcldpZHRoPU1hdGguZmxvb3IoZm9udFNpemUvbm9kZS5vZmZzZXRXaWR0aCpjb250YWluZXJXaWR0aCk7aWYoaW5zdGFuY2UucHJvcHMudXBzY2FsZSl7bm9kZS5zdHlsZS5mb250U2l6ZT0oTWF0aC5tYXgob3B0aW1pemVGb3JIZWlnaHQsb3B0aW1pemVGb3JXaWR0aCl8fDEpKydweCc7fWVsc2V7bm9kZS5zdHlsZS5mb250U2l6ZT0oTWF0aC5taW4oaW5zdGFuY2UuYmFzZUZvbnRTaXplLG9wdGltaXplRm9ySGVpZ2h0LG9wdGltaXplRm9yV2lkdGgpfHwxKSsncHgnO319ZnVuY3Rpb24gaGFuZGxlV2luZG93UmVzaXplKCl7aW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24oaW5zdGFuY2Upe3JldHVybiByZXNjYWxlKGluc3RhbmNlKTt9KTt9ZnVuY3Rpb24gcmVnaXN0ZXJJbnN0YW5jZShpbnN0YW5jZSl7aWYoaW5zdGFuY2VzLmxlbmd0aD09PTApe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLGhhbmRsZVdpbmRvd1Jlc2l6ZSx0cnVlKTt9aW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO31mdW5jdGlvbiB1bnJlZ2lzdGVySW5zdGFuY2UoaW5zdGFuY2Upe2luc3RhbmNlcy5zcGxpY2UoaW5zdGFuY2VzLmluZGV4T2YoaW5zdGFuY2UpLDEpO2lmKGluc3RhbmNlcy5sZW5ndGg9PT0wKXt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJyxoYW5kbGVXaW5kb3dSZXNpemUsdHJ1ZSk7fX12YXIgRml0dGVkVGV4dD1mdW5jdGlvbihfUHVyZUNvbXBvbmVudCl7X2luaGVyaXRzKEZpdHRlZFRleHQsX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIEZpdHRlZFRleHQoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxGaXR0ZWRUZXh0KTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPUZpdHRlZFRleHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoRml0dGVkVGV4dCkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLmJhc2VGb250U2l6ZT1udWxsLF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKEZpdHRlZFRleHQsW3trZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3Jlc2NhbGUodGhpcyk7cmVnaXN0ZXJJbnN0YW5jZSh0aGlzKTt9fSx7a2V5Oidjb21wb25lbnREaWRVcGRhdGUnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpe3Jlc2NhbGUodGhpcyk7fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dW5yZWdpc3Rlckluc3RhbmNlKHRoaXMpO319LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKHRoaXMucHJvcHMuY29tcG9uZW50LF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLEZpdHRlZFRleHQuaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXRleHQnLHRoaXMucHJvcHMuY2xhc3NOYW1lKX0pLHRoaXMucHJvcHMuY2hpbGRyZW4pO319XSk7cmV0dXJuIEZpdHRlZFRleHQ7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIlB1cmVDb21wb25lbnRcIl0pO0ZpdHRlZFRleHQucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55LGNvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsdXBzY2FsZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sfTtGaXR0ZWRUZXh0LmRlZmF1bHRQcm9wcz17Y29tcG9uZW50OidzcGFuJyx1cHNjYWxlOmZhbHNlfTtGaXR0ZWRUZXh0LmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhGaXR0ZWRUZXh0LmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChGaXR0ZWRUZXh0KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtaW1hZ2UvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgSW1hZ2U9ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhJbWFnZSxfUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gSW1hZ2UoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxJbWFnZSk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1JbWFnZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihJbWFnZSkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLnN0YXRlPXtzdGF0dXM6SW1hZ2Uuc3RhdHVzLkxPQURJTkd9LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKEltYWdlLFt7a2V5Oidjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcyl7aWYobmV4dFByb3BzLnNyYyE9PXRoaXMucHJvcHMuc3JjKXt0aGlzLnJlc2V0UHJlbG9hZGVyKCk7dGhpcy5zZXRTdGF0ZSh7c3RhdHVzOkltYWdlLnN0YXR1cy5MT0FESU5HfSk7fX19LHtrZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMucHJlbG9hZCgpO319LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCl7dGhpcy5wcmVsb2FkKCk7fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5yZXNldFByZWxvYWRlcigpO319LHtrZXk6J3Jlc2V0UHJlbG9hZGVyJyx2YWx1ZTpmdW5jdGlvbiByZXNldFByZWxvYWRlcigpe3RoaXMubG9hZGVyLm9ubG9hZD1udWxsO3RoaXMubG9hZGVyLm9uZXJyb3I9bnVsbDt0aGlzLmxvYWRlcj1udWxsO319LHtrZXk6J3ByZWxvYWQnLHZhbHVlOmZ1bmN0aW9uIHByZWxvYWQoKXt2YXIgX3RoaXMyPXRoaXM7aWYodGhpcy5sb2FkZXIpe3JldHVybjt9dGhpcy5sb2FkZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7dGhpcy5sb2FkZXIub25sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzMi5zZXRTdGF0ZSh7c3RhdHVzOkltYWdlLnN0YXR1cy5MT0FERUR9KTt9O3RoaXMubG9hZGVyLm9uZXJyb3I9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMyLnNldFN0YXRlKHtzdGF0dXM6SW1hZ2Uuc3RhdHVzLkVSUk9SfSk7fTt0aGlzLmxvYWRlci5zcmM9dGhpcy5wcm9wcy5zcmM7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsSW1hZ2UuaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLWltYWdlJyx0aGlzLnByb3BzLmNsYXNzTmFtZSx7J2ItaW1hZ2UtbG9hZGluZyc6dGhpcy5zdGF0ZS5zdGF0dXM9PT1JbWFnZS5zdGF0dXMuTE9BRElORywnYi1pbWFnZS1sb2FkZWQnOnRoaXMuc3RhdGUuc3RhdHVzPT09SW1hZ2Uuc3RhdHVzLkxPQURFRCwnYi1pbWFnZS1lcnJvcic6dGhpcy5zdGF0ZS5zdGF0dXM9PT1JbWFnZS5zdGF0dXMuRVJST1J9KSx0aXRsZTp0aGlzLnByb3BzLmFsdCxyb2xlOidpbWcnLHN0eWxlOl9leHRlbmRzKHt9LHRoaXMucHJvcHMuc3R5bGUse2JhY2tncm91bmRJbWFnZTondXJsKCcrdGhpcy5wcm9wcy5zcmMrJyknfSl9KSwnXFx4QTAnKTt9fV0pO3JldHVybiBJbWFnZTt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiUHVyZUNvbXBvbmVudFwiXSk7SW1hZ2Uuc3RhdHVzPXtMT0FESU5HOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxMT0FERUQ6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLEVSUk9SOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKX07SW1hZ2UucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55LGFsdDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsY29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyxzcmM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLmlzUmVxdWlyZWR9O0ltYWdlLmRlZmF1bHRQcm9wcz17YWx0OicnLGNvbXBvbmVudDonZGl2JyxzcmM6J2Fib3V0OmJsYW5rJ307SW1hZ2UuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKEltYWdlLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChJbWFnZSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLWlucHV0L2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG52YXIgX2V4dGVuZHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odGFyZ2V0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgc291cmNlPWFyZ3VtZW50c1tpXTtmb3IodmFyIGtleSBpbiBzb3VyY2Upe2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2Usa2V5KSl7dGFyZ2V0W2tleV09c291cmNlW2tleV07fX19cmV0dXJuIHRhcmdldDt9O3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHxmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT10cnVlO2lmKFwidmFsdWVcImluIGRlc2NyaXB0b3IpZGVzY3JpcHRvci53cml0YWJsZT10cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsZGVzY3JpcHRvci5rZXksZGVzY3JpcHRvcik7fX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7aWYocHJvdG9Qcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKTtpZihzdGF0aWNQcm9wcylkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fTt9KCk7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBpc0Z1bmN0aW9uPWZ1bmN0aW9uIGlzRnVuY3Rpb24oeCl7cmV0dXJuIHR5cGVvZiB4PT09J2Z1bmN0aW9uJzt9O3ZhciBJbnB1dD1mdW5jdGlvbihfUHVyZUNvbXBvbmVudCl7X2luaGVyaXRzKElucHV0LF9QdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBJbnB1dCgpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLElucHV0KTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPUlucHV0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKElucHV0KSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMuc3RhdGU9e2lucHV0OicnLGlzQ29udHJvbGxlZDp0eXBlb2YgX3RoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZT09PSdzdHJpbmcnLGlzRm9jdXNlZDpmYWxzZX0sX3RoaXMuc2V0SW5wdXRWYWx1ZT1mdW5jdGlvbigpe3ZhciB2YWx1ZT1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06Jyc7cmV0dXJuIF90aGlzLnNldFN0YXRlKHtpbnB1dDp2YWx1ZX0pO30sX3RoaXMuZ2V0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucmVmcy5maWVsZC52YWx1ZTt9LF90aGlzLmhhbmRsZUJsdXI9ZnVuY3Rpb24oZXZlbnQpe190aGlzLnNldFN0YXRlKHtpc0ZvY3VzZWQ6ZmFsc2V9KTtpZihpc0Z1bmN0aW9uKF90aGlzLnByb3BzLmlucHV0UHJvcHMub25CbHVyKT09PXRydWUpe190aGlzLnByb3BzLmlucHV0UHJvcHMub25CbHVyKGV2ZW50KTt9fSxfdGhpcy5oYW5kbGVGb2N1cz1mdW5jdGlvbihldmVudCl7X3RoaXMuc2V0U3RhdGUoe2lzRm9jdXNlZDp0cnVlfSk7aWYoaXNGdW5jdGlvbihfdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uRm9jdXMpPT09dHJ1ZSl7X3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkZvY3VzKGV2ZW50KTt9fSxfdGhpcy5oYW5kbGVDaGFuZ2U9ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzLnN0YXRlLmlzQ29udHJvbGxlZD09PWZhbHNlKXtfdGhpcy5zZXRJbnB1dFZhbHVlKGV2ZW50LnRhcmdldC52YWx1ZSk7fWlmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZSk9PT10cnVlKXtfdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKGV2ZW50KTt9fSxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhJbnB1dCxbe2tleTonY29tcG9uZW50V2lsbE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKXtpZih0aGlzLnN0YXRlLmlzQ29udHJvbGxlZD09PXRydWUpe3JldHVybiB0aGlzLnNldElucHV0VmFsdWUodGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlKTt9dGhpcy5zZXRJbnB1dFZhbHVlKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kZWZhdWx0VmFsdWUpO319LHtrZXk6J2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKXtpZihuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSE9PXRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSl7dGhpcy5zZXRJbnB1dFZhbHVlKG5leHRQcm9wcy5pbnB1dFByb3BzLnZhbHVlKTt9fX0se2tleTonc2V0VmFsdWUnLHZhbHVlOmZ1bmN0aW9uIHNldFZhbHVlKG5leHRWYWx1ZSl7dGhpcy5zZXRJbnB1dFZhbHVlKG5leHRWYWx1ZSk7dGhpcy5yZWZzLmZpZWxkLnZhbHVlPW5leHRWYWx1ZTtpZih0aGlzLnN0YXRlLmlzQ29udHJvbGxlZD09PXRydWUpe3RoaXMucmVmcy5maWVsZC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnLHtidWJibGVzOnRydWV9KSk7dGhpcy5yZWZzLmZpZWxkLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnLHtidWJibGVzOnRydWV9KSk7fX19LHtrZXk6J2dldFBsYWNlaG9sZGVyVGV4dCcsdmFsdWU6ZnVuY3Rpb24gZ2V0UGxhY2Vob2xkZXJUZXh0KCl7dmFyIGlzTm9uRW1wdHk9dGhpcy5zdGF0ZS5pbnB1dCE9PScnO3ZhciBzaG91bGRTaG93UGxhY2Vob2xkZXI9dGhpcy5wcm9wcy5oaWRlUGxhY2Vob2xkZXJPbkZvY3VzPT09dHJ1ZT90aGlzLnN0YXRlLmlzRm9jdXNlZD09PWZhbHNlJiZpc05vbkVtcHR5PT09ZmFsc2U6aXNOb25FbXB0eT09PWZhbHNlO3JldHVybiBzaG91bGRTaG93UGxhY2Vob2xkZXI/dGhpcy5wcm9wcy5pbnB1dFByb3BzLnBsYWNlaG9sZGVyOicnO319LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKHRoaXMucHJvcHMuY29tcG9uZW50LF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLElucHV0LmludGVybmFsS2V5cykse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1pbnB1dC13cmFwcGVyJyx0aGlzLnByb3BzLmNsYXNzTmFtZSksdGl0bGU6dGhpcy5nZXRQbGFjZWhvbGRlclRleHQoKX0pLF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdpbnB1dCcsX2V4dGVuZHMoe30sdGhpcy5wcm9wcy5pbnB1dFByb3BzLHtyZWY6J2ZpZWxkJyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItaW5wdXQnLHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUpLHBsYWNlaG9sZGVyOm51bGwsb25CbHVyOnRoaXMuaGFuZGxlQmx1cixvbkZvY3VzOnRoaXMuaGFuZGxlRm9jdXMsb25DaGFuZ2U6dGhpcy5oYW5kbGVDaGFuZ2V9KSksX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2Rpdicse2NsYXNzTmFtZTonYi1pbnB1dC1wbGFjZWhvbGRlciBiLWlucHV0J30sdGhpcy5nZXRQbGFjZWhvbGRlclRleHQoKSkpO319XSk7cmV0dXJuIElucHV0O30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJQdXJlQ29tcG9uZW50XCJdKTtJbnB1dC5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnksY29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyxoaWRlUGxhY2Vob2xkZXJPbkZvY3VzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsaW5wdXRQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueSxkZWZhdWx0VmFsdWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLG9uQmx1cjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLG9uRm9jdXM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxvbkNoYW5nZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLHBsYWNlaG9sZGVyOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyx0eXBlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyx2YWx1ZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmd9KX07SW5wdXQuZGVmYXVsdFByb3BzPXtjb21wb25lbnQ6J2RpdicsaGlkZVBsYWNlaG9sZGVyT25Gb2N1czp0cnVlLGlucHV0UHJvcHM6e3R5cGU6J3RleHQnfX07SW5wdXQuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKElucHV0LmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChJbnB1dCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLW1vZGFsL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19kaWFsb2dfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1kaWFsb2cvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19wb3J0YWxfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wb3J0YWwvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vYmplY3RfaW50ZXJzZWN0aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbi9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIE1vZGFsPWZ1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoTW9kYWwsX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIE1vZGFsKCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsTW9kYWwpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChNb2RhbC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihNb2RhbCkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSk7fV9jcmVhdGVDbGFzcyhNb2RhbCxbe2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXt2YXIgX3RoaXMyPXRoaXM7dmFyIHByb3BzPXRoaXMucHJvcHM7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfcG9ydGFsX19bXCJhXCIgLyogZGVmYXVsdCAqL10scHJvcHMucG9ydGFsUHJvcHMsX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2RpdicsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHByb3BzLE1vZGFsLmludGVybmFsS2V5cykse3JlZjpmdW5jdGlvbiByZWYobm9kZSl7cmV0dXJuIF90aGlzMi4kbW9kYWw9bm9kZTt9LGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1tb2RhbC13cmFwcGVyJyxwcm9wcy5jbGFzc05hbWUpfSksX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2RpdicsX2V4dGVuZHMoe30scHJvcHMubWFza1Byb3BzLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItbW9kYWwtbWFzaycscHJvcHMubWFza1Byb3BzLmNsYXNzTmFtZSl9KSksX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIiAvKiBkZWZhdWx0ICovXSxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vYmplY3RfaW50ZXJzZWN0aW9uX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHByb3BzLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfZGlhbG9nX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZGVmYXVsdFByb3BzKSxwcm9wcy5tb2RhbFByb3BzLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItbW9kYWwnLHByb3BzLm1vZGFsUHJvcHMuY2xhc3NOYW1lKX0pLHByb3BzLmNoaWxkcmVuKSkpO319XSk7cmV0dXJuIE1vZGFsO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJQdXJlQ29tcG9uZW50XCJdKTtNb2RhbC5wcm9wVHlwZXM9X2V4dGVuZHMoe30sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5wcm9wVHlwZXMse21hc2tQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueX0pLG1vZGFsUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnl9KSxwb3J0YWxQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3BvcnRhbF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLnByb3BUeXBlcyl9KTtNb2RhbC5kZWZhdWx0UHJvcHM9X2V4dGVuZHMoe30sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5kZWZhdWx0UHJvcHMse2NhcHR1cmVGb2N1czp0cnVlLG1hc2tQcm9wczp7fSxtb2RhbFByb3BzOnt9LHBvcnRhbFByb3BzOnt9fSk7TW9kYWwuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKE1vZGFsLmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChNb2RhbCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2xvZGFzaF9pc0ludGVnZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNJbnRlZ2VyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9sb2Rhc2hfaXNJbnRlZ2VyX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfbG9kYXNoX2lzSW50ZWdlcl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfcmVhY3RfZG9tX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19yZWFjdF9kb21fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19yZWFjdF9kb21fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX2FzeW5jX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtYXN5bmMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X2JvdW5kbGVzc19zZWdtZW50ZWRfY29udHJvbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXNlZ21lbnRlZC1jb250cm9sL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1hcnJvdy1rZXktbmF2aWdhdGlvbi9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfYm91bmRsZXNzX3V0aWxzX3V1aWRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosa2V5LHZhbHVlKXtpZihrZXkgaW4gb2JqKXtPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLGtleSx7dmFsdWU6dmFsdWUsZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOnRydWV9KTt9ZWxzZXtvYmpba2V5XT12YWx1ZTt9cmV0dXJuIG9iajt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZixjYWxsKXtpZighc2VsZil7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKHR5cGVvZiBzdXBlckNsYXNzIT09XCJmdW5jdGlvblwiJiZzdXBlckNsYXNzIT09bnVsbCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KTtpZihzdXBlckNsYXNzKU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyk6c3ViQ2xhc3MuX19wcm90b19fPXN1cGVyQ2xhc3M7fXZhciBpZGVudGl0eT1mdW5jdGlvbiBpZGVudGl0eSh4KXtyZXR1cm4geDt9O3ZhciBpc0Z1bmN0aW9uPWZ1bmN0aW9uIGlzRnVuY3Rpb24oeCl7cmV0dXJuIHR5cGVvZiB4PT09J2Z1bmN0aW9uJzt9O3ZhciBub29wPWZ1bmN0aW9uIG5vb3AoKXt9O3ZhciBQYWdpbmF0aW9uPWZ1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoUGFnaW5hdGlvbixfUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gUGFnaW5hdGlvbigpe3ZhciBfcmVmO3ZhciBfdGVtcCxfdGhpcyxfcmV0O19jbGFzc0NhbGxDaGVjayh0aGlzLFBhZ2luYXRpb24pO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9UGFnaW5hdGlvbi5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihQYWdpbmF0aW9uKSkuY2FsbC5hcHBseShfcmVmLFt0aGlzXS5jb25jYXQoYXJncykpKSxfdGhpcyksX3RoaXMubW91bnRlZD1mYWxzZSxfdGhpcy5zdGF0ZT17Y3VycmVudFBhZ2U6X3RoaXMucHJvcHMuaW5pdGlhbFBhZ2UsdGFyZ2V0SW5kZXg6KF90aGlzLnByb3BzLmluaXRpYWxQYWdlLTEpKl90aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZX0sX3RoaXMuY3VycmVudFBhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMuc3RhdGUuY3VycmVudFBhZ2U7fSxfdGhpcy5nZXRQYWdlRm9ySW5kZXg9ZnVuY3Rpb24oaW5kZXgpe3ZhciBpdGVtc1BlclBhZ2U9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOl90aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZTtyZXR1cm4gTWF0aC5jZWlsKChpbmRleCsxKS9pdGVtc1BlclBhZ2UpO30sX3RoaXMudG90YWxQYWdlcz1mdW5jdGlvbigpe3JldHVybiBNYXRoLmNlaWwoX3RoaXMucHJvcHMudG90YWxJdGVtcy9fdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpO30sX3RoaXMuZmlyc3RWaXNpYmxlSXRlbUluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuKF90aGlzLmN1cnJlbnRQYWdlKCktMSkqX3RoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlO30sX3RoaXMuanVtcFRvSW5kZXg9ZnVuY3Rpb24oaSl7aWYoaTwwfHxpPj1fdGhpcy5wcm9wcy50b3RhbEl0ZW1zKXt0aHJvdyBFcnJvcignQ2Fubm90IHBhZ2UgdG8gaW52YWxpZCBpbmRleCAnK2krJy4nKTt9X3RoaXMuc2V0U3RhdGUoe2N1cnJlbnRQYWdlOl90aGlzLmdldFBhZ2VGb3JJbmRleChpKSx0YXJnZXRJbmRleDppfSk7fSxfdGhpcy5oYW5kbGVQYWdlU2VsZWN0ZWQ9ZnVuY3Rpb24ob3B0aW9uKXt2YXIgbmV4dFRhcmdldEluZGV4PXZvaWQgMDtzd2l0Y2gob3B0aW9uW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV0pe2Nhc2UgdW5kZWZpbmVkOnJldHVybjtjYXNlIFBhZ2luYXRpb24uY29udHJvbC5GSVJTVDpuZXh0VGFyZ2V0SW5kZXg9MDticmVhaztjYXNlIFBhZ2luYXRpb24uY29udHJvbC5QUkVWSU9VUzpuZXh0VGFyZ2V0SW5kZXg9X3RoaXMuZmlyc3RWaXNpYmxlSXRlbUluZGV4KCktX3RoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlO2JyZWFrO2Nhc2UgUGFnaW5hdGlvbi5jb250cm9sLk5FWFQ6bmV4dFRhcmdldEluZGV4PV90aGlzLmZpcnN0VmlzaWJsZUl0ZW1JbmRleCgpK190aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZTticmVhaztjYXNlIFBhZ2luYXRpb24uY29udHJvbC5MQVNUOm5leHRUYXJnZXRJbmRleD1fdGhpcy5wcm9wcy50b3RhbEl0ZW1zLTE7YnJlYWs7ZGVmYXVsdDpuZXh0VGFyZ2V0SW5kZXg9cGFyc2VJbnQob3B0aW9uW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV0sMTApKl90aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZS0xO31fdGhpcy5zZXRTdGF0ZSh7Y3VycmVudFBhZ2U6X3RoaXMuZ2V0UGFnZUZvckluZGV4KG5leHRUYXJnZXRJbmRleCksdGFyZ2V0SW5kZXg6bmV4dFRhcmdldEluZGV4fSk7fSxfdGhpcy5oYW5kbGVJdGVtUHJvbWlzZUZ1bGZpbGxtZW50PWZ1bmN0aW9uKHBheWxvYWQpe2lmKF90aGlzLm1vdW50ZWQpe3JldHVybiBfdGhpcy5wcm9wcy5pdGVtVG9KU1hDb252ZXJ0ZXIocGF5bG9hZCk7fX0sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoUGFnaW5hdGlvbixbe2tleTonY29tcG9uZW50RGlkTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCl7dGhpcy5tb3VudGVkPXRydWU7fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5tb3VudGVkPWZhbHNlO319LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKF8scHJldlN0YXRlKXtpZihwcmV2U3RhdGUuY3VycmVudFBhZ2UhPT10aGlzLmN1cnJlbnRQYWdlKCkpe19fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfcmVhY3RfZG9tX19bXCJmaW5kRE9NTm9kZVwiXSkodGhpcy5yZWZzLml0ZW1fMCkuZm9jdXMoKTt9fX0se2tleTonY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpe3ZhciBfdGhpczI9dGhpczt2YXIgb2xkUHJvcHM9dGhpcy5wcm9wczt0aGlzLnNldFN0YXRlKGZ1bmN0aW9uKHN0YXRlLHByb3BzKXtpZihwcm9wcy5pZGVudGlmaWVyIT09b2xkUHJvcHMuaWRlbnRpZmllcil7cmV0dXJue2N1cnJlbnRQYWdlOjEsdGFyZ2V0SW5kZXg6MH07fXJldHVybntjdXJyZW50UGFnZTpfdGhpczIuZ2V0UGFnZUZvckluZGV4KHN0YXRlLnRhcmdldEluZGV4LHByb3BzLm51bUl0ZW1zUGVyUGFnZSksdGFyZ2V0SW5kZXg6c3RhdGUudGFyZ2V0SW5kZXh9O30pO319LHtrZXk6J2dlbmVyYXRlQ29udHJvbHMnLHZhbHVlOmZ1bmN0aW9uIGdlbmVyYXRlQ29udHJvbHMoKXt2YXIgb3B0aW9ucz1bXTt2YXIgY3VycmVudFBhZ2U9dGhpcy5jdXJyZW50UGFnZSgpO3ZhciB0b3RhbFBhZ2VzPXRoaXMudG90YWxQYWdlcygpO3ZhciBzdGFydFBhZ2U9Y3VycmVudFBhZ2UtKGN1cnJlbnRQYWdlLTEpJXRoaXMucHJvcHMubnVtUGFnZVRvZ2dsZXM7dmFyIGVuZFBhZ2U9TWF0aC5taW4oc3RhcnRQYWdlK3RoaXMucHJvcHMubnVtUGFnZVRvZ2dsZXMtMSx0b3RhbFBhZ2VzKTtpZih0aGlzLnByb3BzLnNob3dQYWdpbmF0aW9uU3RhdGUpe29wdGlvbnMucHVzaCh7Y2hpbGRyZW46aXNGdW5jdGlvbih0aGlzLnByb3BzLnNob3dQYWdpbmF0aW9uU3RhdGUpP3RoaXMucHJvcHMuc2hvd1BhZ2luYXRpb25TdGF0ZShjdXJyZW50UGFnZSx0b3RhbFBhZ2VzKTpjdXJyZW50UGFnZSsnIC8gJyt0b3RhbFBhZ2VzLGNsYXNzTmFtZTonYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtc3RhdGUnLGRpc2FibGVkOnRydWV9KTt9aWYodGhpcy5wcm9wcy5zaG93SnVtcFRvRmlyc3RQYWdlQ29udHJvbCl7dmFyIF9vcHRpb25zJHB1c2g7b3B0aW9ucy5wdXNoKChfb3B0aW9ucyRwdXNoPXt9LF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoLFBhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURSxQYWdpbmF0aW9uLmNvbnRyb2wuRklSU1QpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoLCdjaGlsZHJlbicsdGhpcy5wcm9wcy5qdW1wVG9GaXJzdFBhZ2VDb250cm9sQ29udGVudCksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gsJ2NsYXNzTmFtZScsJ2ItcGFnaW5hdGlvbi1jb250cm9sIGItcGFnaW5hdGlvbi1jb250cm9sLWZpcnN0JyksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gsJ2Rpc2FibGVkJyxjdXJyZW50UGFnZT09PTEpLF9vcHRpb25zJHB1c2gpKTt9aWYodGhpcy5wcm9wcy5zaG93SnVtcFRvUHJldmlvdXNQYWdlQ29udHJvbCl7dmFyIF9vcHRpb25zJHB1c2gyO29wdGlvbnMucHVzaCgoX29wdGlvbnMkcHVzaDI9e30sX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gyLFBhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURSxQYWdpbmF0aW9uLmNvbnRyb2wuUFJFVklPVVMpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoMiwnY2hpbGRyZW4nLHRoaXMucHJvcHMuanVtcFRvUHJldmlvdXNQYWdlQ29udHJvbENvbnRlbnQpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoMiwnY2xhc3NOYW1lJywnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtcHJldmlvdXMnKSxfZGVmaW5lUHJvcGVydHkoX29wdGlvbnMkcHVzaDIsJ2Rpc2FibGVkJyxjdXJyZW50UGFnZT09PTEpLF9vcHRpb25zJHB1c2gyKSk7fWZvcih2YXIgaT1zdGFydFBhZ2U7aTw9ZW5kUGFnZTtpKyspe3ZhciBfb3B0aW9ucyRwdXNoMztvcHRpb25zLnB1c2goKF9vcHRpb25zJHB1c2gzPXt9LF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoMyxQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEUsaSksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gzLCdjaGlsZHJlbicsaSksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2gzLCdjbGFzc05hbWUnLCdiLXBhZ2luYXRpb24tY29udHJvbCcpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoMywncHJlc3NlZCcsY3VycmVudFBhZ2U9PT1pKSxfb3B0aW9ucyRwdXNoMykpO31pZih0aGlzLnByb3BzLnNob3dKdW1wVG9OZXh0UGFnZUNvbnRyb2wpe3ZhciBfb3B0aW9ucyRwdXNoNDtvcHRpb25zLnB1c2goKF9vcHRpb25zJHB1c2g0PXt9LF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoNCxQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEUsUGFnaW5hdGlvbi5jb250cm9sLk5FWFQpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoNCwnY2hpbGRyZW4nLHRoaXMucHJvcHMuanVtcFRvTmV4dFBhZ2VDb250cm9sQ29udGVudCksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2g0LCdjbGFzc05hbWUnLCdiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1uZXh0JyksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2g0LCdkaXNhYmxlZCcsY3VycmVudFBhZ2U9PT10b3RhbFBhZ2VzKSxfb3B0aW9ucyRwdXNoNCkpO31pZih0aGlzLnByb3BzLnNob3dKdW1wVG9MYXN0UGFnZUNvbnRyb2wpe3ZhciBfb3B0aW9ucyRwdXNoNTtvcHRpb25zLnB1c2goKF9vcHRpb25zJHB1c2g1PXt9LF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoNSxQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEUsUGFnaW5hdGlvbi5jb250cm9sLkxBU1QpLF9kZWZpbmVQcm9wZXJ0eShfb3B0aW9ucyRwdXNoNSwnY2hpbGRyZW4nLHRoaXMucHJvcHMuanVtcFRvTGFzdFBhZ2VDb250cm9sQ29udGVudCksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2g1LCdjbGFzc05hbWUnLCdiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1sYXN0JyksX2RlZmluZVByb3BlcnR5KF9vcHRpb25zJHB1c2g1LCdkaXNhYmxlZCcsY3VycmVudFBhZ2U9PT10b3RhbFBhZ2VzKSxfb3B0aW9ucyRwdXNoNSkpO31pZih0aGlzLnByb3BzLmN1c3RvbUNvbnRyb2xDb250ZW50KXtvcHRpb25zLnB1c2goe2NoaWxkcmVuOnRoaXMucHJvcHMuY3VzdG9tQ29udHJvbENvbnRlbnQsY2xhc3NOYW1lOidiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1jdXN0b20nLGRpc2FibGVkOnRydWV9KTt9cmV0dXJuIG9wdGlvbnM7fX0se2tleTonZ2VuZXJhdGVJdGVtcycsdmFsdWU6ZnVuY3Rpb24gZ2VuZXJhdGVJdGVtcygpe3ZhciBpdGVtcz1bXTt2YXIgZmlyc3RJbmRleD10aGlzLmZpcnN0VmlzaWJsZUl0ZW1JbmRleCgpO3ZhciBsYXN0SW5kZXg9TWF0aC5taW4odGhpcy5wcm9wcy50b3RhbEl0ZW1zLGZpcnN0SW5kZXgrdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpLTE7Zm9yKHZhciBpPWZpcnN0SW5kZXg7aTw9bGFzdEluZGV4O2krPTEpe2l0ZW1zLnB1c2godGhpcy5wcm9wcy5nZXRJdGVtKGkpKTt9cmV0dXJuIGl0ZW1zO319LHtrZXk6J3JlbmRlckl0ZW1zJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJJdGVtcygpe3ZhciBfdGhpczM9dGhpczt2YXIgcHJvcHM9dGhpcy5wcm9wcy5pdGVtV3JhcHBlclByb3BzO3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30scHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1wYWdpbmF0aW9uLWl0ZW1zJyxwcm9wcy5jbGFzc05hbWUpfSksdGhpcy5nZW5lcmF0ZUl0ZW1zKCkubWFwKGZ1bmN0aW9uKGl0ZW0saW5kZXgpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX2FzeW5jX19bXCJhXCIgLyogZGVmYXVsdCAqL10se3JlZjppbmRleD09PTA/J2l0ZW1fMCc6bnVsbCxrZXk6aW5kZXgsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXBhZ2luYXRpb24taXRlbScseydiLXBhZ2luYXRpb24taXRlbS1ldmVuJzppbmRleCUyPT09MCwnYi1wYWdpbmF0aW9uLWl0ZW0tb2RkJzppbmRleCUyIT09MH0pLCdkYXRhLXBhZ2luYXRpb24taW5kZXgnOl90aGlzMy5wcm9wcy5udW1JdGVtc1BlclBhZ2UqKF90aGlzMy5jdXJyZW50UGFnZSgpLTEpK2luZGV4LHBlbmRpbmdDb250ZW50Ol90aGlzMy5wcm9wcy5pdGVtTG9hZGluZ0NvbnRlbnR9LGl0ZW0gaW5zdGFuY2VvZiBQcm9taXNlP2l0ZW0udGhlbihfdGhpczMuaGFuZGxlSXRlbVByb21pc2VGdWxmaWxsbWVudCxfdGhpczMuaGFuZGxlSXRlbVByb21pc2VGdWxmaWxsbWVudCk6X3RoaXMzLnByb3BzLml0ZW1Ub0pTWENvbnZlcnRlcihpdGVtKSk7fSkpO319LHtrZXk6J3JlbmRlckNvbnRyb2xzJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJDb250cm9scyhwb3NpdGlvbil7dmFyIF9jeDtpZih0aGlzLnByb3BzLmhpZGVQYWdlcklmTm90TmVlZGVkJiZ0aGlzLnByb3BzLnRvdGFsSXRlbXM8PXRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlKXtyZXR1cm47fXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3NlZ21lbnRlZF9jb250cm9sX19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30sdGhpcy5wcm9wcy5jb250cm9sV3JhcHBlclByb3BzLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcGFnaW5hdGlvbi1jb250cm9scycsdGhpcy5wcm9wcy5jb250cm9sV3JhcHBlclByb3BzLmNsYXNzTmFtZSwoX2N4PXt9LF9kZWZpbmVQcm9wZXJ0eShfY3gsJ2ItcGFnaW5hdGlvbi1jb250cm9scy1hYm92ZScscG9zaXRpb249PT1QYWdpbmF0aW9uLnBvc2l0aW9uLkFCT1ZFKSxfZGVmaW5lUHJvcGVydHkoX2N4LCdiLXBhZ2luYXRpb24tY29udHJvbHMtYmVsb3cnLHBvc2l0aW9uPT09UGFnaW5hdGlvbi5wb3NpdGlvbi5CRUxPVyksX2N4KSksb3B0aW9uczp0aGlzLmdlbmVyYXRlQ29udHJvbHMoKSxvbk9wdGlvblNlbGVjdGVkOnRoaXMuaGFuZGxlUGFnZVNlbGVjdGVkfSkpO319LHtrZXk6J3JlbmRlclZpZXcnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlclZpZXcoKXt2YXIgcG9zaXRpb249dGhpcy5wcm9wcy5wb3NpdGlvbjt2YXIgcD1QYWdpbmF0aW9uLnBvc2l0aW9uO3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSgnZGl2Jyx7Y2xhc3NOYW1lOidiLXBhZ2luYXRpb24nfSxwb3NpdGlvbj09PXAuQUJPVkV8fHBvc2l0aW9uPT09cC5CT1RIP3RoaXMucmVuZGVyQ29udHJvbHMocC5BQk9WRSk6bnVsbCx0aGlzLnByb3BzLmJlZm9yZSx0aGlzLnJlbmRlckl0ZW1zKCksdGhpcy5wcm9wcy5hZnRlcixwb3NpdGlvbj09PXAuQkVMT1d8fHBvc2l0aW9uPT09cC5CT1RIP3RoaXMucmVuZGVyQ29udHJvbHMocC5CRUxPVyk6bnVsbCk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2RpdicsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsUGFnaW5hdGlvbi5pbnRlcm5hbEtleXMpLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcGFnaW5hdGlvbi13cmFwcGVyJyx0aGlzLnByb3BzLmNsYXNzTmFtZSl9KSx0aGlzLnJlbmRlclZpZXcoKSk7fX1dKTtyZXR1cm4gUGFnaW5hdGlvbjt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9fW1wiUHVyZUNvbXBvbmVudFwiXSk7UGFnaW5hdGlvbi5jb250cm9sPXtDVVNUT006X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9ib3VuZGxlc3NfdXRpbHNfdXVpZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSgpLEZJUlNUOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxMQVNUOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxORVhUOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxQUkVWSU9VUzpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCl9O1BhZ2luYXRpb24ucG9zaXRpb249e0FCT1ZFOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxCRUxPVzpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksQk9USDpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCl9O1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURT0nZGF0YS1wYWdlLWNvbnRyb2wnO1BhZ2luYXRpb24ucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55LGFmdGVyOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUsYmVmb3JlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUsY29udHJvbFdyYXBwZXJQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueX0pLGN1c3RvbUNvbnRyb2xDb250ZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUsZ2V0SXRlbTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLmlzUmVxdWlyZWQsaGlkZVBhZ2VySWZOb3ROZWVkZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxpZGVudGlmaWVyOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZy5pc1JlcXVpcmVkLGluaXRpYWxQYWdlOmZ1bmN0aW9uIHZhbGlkYXRlSW5pdGlhbFBhZ2UocHJvcHMpe2lmKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9sb2Rhc2hfaXNJbnRlZ2VyX19fZGVmYXVsdCgpKHByb3BzLmluaXRpYWxQYWdlKT09PWZhbHNlKXtyZXR1cm4gbmV3IEVycm9yKCdgaW5pdGlhbFBhZ2VgIG11c3QgYmUgYW4gaW50ZWdlci4nKTt9dmFyIG51bWJlck9mUGFnZXM9TWF0aC5jZWlsKHByb3BzLnRvdGFsSXRlbXMvcHJvcHMubnVtSXRlbXNQZXJQYWdlKTtpZihwcm9wcy5pbml0aWFsUGFnZTwxfHxwcm9wcy5pbml0aWFsUGFnZT5udW1iZXJPZlBhZ2VzKXtyZXR1cm4gbmV3IEVycm9yKCdgaW5pdGlhbFBhZ2VgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCAnK251bWJlck9mUGFnZXMrJy4nKTt9fSxpdGVtTG9hZGluZ0NvbnRlbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEubm9kZSxpdGVtVG9KU1hDb252ZXJ0ZXI6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxpdGVtV3JhcHBlclByb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55fSksanVtcFRvRmlyc3RQYWdlQ29udHJvbENvbnRlbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEubm9kZSxqdW1wVG9MYXN0UGFnZUNvbnRyb2xDb250ZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUsanVtcFRvTmV4dFBhZ2VDb250cm9sQ29udGVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ub2RlLGp1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2xDb250ZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUsbnVtSXRlbXNQZXJQYWdlOmZ1bmN0aW9uIHZhbGlkYXRlTnVtSXRlbXNQZXJQYWdlKHByb3BzKXtpZihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfbG9kYXNoX2lzSW50ZWdlcl9fX2RlZmF1bHQoKShwcm9wcy5udW1JdGVtc1BlclBhZ2UpPT09ZmFsc2Upe3JldHVybiBuZXcgRXJyb3IoJ2BudW1JdGVtc1BlclBhZ2VgIG11c3QgYmUgYW4gaW50ZWdlci4nKTt9ZWxzZSBpZihwcm9wcy5udW1JdGVtc1BlclBhZ2U8MSl7cmV0dXJuIG5ldyBFcnJvcignYG51bUl0ZW1zUGVyUGFnZWAgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4nKTt9fSxudW1QYWdlVG9nZ2xlczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIscG9zaXRpb246X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2YoW1BhZ2luYXRpb24ucG9zaXRpb24uQUJPVkUsUGFnaW5hdGlvbi5wb3NpdGlvbi5CRUxPVyxQYWdpbmF0aW9uLnBvc2l0aW9uLkJPVEhdKSxzaG93SnVtcFRvRmlyc3RQYWdlQ29udHJvbDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ib29sLHNob3dKdW1wVG9MYXN0UGFnZUNvbnRyb2w6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxzaG93SnVtcFRvTmV4dFBhZ2VDb250cm9sOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsc2hvd0p1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2w6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxzaG93UGFnaW5hdGlvblN0YXRlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jXSksdG90YWxJdGVtczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIuaXNSZXF1aXJlZH07UGFnaW5hdGlvbi5kZWZhdWx0UHJvcHM9e2FmdGVyOm51bGwsYmVmb3JlOm51bGwsY29udHJvbFdyYXBwZXJQcm9wczp7fSxjdXN0b21Db250cm9sQ29udGVudDpudWxsLGdldEl0ZW06bm9vcCxoaWRlUGFnZXJJZk5vdE5lZWRlZDpmYWxzZSxpZGVudGlmaWVyOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxpbml0aWFsUGFnZToxLGl0ZW1Mb2FkaW5nQ29udGVudDp1bmRlZmluZWQsaXRlbVRvSlNYQ29udmVydGVyOmlkZW50aXR5LGl0ZW1XcmFwcGVyUHJvcHM6e30sanVtcFRvRmlyc3RQYWdlQ29udHJvbENvbnRlbnQ6J+KHpCcsanVtcFRvTGFzdFBhZ2VDb250cm9sQ29udGVudDon4oelJyxqdW1wVG9OZXh0UGFnZUNvbnRyb2xDb250ZW50OifihpInLGp1bXBUb1ByZXZpb3VzUGFnZUNvbnRyb2xDb250ZW50OifihpAnLG51bUl0ZW1zUGVyUGFnZToxMCxudW1QYWdlVG9nZ2xlczo1LHBvc2l0aW9uOlBhZ2luYXRpb24ucG9zaXRpb24uQUJPVkUsc2hvd0p1bXBUb0ZpcnN0UGFnZUNvbnRyb2w6dHJ1ZSxzaG93SnVtcFRvTGFzdFBhZ2VDb250cm9sOnRydWUsc2hvd0p1bXBUb05leHRQYWdlQ29udHJvbDp0cnVlLHNob3dKdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sOnRydWUsc2hvd1BhZ2luYXRpb25TdGF0ZTp0cnVlLHRvdGFsSXRlbXM6bnVsbH07UGFnaW5hdGlvbi5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoUGFnaW5hdGlvbi5kZWZhdWx0UHJvcHMpOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoUGFnaW5hdGlvbik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciByb290PV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanNcIik7dmFyIF9TeW1ib2w9cm9vdC5TeW1ib2w7bW9kdWxlLmV4cG9ydHM9X1N5bWJvbDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfU3ltYm9sPV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qc1wiKSxnZXRSYXdUYWc9X193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzXCIpLG9iamVjdFRvU3RyaW5nPV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzXCIpO3ZhciBudWxsVGFnPSdbb2JqZWN0IE51bGxdJyx1bmRlZmluZWRUYWc9J1tvYmplY3QgVW5kZWZpbmVkXSc7dmFyIHN5bVRvU3RyaW5nVGFnPV9TeW1ib2w/X1N5bWJvbC50b1N0cmluZ1RhZzp1bmRlZmluZWQ7ZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSl7aWYodmFsdWU9PW51bGwpe3JldHVybiB2YWx1ZT09PXVuZGVmaW5lZD91bmRlZmluZWRUYWc6bnVsbFRhZzt9cmV0dXJuIHN5bVRvU3RyaW5nVGFnJiZzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpP2dldFJhd1RhZyh2YWx1ZSk6b2JqZWN0VG9TdHJpbmcodmFsdWUpO31tb2R1bGUuZXhwb3J0cz1iYXNlR2V0VGFnO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge3ZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTt2YXIgZnJlZUdsb2JhbD0odHlwZW9mIGdsb2JhbD09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YoZ2xvYmFsKSk9PSdvYmplY3QnJiZnbG9iYWwmJmdsb2JhbC5PYmplY3Q9PT1PYmplY3QmJmdsb2JhbDttb2R1bGUuZXhwb3J0cz1mcmVlR2xvYmFsO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9TeW1ib2w9X193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzXCIpO3ZhciBvYmplY3RQcm90bz1PYmplY3QucHJvdG90eXBlO3ZhciBoYXNPd25Qcm9wZXJ0eT1vYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTt2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmc9b2JqZWN0UHJvdG8udG9TdHJpbmc7dmFyIHN5bVRvU3RyaW5nVGFnPV9TeW1ib2w/X1N5bWJvbC50b1N0cmluZ1RhZzp1bmRlZmluZWQ7ZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKXt2YXIgaXNPd249aGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSxzeW1Ub1N0cmluZ1RhZyksdGFnPXZhbHVlW3N5bVRvU3RyaW5nVGFnXTt0cnl7dmFsdWVbc3ltVG9TdHJpbmdUYWddPXVuZGVmaW5lZDt2YXIgdW5tYXNrZWQ9dHJ1ZTt9Y2F0Y2goZSl7fXZhciByZXN1bHQ9bmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7aWYodW5tYXNrZWQpe2lmKGlzT3duKXt2YWx1ZVtzeW1Ub1N0cmluZ1RhZ109dGFnO31lbHNle2RlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107fX1yZXR1cm4gcmVzdWx0O31tb2R1bGUuZXhwb3J0cz1nZXRSYXdUYWc7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIG9iamVjdFByb3RvPU9iamVjdC5wcm90b3R5cGU7dmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nPW9iamVjdFByb3RvLnRvU3RyaW5nO2Z1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKXtyZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7fW1vZHVsZS5leHBvcnRzPW9iamVjdFRvU3RyaW5nO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O3ZhciBmcmVlR2xvYmFsPV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanNcIik7dmFyIGZyZWVTZWxmPSh0eXBlb2Ygc2VsZj09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2Yoc2VsZikpPT0nb2JqZWN0JyYmc2VsZiYmc2VsZi5PYmplY3Q9PT1PYmplY3QmJnNlbGY7dmFyIHJvb3Q9ZnJlZUdsb2JhbHx8ZnJlZVNlbGZ8fEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7bW9kdWxlLmV4cG9ydHM9cm9vdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzSW50ZWdlci5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9JbnRlZ2VyPV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9JbnRlZ2VyLmpzXCIpO2Z1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZT09J251bWJlcicmJnZhbHVlPT10b0ludGVnZXIodmFsdWUpO31tb2R1bGUuZXhwb3J0cz1pc0ludGVnZXI7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgX3R5cGVvZj10eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT09XCJzeW1ib2xcIj9mdW5jdGlvbihvYmope3JldHVybiB0eXBlb2Ygb2JqO306ZnVuY3Rpb24ob2JqKXtyZXR1cm4gb2JqJiZ0eXBlb2YgU3ltYm9sPT09XCJmdW5jdGlvblwiJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqO307ZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpe3ZhciB0eXBlPXR5cGVvZiB2YWx1ZT09PSd1bmRlZmluZWQnPyd1bmRlZmluZWQnOl90eXBlb2YodmFsdWUpO3JldHVybiB2YWx1ZSE9bnVsbCYmKHR5cGU9PSdvYmplY3QnfHx0eXBlPT0nZnVuY3Rpb24nKTt9bW9kdWxlLmV4cG9ydHM9aXNPYmplY3Q7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O2Z1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSl7cmV0dXJuIHZhbHVlIT1udWxsJiYodHlwZW9mIHZhbHVlPT09J3VuZGVmaW5lZCc/J3VuZGVmaW5lZCc6X3R5cGVvZih2YWx1ZSkpPT0nb2JqZWN0Jzt9bW9kdWxlLmV4cG9ydHM9aXNPYmplY3RMaWtlO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF90eXBlb2Y9dHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5pdGVyYXRvcj09PVwic3ltYm9sXCI/ZnVuY3Rpb24ob2JqKXtyZXR1cm4gdHlwZW9mIG9iajt9OmZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmdHlwZW9mIFN5bWJvbD09PVwiZnVuY3Rpb25cIiYmb2JqLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZvYmohPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIG9iajt9O3ZhciBiYXNlR2V0VGFnPV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanNcIiksaXNPYmplY3RMaWtlPV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzXCIpO3ZhciBzeW1ib2xUYWc9J1tvYmplY3QgU3ltYm9sXSc7ZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpe3JldHVybih0eXBlb2YgdmFsdWU9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKHZhbHVlKSk9PSdzeW1ib2wnfHxpc09iamVjdExpa2UodmFsdWUpJiZiYXNlR2V0VGFnKHZhbHVlKT09c3ltYm9sVGFnO31tb2R1bGUuZXhwb3J0cz1pc1N5bWJvbDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvRmluaXRlLmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB0b051bWJlcj1fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzXCIpO3ZhciBJTkZJTklUWT0xLzAsTUFYX0lOVEVHRVI9MS43OTc2OTMxMzQ4NjIzMTU3ZSszMDg7ZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpe2lmKCF2YWx1ZSl7cmV0dXJuIHZhbHVlPT09MD92YWx1ZTowO312YWx1ZT10b051bWJlcih2YWx1ZSk7aWYodmFsdWU9PT1JTkZJTklUWXx8dmFsdWU9PT0tSU5GSU5JVFkpe3ZhciBzaWduPXZhbHVlPDA/LTE6MTtyZXR1cm4gc2lnbipNQVhfSU5URUdFUjt9cmV0dXJuIHZhbHVlPT09dmFsdWU/dmFsdWU6MDt9bW9kdWxlLmV4cG9ydHM9dG9GaW5pdGU7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC90b0ludGVnZXIuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHRvRmluaXRlPV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9GaW5pdGUuanNcIik7ZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKXt2YXIgcmVzdWx0PXRvRmluaXRlKHZhbHVlKSxyZW1haW5kZXI9cmVzdWx0JTE7cmV0dXJuIHJlc3VsdD09PXJlc3VsdD9yZW1haW5kZXI/cmVzdWx0LXJlbWFpbmRlcjpyZXN1bHQ6MDt9bW9kdWxlLmV4cG9ydHM9dG9JbnRlZ2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGlzT2JqZWN0PV9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanNcIiksaXNTeW1ib2w9X193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qc1wiKTt2YXIgTkFOPTAvMDt2YXIgcmVUcmltPS9eXFxzK3xcXHMrJC9nO3ZhciByZUlzQmFkSGV4PS9eWy0rXTB4WzAtOWEtZl0rJC9pO3ZhciByZUlzQmluYXJ5PS9eMGJbMDFdKyQvaTt2YXIgcmVJc09jdGFsPS9eMG9bMC03XSskL2k7dmFyIGZyZWVQYXJzZUludD1wYXJzZUludDtmdW5jdGlvbiB0b051bWJlcih2YWx1ZSl7aWYodHlwZW9mIHZhbHVlPT0nbnVtYmVyJyl7cmV0dXJuIHZhbHVlO31pZihpc1N5bWJvbCh2YWx1ZSkpe3JldHVybiBOQU47fWlmKGlzT2JqZWN0KHZhbHVlKSl7dmFyIG90aGVyPXR5cGVvZiB2YWx1ZS52YWx1ZU9mPT0nZnVuY3Rpb24nP3ZhbHVlLnZhbHVlT2YoKTp2YWx1ZTt2YWx1ZT1pc09iamVjdChvdGhlcik/b3RoZXIrJyc6b3RoZXI7fWlmKHR5cGVvZiB2YWx1ZSE9J3N0cmluZycpe3JldHVybiB2YWx1ZT09PTA/dmFsdWU6K3ZhbHVlO312YWx1ZT12YWx1ZS5yZXBsYWNlKHJlVHJpbSwnJyk7dmFyIGlzQmluYXJ5PXJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7cmV0dXJuIGlzQmluYXJ5fHxyZUlzT2N0YWwudGVzdCh2YWx1ZSk/ZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLGlzQmluYXJ5PzI6OCk6cmVJc0JhZEhleC50ZXN0KHZhbHVlKT9OQU46K3ZhbHVlO31tb2R1bGUuZXhwb3J0cz10b051bWJlcjtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcG9wb3Zlci9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX2RpYWxvZ19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3BvcnRhbF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcnRhbC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfYm91bmRsZXNzX3V0aWxzX3RyYW5zZm9ybV9wcm9wZXJ0eV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eS9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9ZnVuY3Rpb24gZ2V0T3Bwb3NpdGVDYXJkaW5hbChkaXJlY3Rpb24pe3N3aXRjaChkaXJlY3Rpb25bMF0pe2Nhc2UnTic6cmV0dXJuJ1MnO2Nhc2UnUyc6cmV0dXJuJ04nO2Nhc2UnRSc6cmV0dXJuJ1cnO31yZXR1cm4nRSc7fWZ1bmN0aW9uIHdpdGhvdXQoYXJyMSxhcnIyKXtyZXR1cm4gYXJyMS5maWx0ZXIoZnVuY3Rpb24oaXRlbSl7cmV0dXJuIGFycjIuaW5kZXhPZihpdGVtKT09PS0xO30pO312YXIgQ0xBU1NfUkVNT1ZBTF9SRUdFWD0vXFxzP2ItcG9wb3Zlci0oYW5jaG9yfHNlbGYpLShzdGFydHxtaWRkbGV8ZW5kKS9nO3ZhciBERUZBVUxUX0NBUkVUX0NPTVBPTkVOVD1fX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSgnc3ZnJyx7dmlld0JveDonMCAwIDE0IDkuNScseG1sbnM6J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2cnLG51bGwsX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ3BvbHlnb24nLHtjbGFzc05hbWU6J2ItcG9wb3Zlci1jYXJldC1ib3JkZXInLGZpbGw6JyMwMDAnLHBvaW50czonNyAwIDE0IDEwIDAgMTAnfSksX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ3BvbHlnb24nLHtjbGFzc05hbWU6J2ItcG9wb3Zlci1jYXJldC1maWxsJyxmaWxsOicjRkZGJyxwb2ludHM6JzYuOTgyMzA0NDQgMS43NSAxMi43NSAxMCAxLjI1IDEwJ30pKSk7dmFyIFNUQVJUPTA7dmFyIE1JRERMRT0xO3ZhciBFTkQ9Mjt2YXIgY29tYmluYXRpb25zPVt7bmFtZTonTk5XJyxheDpTVEFSVCxheTpTVEFSVCxkeDpTVEFSVCxkeTpFTkR9LHtuYW1lOidOJyxheDpNSURETEUsYXk6U1RBUlQsZHg6TUlERExFLGR5OkVORH0se25hbWU6J05ORScsYXg6RU5ELGF5OlNUQVJULGR4OkVORCxkeTpFTkR9LHtuYW1lOidFTkUnLGF4OkVORCxheTpTVEFSVCxkeDpTVEFSVCxkeTpTVEFSVH0se25hbWU6J0UnLGF4OkVORCxheTpNSURETEUsZHg6U1RBUlQsZHk6TUlERExFfSx7bmFtZTonRVNFJyxheDpFTkQsYXk6RU5ELGR4OlNUQVJULGR5OkVORH0se25hbWU6J1NTRScsYXg6RU5ELGF5OkVORCxkeDpFTkQsZHk6U1RBUlR9LHtuYW1lOidTJyxheDpNSURETEUsYXk6RU5ELGR4Ok1JRERMRSxkeTpTVEFSVH0se25hbWU6J1NTVycsYXg6U1RBUlQsYXk6RU5ELGR4OlNUQVJULGR5OlNUQVJUfSx7bmFtZTonV1NXJyxheDpTVEFSVCxheTpFTkQsZHg6RU5ELGR5OkVORH0se25hbWU6J1cnLGF4OlNUQVJULGF5Ok1JRERMRSxkeDpFTkQsZHk6TUlERExFfSx7bmFtZTonV05XJyxheDpTVEFSVCxheTpTVEFSVCxkeDpFTkQsZHk6U1RBUlR9XTt2YXIgUG9wb3Zlcj1mdW5jdGlvbihfUHVyZUNvbXBvbmVudCl7X2luaGVyaXRzKFBvcG92ZXIsX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIFBvcG92ZXIoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxQb3BvdmVyKTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPVBvcG92ZXIuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoUG9wb3ZlcikpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLmFsaWduPWZ1bmN0aW9uKCl7dmFyIGFuY2hvcj1fdGhpcy5wcm9wcy5hbmNob3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudD9fdGhpcy5wcm9wcy5hbmNob3I6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fX1tcImZpbmRET01Ob2RlXCJdKShfdGhpcy5wcm9wcy5hbmNob3IpO3ZhciBjYXJldEFuY2hvcj1fdGhpcy5wcm9wcy5jYXJldEFuY2hvcj9fdGhpcy5wcm9wcy5jYXJldEFuY2hvciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50P190aGlzLnByb3BzLmNhcmV0QW5jaG9yOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX19bXCJmaW5kRE9NTm9kZVwiXSkoX3RoaXMucHJvcHMuY2FyZXRBbmNob3IpOmFuY2hvcjtfdGhpcy5jYWNoZVZpZXdwb3J0Q2FydG9ncmFwaHkoYW5jaG9yLGNhcmV0QW5jaG9yKTt2YXIgcHJlc2V0PV90aGlzLmdldFZhbGlkQWxpZ25tZW50UHJlc2V0KCk7dmFyIGZyYWc9UG9wb3Zlci5nZXRBbGlnbm1lbnRDbGFzc0ZyYWdtZW50O190aGlzLmRpYWxvZy4kd3JhcHBlci5jbGFzc05hbWU9X3RoaXMuZGlhbG9nLiR3cmFwcGVyLmNsYXNzTmFtZS5yZXBsYWNlKENMQVNTX1JFTU9WQUxfUkVHRVgsJycpKygnIGItcG9wb3Zlci1hbmNob3IteC0nK2ZyYWcocHJlc2V0LmF4KSkrKCcgYi1wb3BvdmVyLWFuY2hvci15LScrZnJhZyhwcmVzZXQuYXkpKSsoJyBiLXBvcG92ZXItc2VsZi14LScrZnJhZyhwcmVzZXQuZHgpKSsoJyBiLXBvcG92ZXItc2VsZi15LScrZnJhZyhwcmVzZXQuZHkpKTt2YXIgZHg9TWF0aC5yb3VuZChfdGhpcy5nZXROZXh0RGlhbG9nWFBvc2l0aW9uKHByZXNldCkpO3ZhciBkeT1NYXRoLnJvdW5kKF90aGlzLmdldE5leHREaWFsb2dZUG9zaXRpb24ocHJlc2V0KSk7X3RoaXMuZGlhbG9nLiR3cmFwcGVyLnN0eWxlW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19ib3VuZGxlc3NfdXRpbHNfdHJhbnNmb3JtX3Byb3BlcnR5X19bXCJhXCIgLyogZGVmYXVsdCAqL11dPSd0cmFuc2xhdGUoJytkeCsncHgsICcrZHkrJ3B4KSc7dmFyIGNhcmRpbmFsPXByZXNldC5uYW1lWzBdO3ZhciBsb25naXR1ZGluYWw9Y2FyZGluYWw9PT0nTid8fGNhcmRpbmFsPT09J1MnO190aGlzLiRjYXJldC5zdHlsZVtsb25naXR1ZGluYWw/J2xlZnQnOid0b3AnXT1NYXRoLnJvdW5kKF90aGlzLmdldE5leHRDYXJldFhQb3NpdGlvbihwcmVzZXQpKSsncHgnO190aGlzLiRjYXJldC5zdHlsZVtsb25naXR1ZGluYWw/J3RvcCc6J2xlZnQnXT0nMHB4Jzt9LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKFBvcG92ZXIsW3trZXk6J2NhY2hlVmlld3BvcnRDYXJ0b2dyYXBoeScsdmFsdWU6ZnVuY3Rpb24gY2FjaGVWaWV3cG9ydENhcnRvZ3JhcGh5KGFuY2hvcixjYXJldEFuY2hvcil7dmFyIGJvZHlSZWN0PWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dGhpcy5hbmNob3JSZWN0PWFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLmNhcmV0QW5jaG9yUmVjdD1jYXJldEFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt0aGlzLmJvZHlMZWZ0PWJvZHlSZWN0LmxlZnQqLTE7dGhpcy5ib2R5VG9wPWJvZHlSZWN0LnRvcCotMTt9fSx7a2V5OidnZXROZXh0Q2FyZXRYUG9zaXRpb24nLHZhbHVlOmZ1bmN0aW9uIGdldE5leHRDYXJldFhQb3NpdGlvbihfcmVmMil7dmFyIG5hbWU9X3JlZjIubmFtZSxheD1fcmVmMi5heCxkeD1fcmVmMi5keCxheT1fcmVmMi5heSxkeT1fcmVmMi5keTt2YXIgY2FyZXQ9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOnRoaXMuJGNhcmV0O3ZhciBuZXh0WD0wO2lmKG5hbWVbMF09PT0nTid8fG5hbWVbMF09PT0nUycpe25leHRYPXRoaXMuY2FyZXRBbmNob3JSZWN0LmxlZnQtdGhpcy5hbmNob3JSZWN0LmxlZnQrdGhpcy5jYXJldEFuY2hvclJlY3Qud2lkdGgvMjtpZihkeD09PU1JRERMRSl7bmV4dFgrPSh0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRXaWR0aC10aGlzLmFuY2hvclJlY3Qud2lkdGgpLzI7fWVsc2UgaWYoZHg9PT1FTkQpe25leHRYKz10aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRXaWR0aC10aGlzLmFuY2hvclJlY3Qud2lkdGg7fX1lbHNle25leHRYPXRoaXMuY2FyZXRBbmNob3JSZWN0LnRvcC10aGlzLmFuY2hvclJlY3QudG9wK3RoaXMuY2FyZXRBbmNob3JSZWN0LmhlaWdodC8yO2lmKGR5PT09TUlERExFKXtuZXh0WCs9KHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudEhlaWdodC10aGlzLmFuY2hvclJlY3QuaGVpZ2h0KS8yO31lbHNlIGlmKGR5PT09RU5EKXtuZXh0WCs9dGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50SGVpZ2h0LXRoaXMuYW5jaG9yUmVjdC5oZWlnaHQ7fX1uZXh0WC09Y2FyZXQuY2xpZW50V2lkdGgvMjtyZXR1cm4gbmV4dFg7fX0se2tleTonZ2V0TmV4dERpYWxvZ1hQb3NpdGlvbicsdmFsdWU6ZnVuY3Rpb24gZ2V0TmV4dERpYWxvZ1hQb3NpdGlvbihfcmVmMyl7dmFyIGF4PV9yZWYzLmF4LGR4PV9yZWYzLmR4O3ZhciBkaWFsb2c9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOnRoaXMuZGlhbG9nLiR3cmFwcGVyO3ZhciBuZXh0WD10aGlzLmFuY2hvclJlY3QubGVmdCt0aGlzLmJvZHlMZWZ0O3N3aXRjaChheCl7Y2FzZSBNSURETEU6bmV4dFgrPXRoaXMuYW5jaG9yUmVjdC53aWR0aC8yO2JyZWFrO2Nhc2UgRU5EOm5leHRYKz10aGlzLmFuY2hvclJlY3Qud2lkdGg7YnJlYWs7fXN3aXRjaChkeCl7Y2FzZSBNSURETEU6bmV4dFgtPWRpYWxvZy5jbGllbnRXaWR0aC8yO2JyZWFrO2Nhc2UgRU5EOm5leHRYLT1kaWFsb2cuY2xpZW50V2lkdGg7YnJlYWs7fXJldHVybiBuZXh0WDt9fSx7a2V5OidnZXROZXh0RGlhbG9nWVBvc2l0aW9uJyx2YWx1ZTpmdW5jdGlvbiBnZXROZXh0RGlhbG9nWVBvc2l0aW9uKF9yZWY0KXt2YXIgYXk9X3JlZjQuYXksZHk9X3JlZjQuZHk7dmFyIGRpYWxvZz1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06dGhpcy5kaWFsb2cuJHdyYXBwZXI7dmFyIG5leHRZPXRoaXMuYW5jaG9yUmVjdC50b3ArdGhpcy5ib2R5VG9wO3N3aXRjaChheSl7Y2FzZSBNSURETEU6bmV4dFkrPXRoaXMuYW5jaG9yUmVjdC5oZWlnaHQvMjticmVhaztjYXNlIEVORDpuZXh0WSs9dGhpcy5hbmNob3JSZWN0LmhlaWdodDticmVhazt9c3dpdGNoKGR5KXtjYXNlIE1JRERMRTpuZXh0WS09ZGlhbG9nLmNsaWVudEhlaWdodC8yO2JyZWFrO2Nhc2UgRU5EOm5leHRZLT1kaWFsb2cuY2xpZW50SGVpZ2h0O2JyZWFrO31yZXR1cm4gbmV4dFk7fX0se2tleTonaXNQb3NpdGlvblZhbGlkJyx2YWx1ZTpmdW5jdGlvbiBpc1Bvc2l0aW9uVmFsaWQoX3JlZjUscEhlaWdodCxwV2lkdGgpe3ZhciBuYW1lPV9yZWY1Lm5hbWUsYXg9X3JlZjUuYXgsYXk9X3JlZjUuYXksZHg9X3JlZjUuZHgsZHk9X3JlZjUuZHk7dmFyIGNhcmRpbmFsPW5hbWVbMF07aWYoY2FyZGluYWw9PT0nTid8fGNhcmRpbmFsPT09J1MnKXtpZihjYXJkaW5hbD09PSdOJyYmdGhpcy5hbmNob3JSZWN0LnRvcC1wSGVpZ2h0PDApe3JldHVybiBmYWxzZTt9ZWxzZSBpZihjYXJkaW5hbD09PSdTJyYmdGhpcy5hbmNob3JSZWN0LmJvdHRvbStwSGVpZ2h0PndpbmRvdy5pbm5lckhlaWdodCl7cmV0dXJuIGZhbHNlO31pZihheD09PVNUQVJUKXtyZXR1cm4hKHRoaXMuYW5jaG9yUmVjdC5sZWZ0K3BXaWR0aD53aW5kb3cuaW5uZXJXaWR0aHx8dGhpcy5hbmNob3JSZWN0LmxlZnQ8MCk7fWVsc2UgaWYoYXg9PT1NSURETEUpe3JldHVybiEodGhpcy5hbmNob3JSZWN0LmxlZnQtcFdpZHRoLzI8MHx8dGhpcy5hbmNob3JSZWN0LmxlZnQrcFdpZHRoLzI+d2luZG93LmlubmVyV2lkdGgpO31yZXR1cm4hKHRoaXMuYW5jaG9yUmVjdC5sZWZ0LXBXaWR0aDwwfHx0aGlzLmFuY2hvclJlY3QucmlnaHQ+d2luZG93LmlubmVyV2lkdGgpO31lbHNlIGlmKGNhcmRpbmFsPT09J1cnfHxjYXJkaW5hbD09PSdFJyl7aWYoY2FyZGluYWw9PT0nVycmJnRoaXMuYW5jaG9yUmVjdC5sZWZ0LXBXaWR0aDwwKXtyZXR1cm4gZmFsc2U7fWVsc2UgaWYoY2FyZGluYWw9PT0nRScmJnRoaXMuYW5jaG9yUmVjdC5yaWdodCtwV2lkdGg+d2luZG93LmlubmVyV2lkdGgpe3JldHVybiBmYWxzZTt9aWYoYXk9PT1TVEFSVCl7cmV0dXJuISh0aGlzLmFuY2hvclJlY3QudG9wK3BIZWlnaHQ+d2luZG93LmlubmVySGVpZ2h0fHx0aGlzLmFuY2hvclJlY3QudG9wPDApO31lbHNlIGlmKGF5PT09TUlERExFKXtyZXR1cm4hKHRoaXMuYW5jaG9yUmVjdC50b3ArdGhpcy5hbmNob3JSZWN0LmhlaWdodC8yLXBIZWlnaHQvMjwwfHx0aGlzLmFuY2hvclJlY3QudG9wK3RoaXMuYW5jaG9yUmVjdC5oZWlnaHQvMitwSGVpZ2h0LzI+d2luZG93LmlubmVySGVpZ2h0KTt9cmV0dXJuISh0aGlzLmFuY2hvclJlY3QudG9wLXBIZWlnaHQ8MHx8dGhpcy5hbmNob3JSZWN0LmJvdHRvbT53aW5kb3cuaW5uZXJIZWlnaHQpO31yZXR1cm4gdHJ1ZTt9fSx7a2V5OidnZXRWYWxpZEFsaWdubWVudFByZXNldCcsdmFsdWU6ZnVuY3Rpb24gZ2V0VmFsaWRBbGlnbm1lbnRQcmVzZXQoKXt2YXIgX3RoaXMyPXRoaXM7dmFyIHdpZHRoPXRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudFdpZHRoO3ZhciBoZWlnaHQ9dGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50SGVpZ2h0O3ZhciB2YWxpZENvbWJvcz1jb21iaW5hdGlvbnMuZmlsdGVyKGZ1bmN0aW9uKGNvbmZpZyl7cmV0dXJuIF90aGlzMi5pc1Bvc2l0aW9uVmFsaWQoY29uZmlnLGhlaWdodCx3aWR0aCk7fSk7aWYodmFsaWRDb21ib3MuaW5kZXhPZih0aGlzLnByb3BzLnByZXNldCkhPT0tMXx8IXRoaXMucHJvcHMuYXV0b1JlcG9zaXRpb258fCF2YWxpZENvbWJvcy5sZW5ndGgpe3JldHVybiB0aGlzLnByb3BzLnByZXNldDt9dmFyIGJlc3RDb21ib3M9dmFsaWRDb21ib3MuZmlsdGVyKGZ1bmN0aW9uKF9yZWY2KXt2YXIgbmFtZT1fcmVmNi5uYW1lO3JldHVybiBuYW1lWzBdPT09X3RoaXMyLnByb3BzLnByZXNldC5uYW1lWzBdO30pO2lmKGJlc3RDb21ib3MubGVuZ3RoKXtyZXR1cm4gYmVzdENvbWJvc1swXTt9dmFyIG9wcG9zaXRlQ2FyZGluYWw9Z2V0T3Bwb3NpdGVDYXJkaW5hbCh0aGlzLnByb3BzLnByZXNldC5uYW1lKTt2YXIgb2theUNvbWJvcz12YWxpZENvbWJvcy5maWx0ZXIoZnVuY3Rpb24oX3JlZjcpe3ZhciBuYW1lPV9yZWY3Lm5hbWU7cmV0dXJuIG5hbWVbMF09PT1vcHBvc2l0ZUNhcmRpbmFsO30pO2lmKG9rYXlDb21ib3MubGVuZ3RoKXtyZXR1cm4gb2theUNvbWJvc1swXTt9cmV0dXJuIHZhbGlkQ29tYm9zWzBdO319LHtrZXk6J2NvbXBvbmVudERpZE1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpe3RoaXMuYWxpZ24oKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJyx0aGlzLmFsaWduLHRydWUpO319LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCl7dGhpcy5hbGlnbigpO319LHtrZXk6J2NvbXBvbmVudFdpbGxVbm1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLHRoaXMuYWxpZ24sdHJ1ZSk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXt2YXIgX3RoaXMzPXRoaXM7dmFyIHByb3BzPXRoaXMucHJvcHM7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfcG9ydGFsX19bXCJhXCIgLyogZGVmYXVsdCAqL10scHJvcHMucG9ydGFsUHJvcHMsX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIiAvKiBkZWZhdWx0ICovXSxfZXh0ZW5kcyh7fSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkocHJvcHMsUG9wb3Zlci5pbnRlcm5hbEtleXMpLHtyZWY6ZnVuY3Rpb24gcmVmKGluc3RhbmNlKXtyZXR1cm4gX3RoaXMzLmRpYWxvZz1pbnN0YW5jZTt9LGJlZm9yZTpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjbG9uZUVsZW1lbnRcIl0pKHByb3BzLmNhcmV0Q29tcG9uZW50LHtyZWY6ZnVuY3Rpb24gcmVmKG5vZGUpe3JldHVybiBfdGhpczMuJGNhcmV0PW5vZGU7fSxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcG9wb3Zlci1jYXJldCcscHJvcHMuY2FyZXRDb21wb25lbnQucHJvcHMuY2xhc3NOYW1lKX0pLGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1wb3BvdmVyJyxwcm9wcy5jbGFzc05hbWUpfSkpKTt9fV0sW3trZXk6J2dldEFsaWdubWVudENsYXNzRnJhZ21lbnQnLHZhbHVlOmZ1bmN0aW9uIGdldEFsaWdubWVudENsYXNzRnJhZ21lbnQoY29uc3RhbnQpe3N3aXRjaChjb25zdGFudCl7Y2FzZSBTVEFSVDpyZXR1cm4nc3RhcnQnO2Nhc2UgTUlERExFOnJldHVybidtaWRkbGUnO2Nhc2UgRU5EOnJldHVybidlbmQnO319fV0pO3JldHVybiBQb3BvdmVyO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJQdXJlQ29tcG9uZW50XCJdKTtQb3BvdmVyLnByZXNldD1jb21iaW5hdGlvbnMucmVkdWNlKGZ1bmN0aW9uKG1hcCxkZWYpe3JldHVybiBtYXBbZGVmLm5hbWVdPWRlZixtYXA7fSx7fSk7UG9wb3Zlci5wcm9wVHlwZXM9X2V4dGVuZHMoe30sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5wcm9wVHlwZXMse2FuY2hvcjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmluc3RhbmNlT2YoSFRNTEVsZW1lbnQpLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnNoYXBlKHtwcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vYmplY3R9KV0pLmlzUmVxdWlyZWQsYXV0b1JlcG9zaXRpb246X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxjYXJldEFuY2hvcjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmluc3RhbmNlT2YoSFRNTEVsZW1lbnQpLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnNoYXBlKHtwcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vYmplY3R9KV0pLGNhcmV0Q29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmVsZW1lbnQscG9ydGFsUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc2hhcGUoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc19wb3J0YWxfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5Qcm9wVHlwZXMpLHByZXNldDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZihbUG9wb3Zlci5wcmVzZXQuTk5XLFBvcG92ZXIucHJlc2V0Lk4sUG9wb3Zlci5wcmVzZXQuTk5FLFBvcG92ZXIucHJlc2V0LkVORSxQb3BvdmVyLnByZXNldC5FLFBvcG92ZXIucHJlc2V0LkVTRSxQb3BvdmVyLnByZXNldC5TU0UsUG9wb3Zlci5wcmVzZXQuUyxQb3BvdmVyLnByZXNldC5TU1csUG9wb3Zlci5wcmVzZXQuV1NXLFBvcG92ZXIucHJlc2V0LlcsUG9wb3Zlci5wcmVzZXQuV05XXSl9KTtQb3BvdmVyLmRlZmF1bHRQcm9wcz1fZXh0ZW5kcyh7fSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX2RpYWxvZ19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmRlZmF1bHRQcm9wcyx7YW5jaG9yOnVuZGVmaW5lZCxhdXRvUmVwb3NpdGlvbjp0cnVlLGNhcHR1cmVGb2N1czpmYWxzZSxjYXJldEFuY2hvcjp1bmRlZmluZWQsY2FyZXRDb21wb25lbnQ6REVGQVVMVF9DQVJFVF9DT01QT05FTlQsY2xvc2VPbkVzY0tleTp0cnVlLGNsb3NlT25PdXRzaWRlQ2xpY2s6dHJ1ZSxjbG9zZU9uT3V0c2lkZVNjcm9sbDp0cnVlLHBvcnRhbFByb3BzOnt9LHByZXNldDpQb3BvdmVyLnByZXNldC5TfSk7UG9wb3Zlci5pbnRlcm5hbEtleXM9d2l0aG91dChPYmplY3Qua2V5cyhQb3BvdmVyLmRlZmF1bHRQcm9wcyksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19kaWFsb2dfX1tcImFcIiAvKiBkZWZhdWx0ICovXS5pbnRlcm5hbEtleXMpOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoUG9wb3Zlcik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXBvcnRhbC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtdXVpZC9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLGtleSx2YWx1ZSl7aWYoa2V5IGluIG9iail7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixrZXkse3ZhbHVlOnZhbHVlLGVudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTp0cnVlfSk7fWVsc2V7b2JqW2tleV09dmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgUG9ydGFsPWZ1bmN0aW9uKF9Db21wb25lbnQpe19pbmhlcml0cyhQb3J0YWwsX0NvbXBvbmVudCk7ZnVuY3Rpb24gUG9ydGFsKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsUG9ydGFsKTtmb3IodmFyIF9sZW49YXJndW1lbnRzLmxlbmd0aCxhcmdzPUFycmF5KF9sZW4pLF9rZXk9MDtfa2V5PF9sZW47X2tleSsrKXthcmdzW19rZXldPWFyZ3VtZW50c1tfa2V5XTt9cmV0dXJuIF9yZXQ9KF90ZW1wPShfdGhpcz1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChfcmVmPVBvcnRhbC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWwpKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfdGhpcy5pZD1fX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksX3RoaXMuJHBvcnRhbD1udWxsLF90aGlzLiRwYXNzZW5nZXI9bnVsbCxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhQb3J0YWwsW3trZXk6J2NvbXBvbmVudFdpbGxNb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCl7dGhpcy4kcG9ydGFsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO3RoaXMucHJvcHMuZGVzdGluYXRpb24uYXBwZW5kQ2hpbGQodGhpcy4kcG9ydGFsKTt0aGlzLnJlbmRlclBvcnRhbGxlZENvbnRlbnQoKTt9fSx7a2V5OidyZW5kZXJQb3J0YWxsZWRDb250ZW50Jyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJQb3J0YWxsZWRDb250ZW50KCl7dmFyIGNoaWxkPV9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImlzVmFsaWRFbGVtZW50XCJdKSh0aGlzLnByb3BzLmNoaWxkcmVuKT90aGlzLnByb3BzLmNoaWxkcmVuOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLG51bGwsdGhpcy5wcm9wcy5jaGlsZHJlbik7dGhpcy4kcG9ydGFsLmlkPXRoaXMucHJvcHMucG9ydGFsSWR8fHRoaXMuaWQ7X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9yZWFjdF9kb21fX1tcInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyXCJdKSh0aGlzLGNoaWxkLHRoaXMuJHBvcnRhbCk7dGhpcy4kcGFzc2VuZ2VyPXRoaXMuJHBvcnRhbC5jaGlsZHJlblswXTt9fSx7a2V5Oidjb21wb25lbnREaWRVcGRhdGUnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpe3RoaXMucmVuZGVyUG9ydGFsbGVkQ29udGVudCgpO319LHtrZXk6J2NvbXBvbmVudFdpbGxVbm1vdW50Jyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpe19fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfcmVhY3RfZG9tX19bXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlXCJdKSh0aGlzLiRwb3J0YWwpO3RoaXMucHJvcHMuZGVzdGluYXRpb24ucmVtb3ZlQ2hpbGQodGhpcy4kcG9ydGFsKTt9fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSgnc3BhbicsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsUG9ydGFsLmludGVybmFsS2V5cyksX2RlZmluZVByb3BlcnR5KHt9LFBvcnRhbC5QT1JUQUxfREFUQV9BVFRSSUJVVEUsdGhpcy5wcm9wcy5wb3J0YWxJZHx8dGhpcy5pZCkpKTt9fV0pO3JldHVybiBQb3J0YWw7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIkNvbXBvbmVudFwiXSk7UG9ydGFsLnByb3BUeXBlcz17JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueSxjaGlsZHJlbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ub2RlLGRlc3RpbmF0aW9uOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmluc3RhbmNlT2YoSFRNTEVsZW1lbnQpLHBvcnRhbElkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZ307UG9ydGFsLmRlZmF1bHRQcm9wcz17Y2hpbGRyZW46bnVsbCxkZXN0aW5hdGlvbjpkb2N1bWVudC5ib2R5LHBvcnRhbElkOm51bGx9O1BvcnRhbC5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoUG9ydGFsLmRlZmF1bHRQcm9wcyk7UG9ydGFsLlBPUlRBTF9EQVRBX0FUVFJJQlVURT0nZGF0YS1wb3J0YWwtaWQnOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoUG9ydGFsKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcHJvZ3Jlc3MvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2J1dHRvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWJ1dHRvbi9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLGtleSx2YWx1ZSl7aWYoa2V5IGluIG9iail7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixrZXkse3ZhbHVlOnZhbHVlLGVudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTp0cnVlfSk7fWVsc2V7b2JqW2tleV09dmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgUHJvZ3Jlc3M9ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhQcm9ncmVzcyxfUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gUHJvZ3Jlc3MoKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxQcm9ncmVzcyk7cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKFByb2dyZXNzLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKFByb2dyZXNzKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKTt9X2NyZWF0ZUNsYXNzKFByb2dyZXNzLFt7a2V5OidyZW5kZXJDYW5jZWwnLHZhbHVlOmZ1bmN0aW9uIHJlbmRlckNhbmNlbCgpe2lmKHRoaXMucHJvcHMub25DYW5jZWwpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2J1dHRvbl9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLF9leHRlbmRzKHt9LHRoaXMucHJvcHMuY2FuY2VsUHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1wcm9ncmVzcy1jYW5jZWwnLHRoaXMucHJvcHMuY2FuY2VsUHJvcHMuY2xhc3NOYW1lKSxjb21wb25lbnQ6dGhpcy5wcm9wcy5jYW5jZWxDb21wb25lbnQsb25QcmVzc2VkOnRoaXMucHJvcHMub25DYW5jZWx9KSk7fX19LHtrZXk6J3JlbmRlclByb2dyZXNzJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJQcm9ncmVzcygpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSh0aGlzLnByb3BzLnByb2dyZXNzQ29tcG9uZW50LF9leHRlbmRzKHt9LHRoaXMucHJvcHMucHJvZ3Jlc3NQcm9wcyx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXByb2dyZXNzJyx0aGlzLnByb3BzLnByb2dyZXNzUHJvcHMuY2xhc3NOYW1lLHsnYi1wcm9ncmVzcy1pbmRldGVybWluYXRlJzp0aGlzLnByb3BzLnByb2dyZXNzPT09dW5kZWZpbmVkfSkscm9sZToncHJlc2VudGF0aW9uJyxzdHlsZTpfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLnByb2dyZXNzUHJvcHMuc3R5bGUsX2RlZmluZVByb3BlcnR5KHt9LHRoaXMucHJvcHMudHdlZW5Qcm9wZXJ0eSx0aGlzLnByb3BzLnByb2dyZXNzKSl9KSk7fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsUHJvZ3Jlc3MuaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXByb2dyZXNzLXdyYXBwZXInLHRoaXMucHJvcHMuY2xhc3NOYW1lKSwnZGF0YS1wcm9ncmVzcyc6dGhpcy5wcm9wcy5wcm9ncmVzcyE9PXVuZGVmaW5lZD90aGlzLnByb3BzLnByb2dyZXNzOm51bGx9KSx0aGlzLnJlbmRlclByb2dyZXNzKCksdGhpcy5wcm9wcy5jaGlsZHJlbix0aGlzLnJlbmRlckNhbmNlbCgpKTt9fV0pO3JldHVybiBQcm9ncmVzczt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiUHVyZUNvbXBvbmVudFwiXSk7UHJvZ3Jlc3MucHJvcFR5cGVzPXsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55LGNhbmNlbENvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jXSksY2FuY2VsUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnl9KSxjb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLG9uQ2FuY2VsOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmMscHJvZ3Jlc3M6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEubnVtYmVyXSkscHJvZ3Jlc3NDb21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLHByb2dyZXNzUHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnl9KSx0d2VlblByb3BlcnR5Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZ307UHJvZ3Jlc3MuZGVmYXVsdFByb3BzPXtjYW5jZWxDb21wb25lbnQ6J2J1dHRvbicsY2FuY2VsUHJvcHM6e30sY29tcG9uZW50OidkaXYnLG9uQ2FuY2VsOm51bGwscHJvZ3Jlc3M6dW5kZWZpbmVkLHByb2dyZXNzQ29tcG9uZW50OidkaXYnLHByb2dyZXNzUHJvcHM6e30sdHdlZW5Qcm9wZXJ0eTond2lkdGgnfTtQcm9ncmVzcy5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoUHJvZ3Jlc3MuZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKFByb2dyZXNzKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtcHJvZ3Jlc3NpdmUtZGlzY2xvc3VyZS9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgaXNGdW5jdGlvbj1mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpe3JldHVybiB0eXBlb2YgeD09PSdmdW5jdGlvbic7fTt2YXIgbm9vcD1mdW5jdGlvbiBub29wKCl7fTt2YXIgUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlPWZ1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoUHJvZ3Jlc3NpdmVEaXNjbG9zdXJlLF9QdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBQcm9ncmVzc2l2ZURpc2Nsb3N1cmUoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxQcm9ncmVzc2l2ZURpc2Nsb3N1cmUpO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9UHJvZ3Jlc3NpdmVEaXNjbG9zdXJlLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKFByb2dyZXNzaXZlRGlzY2xvc3VyZSkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLnN0YXRlPXtleHBhbmRlZDpfdGhpcy5wcm9wcy5leHBhbmRlZH0sX3RoaXMuZmlyZVN0YXRlZnVsQ2FsbGJhY2s9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucHJvcHNbX3RoaXMuc3RhdGUuZXhwYW5kZWQ/J29uRXhwYW5kJzonb25IaWRlJ10oKTt9LF90aGlzLmhhbmRsZUNsaWNrPWZ1bmN0aW9uKGV2ZW50KXtfdGhpcy5zZXRTdGF0ZSh7ZXhwYW5kZWQ6IV90aGlzLnN0YXRlLmV4cGFuZGVkfSxfdGhpcy5maXJlU3RhdGVmdWxDYWxsYmFjayk7aWYoaXNGdW5jdGlvbihfdGhpcy5wcm9wcy50b2dnbGVQcm9wcy5vbkNsaWNrKSl7X3RoaXMucHJvcHMudG9nZ2xlUHJvcHMub25DbGljayhldmVudCk7fX0sX3RoaXMuaGFuZGxlS2V5RG93bj1mdW5jdGlvbihldmVudCl7aWYoZXZlbnQua2V5PT09J0VudGVyJyl7ZXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpcy5zZXRTdGF0ZSh7ZXhwYW5kZWQ6IV90aGlzLnN0YXRlLmV4cGFuZGVkfSxfdGhpcy5maXJlU3RhdGVmdWxDYWxsYmFjayk7fWlmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMudG9nZ2xlUHJvcHMub25LZXlEb3duKSl7X3RoaXMucHJvcHMudG9nZ2xlUHJvcHMub25LZXlEb3duKGV2ZW50KTt9fSxfdGVtcCksX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsX3JldCk7fV9jcmVhdGVDbGFzcyhQcm9ncmVzc2l2ZURpc2Nsb3N1cmUsW3trZXk6J2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMpe2lmKG5ld1Byb3BzLmV4cGFuZGVkIT09dGhpcy5wcm9wcy5leHBhbmRlZCl7dGhpcy5zZXRTdGF0ZSh7ZXhwYW5kZWQ6bmV3UHJvcHMuZXhwYW5kZWR9LHRoaXMuZmlyZVN0YXRlZnVsQ2FsbGJhY2spO319fSx7a2V5OidyZW5kZXJDb250ZW50Jyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJDb250ZW50KCl7aWYodGhpcy5zdGF0ZS5leHBhbmRlZCl7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLHtjbGFzc05hbWU6J2ItZGlzY2xvc3VyZS1jb250ZW50J30saXNGdW5jdGlvbih0aGlzLnByb3BzLmNoaWxkcmVuKT90aGlzLnByb3BzLmNoaWxkcmVuKCk6dGhpcy5wcm9wcy5jaGlsZHJlbik7fX19LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKHRoaXMucHJvcHMuY29tcG9uZW50LF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLFByb2dyZXNzaXZlRGlzY2xvc3VyZS5pbnRlcm5hbEtleXMpLHtjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItZGlzY2xvc3VyZScsdGhpcy5wcm9wcy5jbGFzc05hbWUseydiLWRpc2Nsb3N1cmUtZXhwYW5kZWQnOnRoaXMuc3RhdGUuZXhwYW5kZWR9KX0pLF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKHRoaXMucHJvcHMudG9nZ2xlQ29tcG9uZW50LF9leHRlbmRzKHt9LHRoaXMucHJvcHMudG9nZ2xlUHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1kaXNjbG9zdXJlLXRvZ2dsZScsdGhpcy5wcm9wcy50b2dnbGVQcm9wcy5jbGFzc05hbWUpLG9uQ2xpY2s6dGhpcy5oYW5kbGVDbGljayxvbktleURvd246dGhpcy5oYW5kbGVLZXlEb3duLHRhYkluZGV4OicwJ30pLHRoaXMuc3RhdGUuZXhwYW5kZWQ/dGhpcy5wcm9wcy50b2dnbGVFeHBhbmRlZENvbnRlbnR8fHRoaXMucHJvcHMudG9nZ2xlQ29udGVudDp0aGlzLnByb3BzLnRvZ2dsZUNvbnRlbnQpLHRoaXMucmVuZGVyQ29udGVudCgpKTt9fV0pO3JldHVybiBQcm9ncmVzc2l2ZURpc2Nsb3N1cmU7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIlB1cmVDb21wb25lbnRcIl0pO1Byb2dyZXNzaXZlRGlzY2xvc3VyZS5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnksY2hpbGRyZW46X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ub2RlLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFycmF5T2YoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEubm9kZSksX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuY10pLGNvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsZXhwYW5kZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxvbkV4cGFuZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLG9uSGlkZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLHRvZ2dsZUNvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsdG9nZ2xlQ29udGVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ub2RlLHRvZ2dsZUV4cGFuZGVkQ29udGVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ub2RlLHRvZ2dsZVByb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55fSl9O1Byb2dyZXNzaXZlRGlzY2xvc3VyZS5kZWZhdWx0UHJvcHM9e2NoaWxkcmVuOm51bGwsY29tcG9uZW50OidkaXYnLGV4cGFuZGVkOmZhbHNlLG9uRXhwYW5kOm5vb3Asb25IaWRlOm5vb3AsdG9nZ2xlQ29tcG9uZW50OidkaXYnLHRvZ2dsZUNvbnRlbnQ6bnVsbCx0b2dnbGVFeHBhbmRlZENvbnRlbnQ6bnVsbCx0b2dnbGVQcm9wczp7fX07UHJvZ3Jlc3NpdmVEaXNjbG9zdXJlLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhQcm9ncmVzc2l2ZURpc2Nsb3N1cmUuZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKFByb2dyZXNzaXZlRGlzY2xvc3VyZSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXJhZGlvL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc191dGlsc191dWlkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtdXVpZC9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9dmFyIGlzRnVuY3Rpb249ZnVuY3Rpb24gaXNGdW5jdGlvbih4KXtyZXR1cm4gdHlwZW9mIHg9PT0nZnVuY3Rpb24nO307dmFyIFJhZGlvPWZ1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoUmFkaW8sX1B1cmVDb21wb25lbnQpO2Z1bmN0aW9uIFJhZGlvKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsUmFkaW8pO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9UmFkaW8uX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmFkaW8pKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfdGhpcy51dWlkPV9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSxfdGhpcy5oYW5kbGVDaGFuZ2U9ZnVuY3Rpb24oZXZlbnQpe2lmKGV2ZW50LnRhcmdldC5jaGVja2VkKXtfdGhpcy5wcm9wcy5vblNlbGVjdGVkKGV2ZW50LnRhcmdldC52YWx1ZSk7fWlmKGlzRnVuY3Rpb24oX3RoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZSkpe190aGlzLnByb3BzLmlucHV0UHJvcHMub25DaGFuZ2UoZXZlbnQpO319LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKFJhZGlvLFt7a2V5OidyZW5kZXJJbnB1dCcsdmFsdWU6ZnVuY3Rpb24gcmVuZGVySW5wdXQoKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2lucHV0JyxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmlucHV0UHJvcHMse3R5cGU6J3JhZGlvJyxpZDp0aGlzLnByb3BzLmlkfHx0aGlzLnByb3BzLmlucHV0UHJvcHMuaWR8fHRoaXMudXVpZCxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItcmFkaW8nLHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUseydiLXJhZGlvLXNlbGVjdGVkJzp0aGlzLnByb3BzLnNlbGVjdGVkfSksbmFtZTp0aGlzLnByb3BzLm5hbWUsdmFsdWU6dGhpcy5wcm9wcy52YWx1ZSxjaGVja2VkOnRoaXMucHJvcHMuc2VsZWN0ZWQsJ2FyaWEtY2hlY2tlZCc6U3RyaW5nKHRoaXMucHJvcHMuc2VsZWN0ZWQpLG9uQ2hhbmdlOnRoaXMuaGFuZGxlQ2hhbmdlfSkpO319LHtrZXk6J3JlbmRlckxhYmVsJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJMYWJlbCgpe2lmKHRoaXMucHJvcHMubGFiZWxDb250ZW50KXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2xhYmVsJyxfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmxhYmVsUHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1yYWRpby1sYWJlbCcsdGhpcy5wcm9wcy5sYWJlbFByb3BzLmNsYXNzTmFtZSksaHRtbEZvcjp0aGlzLnByb3BzLmlkfHx0aGlzLnByb3BzLmlucHV0UHJvcHMuaWR8fHRoaXMudXVpZH0pLHRoaXMucHJvcHMubGFiZWxDb250ZW50KTt9fX0se2tleToncmVuZGVyJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXIoKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkodGhpcy5wcm9wcy5jb21wb25lbnQsX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsUmFkaW8uaW50ZXJuYWxLZXlzKSx7Y2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXJhZGlvLXdyYXBwZXInLHRoaXMucHJvcHMuY2xhc3NOYW1lKX0pLHRoaXMucmVuZGVySW5wdXQoKSx0aGlzLnJlbmRlckxhYmVsKCkpO319XSk7cmV0dXJuIFJhZGlvO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJQdXJlQ29tcG9uZW50XCJdKTtSYWRpby5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnksY29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyxpbnB1dFByb3BzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55fSksbGFiZWxDb250ZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEubm9kZSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hcnJheU9mKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGUpXSksbGFiZWxQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueX0pLG5hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLmlzUmVxdWlyZWQsb25TZWxlY3RlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLHNlbGVjdGVkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmJvb2wsdmFsdWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc3RyaW5nLmlzUmVxdWlyZWR9O1JhZGlvLmRlZmF1bHRQcm9wcz17Y29tcG9uZW50OidkaXYnLGlucHV0UHJvcHM6e30sbGFiZWxDb250ZW50Om51bGwsbGFiZWxQcm9wczp7fSxuYW1lOicnLG9uU2VsZWN0ZWQ6ZnVuY3Rpb24gb25TZWxlY3RlZCgpe30sc2VsZWN0ZWQ6ZmFsc2UsdmFsdWU6Jyd9O1JhZGlvLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhSYWRpby5kZWZhdWx0UHJvcHMpOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoUmFkaW8pO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1zZWdtZW50ZWQtY29udHJvbC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy1hcnJvdy1rZXktbmF2aWdhdGlvbi9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX2J1dHRvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWJ1dHRvbi9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cy9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9ZnVuY3Rpb24gZmluZEluZGV4KGFycix0ZXN0KXt2YXIgZm91bmQ9dm9pZCAwO2Zvcih2YXIgaT0wLGxlbj1hcnIubGVuZ3RoO2k8bGVuO2krPTEpe2lmKHRlc3QoYXJyW2ldKSl7Zm91bmQ9aTticmVhazt9fXJldHVybiBmb3VuZDt9dmFyIFNlZ21lbnRlZENvbnRyb2w9ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhTZWdtZW50ZWRDb250cm9sLF9QdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBTZWdtZW50ZWRDb250cm9sKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsU2VnbWVudGVkQ29udHJvbCk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1TZWdtZW50ZWRDb250cm9sLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKFNlZ21lbnRlZENvbnRyb2wpKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfdGhpcy5zdGF0ZT17c2VsZWN0ZWRJbmRleDpudWxsfSxfdGhpcy5oYW5kbGVPcHRpb25TZWxlY3Rpb249ZnVuY3Rpb24oZXZlbnQpe3ZhciBpbmRleD1BcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuLGV2ZW50LnRhcmdldCk7aWYoX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCE9PWluZGV4KXtfdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDppbmRleH0sZnVuY3Rpb24oKXtfdGhpcy5wcm9wcy5vbk9wdGlvblNlbGVjdGVkKF90aGlzLnByb3BzLm9wdGlvbnNbX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF0sX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCk7fSk7fX0sX3RoaXMuZ2V0U2VsZWN0ZWRPcHRpb249ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucHJvcHMub3B0aW9uc1tfdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XTt9LF90aGlzLmdldFNlbGVjdGVkT3B0aW9uSW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleDt9LF90aGlzLnNlbGVjdE9wdGlvbj1mdW5jdGlvbihvcHRpb24pe3JldHVybiBfdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDpfdGhpcy5wcm9wcy5vcHRpb25zLmluZGV4T2Yob3B0aW9uKX0pO30sX3RoaXMuc2VsZWN0T3B0aW9uQnlLZXk9ZnVuY3Rpb24oayx2KXtyZXR1cm4gX3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkSW5kZXg6ZmluZEluZGV4KF90aGlzLnByb3BzLm9wdGlvbnMsZnVuY3Rpb24ob3B0aW9uKXtyZXR1cm4gb3B0aW9uW2tdPT09djt9KX0pO30sX3RoaXMuc2VsZWN0T3B0aW9uSW5kZXg9ZnVuY3Rpb24oaW5kZXgpe3JldHVybiBfdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDppbmRleH0pO30sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoU2VnbWVudGVkQ29udHJvbCxbe2tleTonaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4Jyx2YWx1ZTpmdW5jdGlvbiBpbmZlclNlbGVjdGVkT3B0aW9uSW5kZXgoKXt2YXIgcHJvcHM9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzBdOnRoaXMucHJvcHM7dmFyIHN0YXRlPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTp0aGlzLnN0YXRlO3JldHVybiBmaW5kSW5kZXgocHJvcHMub3B0aW9ucyxmdW5jdGlvbihvcHRpb24pe3JldHVybiBvcHRpb24ucHJlc3NlZDt9KXx8c3RhdGUuc2VsZWN0ZWRJbmRleDt9fSx7a2V5Oidjb21wb25lbnRXaWxsTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpe3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkSW5kZXg6dGhpcy5pbmZlclNlbGVjdGVkT3B0aW9uSW5kZXgoKXx8dGhpcy5wcm9wcy5kZWZhdWx0T3B0aW9uU2VsZWN0ZWRJbmRleH0pO319LHtrZXk6J2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKXtpZihuZXh0UHJvcHMub3B0aW9ucyE9PXRoaXMucHJvcHMub3B0aW9ucyl7dGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDp0aGlzLmluZmVyU2VsZWN0ZWRPcHRpb25JbmRleChuZXh0UHJvcHMpfSk7fX19LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIF90aGlzMj10aGlzO3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRoaXMucHJvcHMsU2VnbWVudGVkQ29udHJvbC5pbnRlcm5hbEtleXMpLHtyb2xlOidyYWRpb2dyb3VwJyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2Itc2VnbWVudGVkLWNvbnRyb2wnLHRoaXMucHJvcHMuY2xhc3NOYW1lKSxtb2RlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fX1tcImFcIiAvKiBkZWZhdWx0ICovXS5tb2RlLkhPUklaT05UQUx9KSx0aGlzLnByb3BzLm9wdGlvbnMubWFwKGZ1bmN0aW9uKHByb3BzLGluZGV4KXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19idXR0b25fX1tcImFcIiAvKiBkZWZhdWx0ICovXSxfZXh0ZW5kcyh7fSxwcm9wcyx7a2V5OnByb3BzLmtleXx8aW5kZXgsJ2FyaWEtY2hlY2tlZCc6aW5kZXg9PT1fdGhpczIuc3RhdGUuc2VsZWN0ZWRJbmRleCxjb21wb25lbnQ6cHJvcHMuY29tcG9uZW50fHxfdGhpczIucHJvcHMub3B0aW9uQ29tcG9uZW50LGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1zZWdtZW50ZWQtY29udHJvbC1vcHRpb24nLHByb3BzLmNsYXNzTmFtZSx7J2Itc2VnbWVudGVkLWNvbnRyb2wtb3B0aW9uLXNlbGVjdGVkJzppbmRleD09PV90aGlzMi5zdGF0ZS5zZWxlY3RlZEluZGV4fSksb25QcmVzc2VkOl90aGlzMi5oYW5kbGVPcHRpb25TZWxlY3Rpb24scHJlc3NlZDppbmRleD09PV90aGlzMi5zdGF0ZS5zZWxlY3RlZEluZGV4LHJvbGU6J3JhZGlvJ30pLHByb3BzLmNoaWxkcmVuKTt9KSk7fX1dKTtyZXR1cm4gU2VnbWVudGVkQ29udHJvbDt9KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiUHVyZUNvbXBvbmVudFwiXSk7U2VnbWVudGVkQ29udHJvbC5wcm9wVHlwZXM9eycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnksZGVmYXVsdE9wdGlvblNlbGVjdGVkSW5kZXg6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEubnVtYmVyLG9uT3B0aW9uU2VsZWN0ZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxvcHRpb25Db21wb25lbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zdHJpbmcsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuY10pLG9wdGlvbnM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYXJyYXlPZihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueSxjaGlsZHJlbjpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5ub2RlfSkpLmlzUmVxdWlyZWR9O1NlZ21lbnRlZENvbnRyb2wuZGVmYXVsdFByb3BzPXtkZWZhdWx0T3B0aW9uU2VsZWN0ZWRJbmRleDowLG9uT3B0aW9uU2VsZWN0ZWQ6ZnVuY3Rpb24gb25PcHRpb25TZWxlY3RlZCgpe30sb3B0aW9uQ29tcG9uZW50OididXR0b24nLG9wdGlvbnM6W119O1NlZ21lbnRlZENvbnRyb2wuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKFNlZ21lbnRlZENvbnRyb2wuZGVmYXVsdFByb3BzKTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKFNlZ21lbnRlZENvbnRyb2wpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy10b2tlbml6ZWQtaW5wdXQvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3R5cGVhaGVhZF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzXCIpO1xudmFyIF9leHRlbmRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHRhcmdldCl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIHNvdXJjZT1hcmd1bWVudHNbaV07Zm9yKHZhciBrZXkgaW4gc291cmNlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLGtleSkpe3RhcmdldFtrZXldPXNvdXJjZVtrZXldO319fXJldHVybiB0YXJnZXQ7fTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQscHJvcHMpe2Zvcih2YXIgaT0wO2k8cHJvcHMubGVuZ3RoO2krKyl7dmFyIGRlc2NyaXB0b3I9cHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlPWRlc2NyaXB0b3IuZW51bWVyYWJsZXx8ZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGU9dHJ1ZTtpZihcInZhbHVlXCJpbiBkZXNjcmlwdG9yKWRlc2NyaXB0b3Iud3JpdGFibGU9dHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpO319cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO307fSgpO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgZmlyc3Q9ZnVuY3Rpb24gZmlyc3QoYXJyYXkpe3JldHVybiBhcnJheVswXTt9O3ZhciBsYXN0PWZ1bmN0aW9uIGxhc3QoYXJyYXkpe3JldHVybiBhcnJheVthcnJheS5sZW5ndGgtMV07fTt2YXIgaXNGdW5jdGlvbj1mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpe3JldHVybiB0eXBlb2YgeD09PSdmdW5jdGlvbic7fTt2YXIgVG9rZW5pemVkSW5wdXQ9ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhUb2tlbml6ZWRJbnB1dCxfUHVyZUNvbXBvbmVudCk7ZnVuY3Rpb24gVG9rZW5pemVkSW5wdXQoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxUb2tlbml6ZWRJbnB1dCk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1Ub2tlbml6ZWRJbnB1dC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihUb2tlbml6ZWRJbnB1dCkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF90aGlzLmZvY3VzPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzLnJlZnMudHlwZWFoZWFkLmZvY3VzKCk7fSxfdGhpcy5nZXRJbnB1dE5vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucmVmcy50eXBlYWhlYWQuZ2V0SW5wdXROb2RlKCk7fSxfdGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucmVmcy50eXBlYWhlYWQuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KCk7fSxfdGhpcy5nZXRWYWx1ZT1mdW5jdGlvbigpe3JldHVybiBfdGhpcy5yZWZzLnR5cGVhaGVhZC5nZXRWYWx1ZSgpO30sX3RoaXMuc2VsZWN0PWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzLnJlZnMudHlwZWFoZWFkLnNlbGVjdCgpO30sX3RoaXMuc2V0VmFsdWU9ZnVuY3Rpb24odmFsdWUpe3JldHVybiBfdGhpcy5yZWZzLnR5cGVhaGVhZC5zZXRWYWx1ZSh2YWx1ZSk7fSxfdGhpcy5hZGQ9ZnVuY3Rpb24oaW5kZXgpe2lmKF90aGlzLnByb3BzLnRva2Vucy5pbmRleE9mKGluZGV4KT09PS0xKXtfdGhpcy5wcm9wcy5oYW5kbGVBZGRUb2tlbihpbmRleCk7fX0sX3RoaXMuaGFuZGxlSW5wdXRDbGljaz1mdW5jdGlvbihldmVudCl7X3RoaXMuY2xlYXJTZWxlY3Rpb24oKTtpZihpc0Z1bmN0aW9uKF90aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljaykpe190aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljayhldmVudCk7fX0sX3RoaXMuaGFuZGxlSW5wdXRGb2N1cz1mdW5jdGlvbihldmVudCl7X3RoaXMuY2xlYXJTZWxlY3Rpb24oKTtpZihpc0Z1bmN0aW9uKF90aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cykpe190aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cyhldmVudCk7fX0sX3RoaXMuaGFuZGxlS2V5RG93bj1mdW5jdGlvbihldmVudCl7c3dpdGNoKGV2ZW50LndoaWNoKXtjYXNlIDM3Ol90aGlzLnNlbGVjdFByZXZpb3VzVG9rZW4oZXZlbnQuc2hpZnRLZXkpO2JyZWFrO2Nhc2UgMzk6X3RoaXMuc2VsZWN0TmV4dFRva2VuKGV2ZW50LnNoaWZ0S2V5KTticmVhaztjYXNlIDg6aWYoX3RoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQubGVuZ3RoKXtfdGhpcy5yZW1vdmUoX3RoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQpO190aGlzLmZvY3VzKCk7fWJyZWFrO2Nhc2UgNjU6aWYoZXZlbnQubWV0YUtleSl7ZXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpcy5mb2N1cygpO190aGlzLnNlbGVjdCgpO190aGlzLl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbj10cnVlO190aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbihfdGhpcy5wcm9wcy50b2tlbnMpO319aWYoaXNGdW5jdGlvbihfdGhpcy5wcm9wcy5vbktleURvd24pKXtfdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO319LF90ZW1wKSxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyxfcmV0KTt9X2NyZWF0ZUNsYXNzKFRva2VuaXplZElucHV0LFt7a2V5Oidjb21wb25lbnREaWRVcGRhdGUnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpe3ZhciBwcmV2aW91c1NlbGVjdGVkSW5kZXhlcz1wcmV2UHJvcHMudG9rZW5zU2VsZWN0ZWQ7dmFyIGN1cnJlbnRTZWxlY3RlZEluZGV4ZXM9dGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZDtpZih0aGlzLnByb3BzLnRva2Vucy5sZW5ndGg+cHJldlByb3BzLnRva2Vucy5sZW5ndGgpe3RoaXMuc2V0VmFsdWUoJycpO31pZih0aGlzLl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbil7dGhpcy5fc3VwcHJlc3NOZXh0VG9rZW5TZWxlY3Rpb249ZmFsc2U7cmV0dXJuO31pZihwcmV2aW91c1NlbGVjdGVkSW5kZXhlcyE9PWN1cnJlbnRTZWxlY3RlZEluZGV4ZXMmJmN1cnJlbnRTZWxlY3RlZEluZGV4ZXMubGVuZ3RoIT09MCl7aWYoY3VycmVudFNlbGVjdGVkSW5kZXhlcy5sZW5ndGg9PT0xfHxjdXJyZW50U2VsZWN0ZWRJbmRleGVzWzBdIT09cHJldmlvdXNTZWxlY3RlZEluZGV4ZXNbMF0pe3JldHVybiB0aGlzLnJlZnNbJ3Rva2VuXycrY3VycmVudFNlbGVjdGVkSW5kZXhlc1swXV0uZm9jdXMoKTt9ZWxzZSBpZihsYXN0KGN1cnJlbnRTZWxlY3RlZEluZGV4ZXMpIT09bGFzdChwcmV2aW91c1NlbGVjdGVkSW5kZXhlcykpe3JldHVybiB0aGlzLnJlZnNbJ3Rva2VuXycrbGFzdChjdXJyZW50U2VsZWN0ZWRJbmRleGVzKV0uZm9jdXMoKTt9dGhpcy5yZWZzWyd0b2tlbl8nK2N1cnJlbnRTZWxlY3RlZEluZGV4ZXNbMF1dLmZvY3VzKCk7fX19LHtrZXk6J3JlbW92ZScsdmFsdWU6ZnVuY3Rpb24gcmVtb3ZlKGluZGV4KXt2YXIgX3RoaXMyPXRoaXM7dmFyIGluZGV4ZXM9KEFycmF5LmlzQXJyYXkoaW5kZXgpP2luZGV4OltpbmRleF0pLmZpbHRlcihmdW5jdGlvbihpZHgpe3JldHVybiBfdGhpczIucHJvcHMudG9rZW5zLmluZGV4T2YoaWR4KSE9PS0xO30pO2lmKGluZGV4ZXMubGVuZ3RoKXt0aGlzLnByb3BzLmhhbmRsZVJlbW92ZVRva2VucyhpbmRleGVzKTt9fX0se2tleTonc2VsZWN0VG9rZW4nLHZhbHVlOmZ1bmN0aW9uIHNlbGVjdFRva2VuKGluZGV4KXt0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbihbaW5kZXhdKTt9fSx7a2V5OidzZWxlY3RUb2tlbnMnLHZhbHVlOmZ1bmN0aW9uIHNlbGVjdFRva2VucyhpbmRleGVzKXt0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbihpbmRleGVzKTt9fSx7a2V5OidzZWxlY3RQcmV2aW91c1Rva2VuJyx2YWx1ZTpmdW5jdGlvbiBzZWxlY3RQcmV2aW91c1Rva2VuKGFwcGVuZCl7dmFyIHNlbGVjdGVkPXRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQ7dmFyIGluZGV4ZXM9dGhpcy5wcm9wcy50b2tlbnM7aWYoc2VsZWN0ZWQubGVuZ3RoPT09MSYmZmlyc3Qoc2VsZWN0ZWQpPT09Zmlyc3QoaW5kZXhlcykpe3JldHVybjt9aWYoc2VsZWN0ZWQubGVuZ3RoPT09MCl7dGhpcy5zZWxlY3RUb2tlbihsYXN0KGluZGV4ZXMpKTt9ZWxzZXt2YXIgcHJldmlvdXNUb2tlbj1pbmRleGVzW2luZGV4ZXMuaW5kZXhPZihmaXJzdChzZWxlY3RlZCkpLTFdO3RoaXMuc2VsZWN0VG9rZW5zKGFwcGVuZD9bcHJldmlvdXNUb2tlbl0uY29uY2F0KHNlbGVjdGVkKTpbcHJldmlvdXNUb2tlbl0pO319fSx7a2V5OidzZWxlY3ROZXh0VG9rZW4nLHZhbHVlOmZ1bmN0aW9uIHNlbGVjdE5leHRUb2tlbihhcHBlbmQpe3ZhciBzZWxlY3RlZD10aGlzLnByb3BzLnRva2Vuc1NlbGVjdGVkO3ZhciBpbmRleGVzPXRoaXMucHJvcHMudG9rZW5zO2lmKHNlbGVjdGVkLmxlbmd0aD09PTApe3JldHVybjt9aWYobGFzdChzZWxlY3RlZCk9PT1sYXN0KGluZGV4ZXMpKXt0aGlzLmNsZWFyU2VsZWN0aW9uKCk7dGhpcy5mb2N1cygpO31lbHNle3ZhciBuZXh0VG9rZW49aW5kZXhlc1tpbmRleGVzLmluZGV4T2YobGFzdChzZWxlY3RlZCkpKzFdO3RoaXMuc2VsZWN0VG9rZW5zKGFwcGVuZD9zZWxlY3RlZC5jb25jYXQobmV4dFRva2VuKTpbbmV4dFRva2VuXSk7fX19LHtrZXk6J2NsZWFyU2VsZWN0aW9uJyx2YWx1ZTpmdW5jdGlvbiBjbGVhclNlbGVjdGlvbigpe3RoaXMucHJvcHMuaGFuZGxlTmV3U2VsZWN0aW9uKFtdKTt9fSx7a2V5OidoYW5kbGVUb2tlbkNsb3NlQ2xpY2snLHZhbHVlOmZ1bmN0aW9uIGhhbmRsZVRva2VuQ2xvc2VDbGljayhpbmRleCxldmVudCl7ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7dGhpcy5yZW1vdmUoaW5kZXgpO3RoaXMuZm9jdXMoKTtpZih0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQucHJvcHMub25DbGljayl7dGhpcy5wcm9wcy50b2tlbkNsb3NlQ29tcG9uZW50LnByb3BzLm9uQ2xpY2soZXZlbnQpO319fSx7a2V5OidyZW5kZXJUb2tlbkNsb3NlJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJUb2tlbkNsb3NlKGluZGV4KXtpZih0aGlzLnByb3BzLnRva2VuQ2xvc2VWaXNpYmxlKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY2xvbmVFbGVtZW50XCJdKSh0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi10b2tlbmZpZWxkLXRva2VuLWNsb3NlJyx0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQucHJvcHMuY2xhc3NOYW1lKSxvbkNsaWNrOnRoaXMuaGFuZGxlVG9rZW5DbG9zZUNsaWNrLmJpbmQodGhpcyxpbmRleCl9KTt9fX0se2tleTonaGFuZGxlVG9rZW5LZXlEb3duJyx2YWx1ZTpmdW5jdGlvbiBoYW5kbGVUb2tlbktleURvd24oaW5kZXgsZXZlbnQpe3N3aXRjaChldmVudC53aGljaCl7Y2FzZSAxMzpjYXNlIDMyOnRoaXMuc2VsZWN0VG9rZW4oaW5kZXgpO2V2ZW50LnByZXZlbnREZWZhdWx0KCk7YnJlYWs7Y2FzZSA4OnRoaXMucmVtb3ZlKGluZGV4KTt0aGlzLmZvY3VzKCk7ZXZlbnQucHJldmVudERlZmF1bHQoKTticmVhazt9fX0se2tleToncmVuZGVyVG9rZW5zJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJUb2tlbnMoKXt2YXIgX3RoaXMzPXRoaXM7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLHtjbGFzc05hbWU6J2ItdG9rZW5maWVsZC10b2tlbnMnLHJvbGU6J2xpc3Rib3gnfSx0aGlzLnByb3BzLnRva2Vucy5tYXAoZnVuY3Rpb24oaW5kZXgpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSgnZGl2Jyx7cmVmOid0b2tlbl8nK2luZGV4LGtleTppbmRleCxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItdG9rZW5maWVsZC10b2tlbicseydiLXRva2VuZmllbGQtdG9rZW4tc2VsZWN0ZWQnOl90aGlzMy5wcm9wcy50b2tlbnNTZWxlY3RlZC5pbmRleE9mKGluZGV4KSE9PS0xfSksb25DbGljazpfdGhpczMuc2VsZWN0VG9rZW4uYmluZChfdGhpczMsaW5kZXgpLG9uS2V5RG93bjpfdGhpczMuaGFuZGxlVG9rZW5LZXlEb3duLmJpbmQoX3RoaXMzLGluZGV4KSxyb2xlOidvcHRpb24nLHRhYkluZGV4OicwJ30sX3RoaXMzLnByb3BzLmVudGl0aWVzW2luZGV4XS50ZXh0LF90aGlzMy5yZW5kZXJUb2tlbkNsb3NlKGluZGV4KSk7fSkpO319LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLFRva2VuaXplZElucHV0LmludGVybmFsS2V5cykse3JlZjond3JhcHBlcicsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXRva2VuZmllbGQtd3JhcHBlcicsdGhpcy5wcm9wcy5jbGFzc05hbWUpLG9uS2V5RG93bjp0aGlzLmhhbmRsZUtleURvd259KSx0aGlzLnJlbmRlclRva2VucygpLF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdHlwZWFoZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10sX2V4dGVuZHMoe30sX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfdXRpbHNfb2JqZWN0X2ludGVyc2VjdGlvbl9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh0aGlzLnByb3BzLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfdHlwZWFoZWFkX19bXCJhXCIgLyogZGVmYXVsdCAqL10uZGVmYXVsdFByb3BzKSx7cmVmOid0eXBlYWhlYWQnLGNsYXNzTmFtZTonYi10b2tlbmZpZWxkJyxjbGVhck9uU2VsZWN0aW9uOnRydWUsaW5wdXRQcm9wczpfZXh0ZW5kcyh7fSx0aGlzLnByb3BzLmlucHV0UHJvcHMse29uQ2xpY2s6dGhpcy5oYW5kbGVJbnB1dENsaWNrLG9uRm9jdXM6dGhpcy5oYW5kbGVJbnB1dEZvY3VzfSksb25FbnRpdHlTZWxlY3RlZDp0aGlzLmFkZH0pKSk7fX1dKTtyZXR1cm4gVG9rZW5pemVkSW5wdXQ7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIlB1cmVDb21wb25lbnRcIl0pO1Rva2VuaXplZElucHV0LnByb3BUeXBlcz1fZXh0ZW5kcyh7fSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3R5cGVhaGVhZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLnByb3BUeXBlcyx7aGFuZGxlQWRkVG9rZW46X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxoYW5kbGVSZW1vdmVUb2tlbnM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxoYW5kbGVOZXdTZWxlY3Rpb246X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyx0b2tlbkNsb3NlQ29tcG9uZW50Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmVsZW1lbnQsdG9rZW5DbG9zZVZpc2libGU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCx0b2tlbnM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYXJyYXlPZihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIpLHRva2Vuc1NlbGVjdGVkOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFycmF5T2YoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEubnVtYmVyKX0pO1Rva2VuaXplZElucHV0LmRlZmF1bHRQcm9wcz1fZXh0ZW5kcyh7fSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX3R5cGVhaGVhZF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmRlZmF1bHRQcm9wcyx7aGFuZGxlQWRkVG9rZW46ZnVuY3Rpb24gaGFuZGxlQWRkVG9rZW4oKXt9LGhhbmRsZVJlbW92ZVRva2VuczpmdW5jdGlvbiBoYW5kbGVSZW1vdmVUb2tlbnMoKXt9LGhhbmRsZU5ld1NlbGVjdGlvbjpmdW5jdGlvbiBoYW5kbGVOZXdTZWxlY3Rpb24oKXt9LHRva2VuQ2xvc2VDb21wb25lbnQ6X193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2RpdicsbnVsbCwnWCcpLHRva2VuQ2xvc2VWaXNpYmxlOnRydWUsdG9rZW5zOltdLHRva2Vuc1NlbGVjdGVkOltdfSk7VG9rZW5pemVkSW5wdXQuaW50ZXJuYWxLZXlzPU9iamVjdC5rZXlzKFRva2VuaXplZElucHV0LmRlZmF1bHRQcm9wcyk7LyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChUb2tlbml6ZWRJbnB1dCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19lc2NhcGVfc3RyaW5nX3JlZ2V4cF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9ub2RlX21vZHVsZXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX2VzY2FwZV9zdHJpbmdfcmVnZXhwX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfZXNjYXBlX3N0cmluZ19yZWdleHBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19pbnB1dF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLWlucHV0L2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb2JqZWN0X2ludGVyc2VjdGlvbl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9iamVjdC1pbnRlcnNlY3Rpb24vaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X2JvdW5kbGVzc191dGlsc191dWlkX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtdXVpZC9pbmRleC5qc1wiKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLGtleXMpe3ZhciB0YXJnZXQ9e307Zm9yKHZhciBpIGluIG9iail7aWYoa2V5cy5pbmRleE9mKGkpPj0wKWNvbnRpbnVlO2lmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLGkpKWNvbnRpbnVlO3RhcmdldFtpXT1vYmpbaV07fXJldHVybiB0YXJnZXQ7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIGNhbGwmJih0eXBlb2YgY2FsbD09PVwib2JqZWN0XCJ8fHR5cGVvZiBjYWxsPT09XCJmdW5jdGlvblwiKT9jYWxsOnNlbGY7fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcyxzdXBlckNsYXNzKXtpZih0eXBlb2Ygc3VwZXJDbGFzcyE9PVwiZnVuY3Rpb25cIiYmc3VwZXJDbGFzcyE9PW51bGwpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiBzdXBlckNsYXNzKTt9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzO312YXIgaXNGdW5jdGlvbj1mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpe3JldHVybiB0eXBlb2YgeD09PSdmdW5jdGlvbic7fTt2YXIgaXNTdHJpbmc9ZnVuY3Rpb24gaXNTdHJpbmcoeCl7cmV0dXJuIHR5cGVvZiB4PT09J3N0cmluZyc7fTt2YXIgbm9vcD1mdW5jdGlvbiBub29wKCl7fTt2YXIgVHlwZWFoZWFkPWZ1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoVHlwZWFoZWFkLF9QdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBUeXBlYWhlYWQoKXt2YXIgX3JlZjt2YXIgX3RlbXAsX3RoaXMsX3JldDtfY2xhc3NDYWxsQ2hlY2sodGhpcyxUeXBlYWhlYWQpO2Zvcih2YXIgX2xlbj1hcmd1bWVudHMubGVuZ3RoLGFyZ3M9QXJyYXkoX2xlbiksX2tleT0wO19rZXk8X2xlbjtfa2V5Kyspe2FyZ3NbX2tleV09YXJndW1lbnRzW19rZXldO31yZXR1cm4gX3JldD0oX3RlbXA9KF90aGlzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsKF9yZWY9VHlwZWFoZWFkLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKFR5cGVhaGVhZCkpLmNhbGwuYXBwbHkoX3JlZixbdGhpc10uY29uY2F0KGFyZ3MpKSksX3RoaXMpLF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyksX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoVHlwZWFoZWFkLFt7a2V5Oidjb21wb25lbnRXaWxsTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpe2lmKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZXx8dGhpcy5wcm9wcy5pbnB1dFByb3BzLmRlZmF1bHRWYWx1ZSl7dGhpcy5jb21wdXRlTWF0Y2hlcygpO319fSx7a2V5Oidjb21wb25lbnREaWRNb3VudCcsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKXt0aGlzLm1vdW50ZWQ9dHJ1ZTtpZih0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXg+PTApe3RoaXMucHJvcHMub25FbnRpdHlIaWdobGlnaHRlZCh0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpO319fSx7a2V5Oidjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyx2YWx1ZTpmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcyl7aWYobmV4dFByb3BzLmVudGl0aWVzIT09dGhpcy5wcm9wcy5lbnRpdGllcyl7dGhpcy5jb21wdXRlTWF0Y2hlcyhuZXh0UHJvcHMuZW50aXRpZXMpO31pZihuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSE9PXRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSl7dGhpcy51cGRhdGVJbnB1dFN0YXRlKG5leHRQcm9wcy5pbnB1dFByb3BzLnZhbHVlKTt0aGlzLmNvbXB1dGVNYXRjaGVzKCk7fX19LHtrZXk6J2NvbXBvbmVudERpZFVwZGF0ZScsdmFsdWU6ZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcyxwcmV2U3RhdGUpe2lmKHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLmxlbmd0aCYmIXByZXZTdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXMubGVuZ3RoKXt0aGlzLnJlZnMubWF0Y2hlcy5zY3JvbGxUb3A9MDt9aWYodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4Pj0wJiZ0aGlzLnByb3BzLmVudGl0aWVzW3RoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF0hPT1wcmV2UHJvcHMuZW50aXRpZXNbcHJldlN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXhdKXt0aGlzLnByb3BzLm9uRW50aXR5SGlnaGxpZ2h0ZWQodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KTt9fX0se2tleTonY29tcG9uZW50V2lsbFVubW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7dGhpcy5tb3VudGVkPWZhbHNlO319LHtrZXk6J2hhbmRsZU1hdGNoQ2xpY2snLHZhbHVlOmZ1bmN0aW9uIGhhbmRsZU1hdGNoQ2xpY2soaW5kZXgpe3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkRW50aXR5SW5kZXg6aW5kZXh9LHRoaXMuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkpO319LHtrZXk6J3NlbGVjdE1hdGNoJyx2YWx1ZTpmdW5jdGlvbiBzZWxlY3RNYXRjaChkZWx0YSl7dmFyIG1hdGNoZXM9dGhpcy5zdGF0ZS5lbnRpdHlNYXRjaEluZGV4ZXM7dmFyIHRvdGFsTWF0Y2hlcz1tYXRjaGVzLmxlbmd0aDt2YXIgbmV4dEluZGV4PW1hdGNoZXMuaW5kZXhPZih0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpK2RlbHRhO2lmKHRvdGFsTWF0Y2hlcyl7aWYobmV4dEluZGV4PDApe25leHRJbmRleD10b3RhbE1hdGNoZXMtMTt9ZWxzZSBpZihuZXh0SW5kZXg+PXRvdGFsTWF0Y2hlcyl7bmV4dEluZGV4PTA7fXZhciBtYXRjaEluZGV4PW1hdGNoZXNbbmV4dEluZGV4XTt2YXIgbWF0Y2hlc05vZGU9dGhpcy5yZWZzLm1hdGNoZXM7dmFyIG1hdGNoZXNOb2RlWUVuZD1tYXRjaGVzTm9kZS5zY3JvbGxUb3ArbWF0Y2hlc05vZGUuY2xpZW50SGVpZ2h0O3ZhciBtYXRjaE5vZGU9dGhpcy5yZWZzWydtYXRjaF8kJyttYXRjaEluZGV4XTt2YXIgbWF0Y2hOb2RlWVN0YXJ0PW1hdGNoTm9kZS5vZmZzZXRUb3A7dmFyIG1hdGNoTm9kZVlFbmQ9bWF0Y2hOb2RlWVN0YXJ0K21hdGNoTm9kZS5jbGllbnRIZWlnaHQ7aWYobWF0Y2hOb2RlWUVuZD49bWF0Y2hlc05vZGVZRW5kKXttYXRjaGVzTm9kZS5zY3JvbGxUb3ArPW1hdGNoTm9kZVlFbmQtbWF0Y2hlc05vZGVZRW5kO31lbHNlIGlmKG1hdGNoTm9kZVlTdGFydDw9bWF0Y2hlc05vZGUuc2Nyb2xsVG9wKXttYXRjaGVzTm9kZS5zY3JvbGxUb3A9bWF0Y2hOb2RlWVN0YXJ0O310aGlzLnNldFN0YXRlKHtzZWxlY3RlZEVudGl0eUluZGV4Om1hdGNoSW5kZXh9KTt9fX0se2tleTonY3Vyc29yQXRFbmRPZklucHV0Jyx2YWx1ZTpmdW5jdGlvbiBjdXJzb3JBdEVuZE9mSW5wdXQoKXt2YXIgbm9kZT10aGlzLmdldElucHV0Tm9kZSgpO3JldHVybiBub2RlLnNlbGVjdGlvblN0YXJ0PT09bm9kZS5zZWxlY3Rpb25FbmQmJm5vZGUuc2VsZWN0aW9uRW5kPT09dGhpcy5nZXRWYWx1ZSgpLmxlbmd0aDt9fSx7a2V5OidtYXJrRnV6enlNYXRjaFN1YnN0cmluZycsdmFsdWU6ZnVuY3Rpb24gbWFya0Z1enp5TWF0Y2hTdWJzdHJpbmcoaW5wdXQsZW50aXR5KXt2YXIgZW50aXR5Q29udGVudD1lbnRpdHkudGV4dDt2YXIgZnJhZ3M9ZW50aXR5Q29udGVudC5zcGxpdChuZXcgUmVnRXhwKCcoJytfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfZXNjYXBlX3N0cmluZ19yZWdleHBfX19kZWZhdWx0KCkoaW5wdXQpKycpJywnaWcnKSk7dmFyIG5vcm1hbGl6ZWRVc2VyVGV4dD1pbnB1dC50b0xvd2VyQ2FzZSgpO3ZhciB0aHJlc2hvbGQ9ZnJhZ3MubGVuZ3RoO3ZhciBpPS0xO3doaWxlKCsraTx0aHJlc2hvbGQpe2lmKGZyYWdzW2ldLnRvTG93ZXJDYXNlKCk9PT1ub3JtYWxpemVkVXNlclRleHQpe2ZyYWdzW2ldPV9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdtYXJrJyx7a2V5OmksY2xhc3NOYW1lOidiLXR5cGVhaGVhZC1tYXRjaC1oaWdobGlnaHQnfSxmcmFnc1tpXSk7fX1yZXR1cm4gZnJhZ3M7fX0se2tleTonbWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZycsdmFsdWU6ZnVuY3Rpb24gbWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZyhpbnB1dCxlbnRpdHkpe3ZhciBlbnRpdHlDb250ZW50PWVudGl0eS50ZXh0O3ZhciBzZWVrVmFsdWU9aW5wdXQudG9Mb3dlckNhc2UoKTt2YXIgaW5kZXhTdGFydD1lbnRpdHlDb250ZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWVrVmFsdWUpO3ZhciBpbmRleEVuZD1pbmRleFN0YXJ0K3NlZWtWYWx1ZS5sZW5ndGg7cmV0dXJuW19fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdzcGFuJyx7a2V5OicwJ30sZW50aXR5Q29udGVudC5zbGljZSgwLGluZGV4U3RhcnQpKSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSgnbWFyaycse2tleTonMScsY2xhc3NOYW1lOidiLXR5cGVhaGVhZC1tYXRjaC1oaWdobGlnaHQnfSxlbnRpdHlDb250ZW50LnNsaWNlKGluZGV4U3RhcnQsaW5kZXhFbmQpKSxfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKSgnc3Bhbicse2tleTonMid9LGVudGl0eUNvbnRlbnQuc2xpY2UoaW5kZXhFbmQpKV07fX0se2tleTonZ2V0TWFya2luZ0Z1bmN0aW9uJyx2YWx1ZTpmdW5jdGlvbiBnZXRNYXJraW5nRnVuY3Rpb24oKXtpZihpc1N0cmluZyh0aGlzLnByb3BzLmFsZ29yaXRobSkpe2lmKHRoaXMucHJvcHMuYWxnb3JpdGhtPT09VHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgpe3JldHVybiB0aGlzLm1hcmtTdGFydHNXaXRoTWF0Y2hTdWJzdHJpbmc7fXJldHVybiB0aGlzLm1hcmtGdXp6eU1hdGNoU3Vic3RyaW5nO31lbHNlIGlmKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5hbGdvcml0aG0ubWFya2VyKSl7cmV0dXJuIHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hcmtlcjt9aWYodGhpcy53YXJuZWRNYXJrZXI9PT11bmRlZmluZWQpe3RoaXMud2FybmVkTWFya2VyPXRydWU7Y29uc29sZS53YXJuKCdUeXBlYWhlYWQ6IG5vIGBwcm9wcy5hbGdvcml0aG0ubWFya2VyYCB3YXMgcHJvdmlkZWQ7IGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCBtYXJraW5nIGFsZ29yaXRobSAoRlVaWlkpLicpO31yZXR1cm4gdGhpcy5tYXJrRnV6enlNYXRjaFN1YnN0cmluZzt9fSx7a2V5OidnZXRGdXp6eU1hdGNoSW5kZXhlcycsdmFsdWU6ZnVuY3Rpb24gZ2V0RnV6enlNYXRjaEluZGV4ZXModXNlclRleHQsZW50aXRpZXMpe3ZhciBub3JtYWxpemVkPXVzZXJUZXh0LnRvTG93ZXJDYXNlKCk7cmV0dXJuIGVudGl0aWVzLnJlZHVjZShmdW5jdGlvbiBmaW5kSW5kZXhlcyhyZXN1bHQsZW50aXR5LGluZGV4KXtyZXR1cm4gZW50aXR5LnRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKG5vcm1hbGl6ZWQpIT09LTE/cmVzdWx0LnB1c2goaW5kZXgpJiZyZXN1bHQ6cmVzdWx0O30sW10pO319LHtrZXk6J2dldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXMnLHZhbHVlOmZ1bmN0aW9uIGdldFN0YXJ0c1dpdGhNYXRjaEluZGV4ZXModXNlclRleHQsZW50aXRpZXMpe3ZhciBzZWVrVmFsdWU9dXNlclRleHQudG9Mb3dlckNhc2UoKTtyZXR1cm4gZW50aXRpZXMucmVkdWNlKGZ1bmN0aW9uIHNlZWtNYXRjaChyZXN1bHRzLGVudGl0eSxpbmRleCl7aWYoZW50aXR5LnRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlZWtWYWx1ZSk9PT0wKXtyZXN1bHRzLnB1c2goaW5kZXgpO31yZXR1cm4gcmVzdWx0czt9LFtdKTt9fSx7a2V5OidnZXRNYXRjaGluZ0Z1bmN0aW9uJyx2YWx1ZTpmdW5jdGlvbiBnZXRNYXRjaGluZ0Z1bmN0aW9uKCl7aWYoaXNTdHJpbmcodGhpcy5wcm9wcy5hbGdvcml0aG0pKXtpZih0aGlzLnByb3BzLmFsZ29yaXRobT09PVR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRIKXtyZXR1cm4gdGhpcy5nZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzO31yZXR1cm4gdGhpcy5nZXRGdXp6eU1hdGNoSW5kZXhlczt9ZWxzZSBpZihpc0Z1bmN0aW9uKHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hdGNoZXIpKXtyZXR1cm4gdGhpcy5wcm9wcy5hbGdvcml0aG0ubWF0Y2hlcjt9aWYodGhpcy53YXJuZWRNYXRjaGVyPT09dW5kZWZpbmVkKXt0aGlzLndhcm5lZE1hdGNoZXI9dHJ1ZTtjb25zb2xlLndhcm4oJ1R5cGVhaGVhZDogbm8gYHByb3BzLmFsZ29yaXRobS5tYXRjaGVyYCB3YXMgcHJvdmlkZWQ7IGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCBtYXRjaGluZyBhbGdvcml0aG0gKEZVWlpZKS4nKTt9cmV0dXJuIHRoaXMuZ2V0RnV6enlNYXRjaEluZGV4ZXM7fX0se2tleTonY29tcHV0ZU1hdGNoZXMnLHZhbHVlOmZ1bmN0aW9uIGNvbXB1dGVNYXRjaGVzKHByb3ZpZGVkRW50aXRpZXMpe3ZhciBfdGhpczI9dGhpczt0aGlzLnNldFN0YXRlKGZ1bmN0aW9uKHN0YXRlLHByb3BzKXt2YXIgZW50aXRpZXM9cHJvdmlkZWRFbnRpdGllc3x8cHJvcHMuZW50aXRpZXM7dmFyIGN1cnJlbnRWYWx1ZT1zdGF0ZS5pbnB1dDt2YXIgbWF0Y2hlcz1jdXJyZW50VmFsdWU9PT0nJz9bXTpfdGhpczIuZ2V0TWF0Y2hJbmRleGVzKGN1cnJlbnRWYWx1ZSxlbnRpdGllcyk7cmV0dXJue3NlbGVjdGVkRW50aXR5SW5kZXg6bWF0Y2hlcy5sZW5ndGg/bWF0Y2hlc1swXTotMSxlbnRpdHlNYXRjaEluZGV4ZXM6bWF0Y2hlc307fSk7fX0se2tleToncmVuZGVyTm90aWZpY2F0aW9uJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJOb3RpZmljYXRpb24oKXtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoJ2Rpdicse3JlZjonYXJpYScsaWQ6dGhpcy5zdGF0ZS5pZCxjbGFzc05hbWU6dGhpcy5wcm9wcy5vZmZzY3JlZW5DbGFzcywnYXJpYS1saXZlJzoncG9saXRlJyxyb2xlOidzdGF0dXMnfSx0aGlzLmdldFNlbGVjdGVkRW50aXR5VGV4dCgpKTt9fSx7a2V5OidyZW5kZXJIaW50Jyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJIaW50KCl7aWYodGhpcy5wcm9wcy5oaW50KXt2YXIgdXNlclRleHQ9dGhpcy5zdGF0ZS5pbnB1dDt2YXIgcmF3PXRoaXMuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KCk7dmFyIHByb2Nlc3NlZD0nJztpZihyYXcmJnJhdy50b0xvd2VyQ2FzZSgpLmluZGV4T2YodXNlclRleHQudG9Mb3dlckNhc2UoKSk9PT0wKXtwcm9jZXNzZWQ9cmF3LnJlcGxhY2UobmV3IFJlZ0V4cCh1c2VyVGV4dCwnaScpLHVzZXJUZXh0KTt9cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLF9leHRlbmRzKHt9LHRoaXMucHJvcHMuaGludFByb3BzLHtyZWY6J2hpbnQnLGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi1pbnB1dCcsJ2ItaW5wdXQtcGxhY2Vob2xkZXInLCdiLXR5cGVhaGVhZC1oaW50Jyx0aGlzLnByb3BzLmhpbnRQcm9wcy5jbGFzc05hbWUpLHRhYkluZGV4OictMSd9KSxwcm9jZXNzZWQpO319fSx7a2V5OidyZW5kZXJNYXRjaGVzJyx2YWx1ZTpmdW5jdGlvbiByZW5kZXJNYXRjaGVzKCl7dmFyIF90aGlzMz10aGlzO2lmKHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLmxlbmd0aCl7dmFyIHByb3BzPXRoaXMucHJvcHMubWF0Y2hXcmFwcGVyUHJvcHM7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLF9leHRlbmRzKHt9LHByb3BzLHtyZWY6J21hdGNoZXMnLGNsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi10eXBlYWhlYWQtbWF0Y2gtd3JhcHBlcicscHJvcHMuY2xhc3NOYW1lKSxyb2xlOidsaXN0Ym94J30pLHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLm1hcChmdW5jdGlvbihpbmRleCl7dmFyIGVudGl0eT1fdGhpczMucHJvcHMuZW50aXRpZXNbaW5kZXhdO3ZhciBjbGFzc05hbWU9ZW50aXR5LmNsYXNzTmFtZSx0ZXh0PWVudGl0eS50ZXh0LHJlc3Q9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGVudGl0eSxbJ2NsYXNzTmFtZScsJ3RleHQnXSk7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLF9leHRlbmRzKHt9LHJlc3Qse3JlZjonbWF0Y2hfJCcraW5kZXgsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXR5cGVhaGVhZC1tYXRjaCcsY2xhc3NOYW1lLHsnYi10eXBlYWhlYWQtbWF0Y2gtc2VsZWN0ZWQnOl90aGlzMy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4PT09aW5kZXh9KSxrZXk6dGV4dCxvbkNsaWNrOl90aGlzMy5oYW5kbGVNYXRjaENsaWNrLmJpbmQoX3RoaXMzLGluZGV4KSxyb2xlOidvcHRpb24nfSksX3RoaXMzLm1hcmtNYXRjaFN1YnN0cmluZyhfdGhpczMuc3RhdGUuaW5wdXQsZW50aXR5KSk7fSkpO319fSx7a2V5OidyZW5kZXInLHZhbHVlOmZ1bmN0aW9uIHJlbmRlcigpe3ZhciBwcm9wcz10aGlzLnByb3BzLHN0YXRlPXRoaXMuc3RhdGU7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKCdkaXYnLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShwcm9wcyxUeXBlYWhlYWQuaW50ZXJuYWxLZXlzKSx7cmVmOid3cmFwcGVyJyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2ItdHlwZWFoZWFkLXdyYXBwZXInLHByb3BzLmNsYXNzTmFtZSksb25LZXlEb3duOnRoaXMuaGFuZGxlS2V5RG93bn0pLHRoaXMucmVuZGVyTm90aWZpY2F0aW9uKCksdGhpcy5yZW5kZXJIaW50KCksX193ZWJwYWNrX3JlcXVpcmVfXy5pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fW1wiY3JlYXRlRWxlbWVudFwiXSkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19pbnB1dF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLF9leHRlbmRzKHt9LF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29iamVjdF9pbnRlcnNlY3Rpb25fX1tcImFcIiAvKiBkZWZhdWx0ICovXSkocHJvcHMsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19pbnB1dF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmRlZmF1bHRQcm9wcykse3JlZjonaW5wdXQnLCdhcmlhLWNvbnRyb2xzJzpzdGF0ZS5pZCxpbnB1dFByb3BzOl9leHRlbmRzKHt9LHByb3BzLmlucHV0UHJvcHMse2NsYXNzTmFtZTpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQoKSgnYi10eXBlYWhlYWQnLHByb3BzLmlucHV0UHJvcHMuY2xhc3NOYW1lKSxvbkNoYW5nZTp0aGlzLmhhbmRsZUNoYW5nZX0pfSkpLHRoaXMucmVuZGVyTWF0Y2hlcygpKTt9fV0pO3JldHVybiBUeXBlYWhlYWQ7fShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcIlB1cmVDb21wb25lbnRcIl0pO1R5cGVhaGVhZC5tb2RlPXsnU1RBUlRTX1dJVEgnOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKSwnRlVaWlknOl9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfYm91bmRsZXNzX3V0aWxzX3V1aWRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoKX07VHlwZWFoZWFkLnByb3BUeXBlcz1fZXh0ZW5kcyh7fSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX2lucHV0X19bXCJhXCIgLyogZGVmYXVsdCAqL10ucHJvcFR5cGVzLHthbGdvcml0aG06X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZihbVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsVHlwZWFoZWFkLm1vZGUuRlVaWlldKSxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZSh7bWFya2VyOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm9uZU9mVHlwZShbX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuYyxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZihbVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsVHlwZWFoZWFkLm1vZGUuRlVaWlldKV0pLG1hdGNoZXI6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEub25lT2ZUeXBlKFtfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm9uZU9mKFtUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSCxUeXBlYWhlYWQubW9kZS5GVVpaWV0pXSl9KV0pLGNsZWFyT25TZWxlY3Rpb246X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxlbnRpdGllczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hcnJheU9mKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnNoYXBlKHt0ZXh0Ol9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZy5pc1JlcXVpcmVkfSkpLGhpbnQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYm9vbCxoaW50UHJvcHM6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuc2hhcGUoeycqJzpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hbnl9KSxtYXRjaFdyYXBwZXJQcm9wczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5zaGFwZSh7JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueX0pLG9mZnNjcmVlbkNsYXNzOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyxvbkNvbXBsZXRlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmZ1bmMsb25FbnRpdHlIaWdobGlnaHRlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLG9uRW50aXR5U2VsZWN0ZWQ6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuZnVuY30pO1R5cGVhaGVhZC5kZWZhdWx0UHJvcHM9X2V4dGVuZHMoe30sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19pbnB1dF9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmRlZmF1bHRQcm9wcyx7YWxnb3JpdGhtOlR5cGVhaGVhZC5tb2RlLkZVWlpZLGNsZWFyT25TZWxlY3Rpb246ZmFsc2UsZW50aXRpZXM6W10saGludDpudWxsLGhpbnRQcm9wczp7fSxtYXRjaFdyYXBwZXJQcm9wczp7fSxvZmZzY3JlZW5DbGFzczonYi1vZmZzY3JlZW4nLG9uQ29tcGxldGU6bm9vcCxvbkVudGl0eUhpZ2hsaWdodGVkOm5vb3Asb25FbnRpdHlTZWxlY3RlZDpub29wfSk7VHlwZWFoZWFkLmludGVybmFsS2V5cz1PYmplY3Qua2V5cyhUeXBlYWhlYWQuZGVmYXVsdFByb3BzKTt2YXIgX2luaXRpYWxpc2VQcm9wcz1mdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCl7dmFyIF90aGlzND10aGlzO3RoaXMuc3RhdGU9e2VudGl0eU1hdGNoSW5kZXhlczpbXSxpZDpfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X2JvdW5kbGVzc191dGlsc191dWlkX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKCksaXNDb250cm9sbGVkOmlzU3RyaW5nKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSksaW5wdXQ6dGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlfHx0aGlzLnByb3BzLmlucHV0UHJvcHMuZGVmYXVsdFZhbHVlfHwnJyxzZWxlY3RlZEVudGl0eUluZGV4Oi0xfTt0aGlzLm1vdW50ZWQ9ZmFsc2U7dGhpcy51cGRhdGVJbnB1dFN0YXRlPWZ1bmN0aW9uKCl7dmFyIHZhbHVlPWFyZ3VtZW50cy5sZW5ndGg+MCYmYXJndW1lbnRzWzBdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1swXTonJztyZXR1cm4gX3RoaXM0LnNldFN0YXRlKHtpbnB1dDp2YWx1ZX0pO307dGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQ9ZnVuY3Rpb24oKXt2YXIgZW50aXR5PV90aGlzNC5wcm9wcy5lbnRpdGllc1tfdGhpczQuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF07cmV0dXJuIGVudGl0eT9lbnRpdHkudGV4dDonJzt9O3RoaXMucmVzZXRNYXRjaGVzPWZ1bmN0aW9uKCl7aWYoX3RoaXM0Lm1vdW50ZWQpe190aGlzNC5zZXRTdGF0ZSh7c2VsZWN0ZWRFbnRpdHlJbmRleDotMSxlbnRpdHlNYXRjaEluZGV4ZXM6W119KTt9fTt0aGlzLmdldElucHV0Tm9kZT1mdW5jdGlvbigpe3JldHVybiBfdGhpczQucmVmcy5pbnB1dC5yZWZzLmZpZWxkO307dGhpcy5zZWxlY3Q9ZnVuY3Rpb24oKXt2YXIgaW5wdXQ9X3RoaXM0LmdldElucHV0Tm9kZSgpO2lucHV0LnNlbGVjdGlvblN0YXJ0PTA7aW5wdXQuc2VsZWN0aW9uRW5kPV90aGlzNC5nZXRWYWx1ZSgpLmxlbmd0aDt9O3RoaXMuZm9jdXM9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXM0LmdldElucHV0Tm9kZSgpLmZvY3VzKCk7fTt0aGlzLmdldFZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIF90aGlzNC5yZWZzLmlucHV0LmdldFZhbHVlKCk7fTt0aGlzLnNldFZhbHVlPWZ1bmN0aW9uKCl7dmFyIHZhbHVlPWFyZ3VtZW50cy5sZW5ndGg+MCYmYXJndW1lbnRzWzBdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1swXTonJztfdGhpczQucmVmcy5pbnB1dC5zZXRWYWx1ZSh2YWx1ZSk7X3RoaXM0LnVwZGF0ZUlucHV0U3RhdGUodmFsdWUpO190aGlzNC5yZXNldE1hdGNoZXMoKTtfdGhpczQuZm9jdXMoKTt9O3RoaXMuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHk9ZnVuY3Rpb24oKXtfdGhpczQucHJvcHMub25FbnRpdHlTZWxlY3RlZChfdGhpczQuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCk7aWYoX3RoaXM0LnByb3BzLmNsZWFyT25TZWxlY3Rpb24pe190aGlzNC5zZXRWYWx1ZSgnJyk7fWVsc2V7X3RoaXM0LnNldFZhbHVlKF90aGlzNC5nZXRTZWxlY3RlZEVudGl0eVRleHQoKSk7fXdpbmRvdy5zZXRUaW1lb3V0KF90aGlzNC5yZXNldE1hdGNoZXMsMCk7fTt0aGlzLm1hcmtNYXRjaFN1YnN0cmluZz1mdW5jdGlvbigpe3JldHVybiBfdGhpczQuZ2V0TWFya2luZ0Z1bmN0aW9uKCkuYXBwbHkodW5kZWZpbmVkLGFyZ3VtZW50cyk7fTt0aGlzLmdldE1hdGNoSW5kZXhlcz1mdW5jdGlvbigpe3JldHVybiBfdGhpczQuZ2V0TWF0Y2hpbmdGdW5jdGlvbigpLmFwcGx5KHVuZGVmaW5lZCxhcmd1bWVudHMpO307dGhpcy5oYW5kbGVDaGFuZ2U9ZnVuY3Rpb24oZXZlbnQpe2lmKF90aGlzNC5zdGF0ZS5pc0NvbnRyb2xsZWQ9PT1mYWxzZSl7X3RoaXM0LnVwZGF0ZUlucHV0U3RhdGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtfdGhpczQuY29tcHV0ZU1hdGNoZXMoKTt9aWYoaXNGdW5jdGlvbihfdGhpczQucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZSkpe190aGlzNC5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKGV2ZW50KTt9fTt0aGlzLmhhbmRsZUtleURvd249ZnVuY3Rpb24oZXZlbnQpe3N3aXRjaChldmVudC5rZXkpe2Nhc2UnQXJyb3dMZWZ0JzppZihldmVudC50YXJnZXQuc2VsZWN0aW9uU3RhcnQ+MSl7ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fWJyZWFrO2Nhc2UnVGFiJzpjYXNlJ0Fycm93UmlnaHQnOmlmKF90aGlzNC5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4IT09LTEmJl90aGlzNC5jdXJzb3JBdEVuZE9mSW5wdXQoKSYmX3RoaXM0LmdldElucHV0Tm9kZSgpPT09ZXZlbnQudGFyZ2V0JiYhZXZlbnQuc2hpZnRLZXkpe2V2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7X3RoaXM0LnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KCk7fWJyZWFrO2Nhc2UnQXJyb3dVcCc6ZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpczQuc2VsZWN0TWF0Y2goLTEpO190aGlzNC5mb2N1cygpO2JyZWFrO2Nhc2UnQXJyb3dEb3duJzpldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO190aGlzNC5zZWxlY3RNYXRjaCgxKTtfdGhpczQuZm9jdXMoKTticmVhaztjYXNlJ0VzY2FwZSc6aWYoX3RoaXM0LnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXghPT0tMSYmX3RoaXM0LmdldElucHV0Tm9kZSgpPT09ZXZlbnQudGFyZ2V0KXtfdGhpczQucmVzZXRNYXRjaGVzKCk7fWJyZWFrO2Nhc2UnRW50ZXInOmlmKF90aGlzNC5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4IT09LTEmJl90aGlzNC5nZXRJbnB1dE5vZGUoKT09PWV2ZW50LnRhcmdldCl7ZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtfdGhpczQuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkoKTt9ZWxzZXtfdGhpczQucHJvcHMub25Db21wbGV0ZShfdGhpczQuc3RhdGUuaW5wdXQsZXZlbnQpO31icmVhazt9aWYoaXNGdW5jdGlvbihfdGhpczQucHJvcHMub25LZXlEb3duKSl7X3RoaXM0LnByb3BzLm9uS2V5RG93bihldmVudCk7fX07fTsvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKFR5cGVhaGVhZCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9ub2RlX21vZHVsZXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbWF0Y2hPcGVyYXRvcnNSZT0vW3xcXFxce30oKVtcXF1eJCsqPy5dL2c7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oc3RyKXtpZih0eXBlb2Ygc3RyIT09J3N0cmluZycpe3Rocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7fXJldHVybiBzdHIucmVwbGFjZShtYXRjaE9wZXJhdG9yc1JlLCdcXFxcJCYnKTt9O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSBnZXRJbnRlcnNlY3Rpb247XG5mdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb24ob2JqMSxvYmoyKXtyZXR1cm4gT2JqZWN0LmtleXMob2JqMikucmVkdWNlKGZ1bmN0aW9uKGNoaWxkUHJvcHMsa2V5KXtpZihrZXkgaW4gb2JqMSl7Y2hpbGRQcm9wc1trZXldPW9iajFba2V5XTt9cmV0dXJuIGNoaWxkUHJvcHM7fSx7fSk7fVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMvaW5kZXguanNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IG9taXRLZXlzRnJvbVNvdXJjZU9iamVjdDtcbmZ1bmN0aW9uIG9taXRLZXlzRnJvbVNvdXJjZU9iamVjdChzb3VyY2Upe3ZhciBvbWl0dGVkS2V5cz1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06W107cmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIHJlbG9jYXRlQWNjZXB0ZWRLZXlzKGhhc2gsa2V5KXtpZihvbWl0dGVkS2V5cy5pbmRleE9mKGtleSk9PT0tMSl7aGFzaFtrZXldPXNvdXJjZVtrZXldO31yZXR1cm4gaGFzaDt9LHt9KTt9XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLXRyYW5zZm9ybS1wcm9wZXJ0eS9pbmRleC5qc1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoKGZ1bmN0aW9uIGRldGVjdFRyYW5zZm9ybVByb3BlcnR5KCl7dmFyIHByb3BzPVsndHJhbnNmb3JtJywnV2Via2l0VHJhbnNmb3JtJywnTW96VHJhbnNmb3JtJywnT1RyYW5zZm9ybScsJ21zVHJhbnNmb3JtJywnd2Via2l0LXRyYW5zZm9ybSddO2Zvcih2YXIgaT0wLGxlbj1wcm9wcy5sZW5ndGg7aTxsZW47aSsrKXtpZihwcm9wc1tpXWluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSl7cmV0dXJuIHByb3BzW2ldO319cmV0dXJuIGZhbHNlO30pKCkpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSB1dWlkO1xuZnVuY3Rpb24gdXVpZCgpe3JldHVybidiLScrKFsxZTddKy0xZTMrLTRlMystOGUzKy0xZTExKS5yZXBsYWNlKC9bMDE4XS9nLGZ1bmN0aW9uKGEpe3JldHVybihhXk1hdGgucmFuZG9tKCkqMTY+PmEvNCkudG9TdHJpbmcoMTYpO30pO31cblxuLyoqKi8gfSksXG5cbi8qKiovIDA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTtcbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBib3VuZGxlc3MuanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9leHBvcnRzLmpzXCIpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDQwMzBkMDQ1N2I3OWJlOWRjNjgzIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2NsYXNzbmFtZXMvaW5kZXguanMiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvaW52YXJpYW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Byb3AtdHlwZXMvaW5kZXguanMiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2FtZC1vcHRpb25zLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY2xvbmVFbGVtZW50LCBjcmVhdGVFbGVtZW50LCBDaGlsZHJlbiwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5pbXBvcnQgdXVpZCBmcm9tICdib3VuZGxlc3MtdXRpbHMtdXVpZCc7XG5cbmNvbnN0IERBVEFfQVRUUklCVVRFX0lOREVYID0gJ2RhdGEtZm9jdXMtaW5kZXgnO1xuY29uc3QgREFUQV9BVFRSSUJVVEVfU0tJUCA9ICdkYXRhLWZvY3VzLXNraXAnO1xuXG4vKipcbiAqIEFycm93S2V5TmF2aWdhdGlvbiBpcyBkZXNpZ25lZCBub3QgdG8gY2FyZSBhYm91dCB0aGUgY29tcG9uZW50IHR5cGVzIGl0IGlzIHdyYXBwaW5nLiBEdWUgdG8gdGhpcywgeW91IGNhbiBwYXNzXG4gKiB3aGF0ZXZlciBIVE1MIHRhZyB5b3UgIGxpa2UgaW50byBgcHJvcHMuY29tcG9uZW50YCBvciBldmVuIGEgUmVhY3QgY29tcG9uZW50IHlvdSd2ZSBtYWRlIGVsc2V3aGVyZS4gQWRkaXRpb25hbCBwcm9wc1xuICogcGFzc2VkIHRvIGA8QXJyb3dLZXlOYXZpZ2F0aW9uIC4uLj5gIHdpbGwgIGJlIGZvcndhcmRlZCBvbiB0byB0aGUgY29tcG9uZW50IG9yIEhUTUwgdGFnIG5hbWUgeW91J3ZlIHN1cHBsaWVkLlxuICpcbiAqIFRoZSBjaGlsZHJlbiwgc2ltaWxhcmx5LCBjYW4gYmUgYW55IHR5cGUgb2YgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcnJvd0tleU5hdmlnYXRpb24gZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgbW9kZSA9IHtcbiAgICAgICAgSE9SSVpPTlRBTDogdXVpZCgpLFxuICAgICAgICBWRVJUSUNBTDogdXVpZCgpLFxuICAgICAgICBCT1RIOiB1dWlkKCksXG4gICAgfVxuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV1cbiAgICAgICAgICogKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW55IHZhbGlkIEhUTUwgdGFnIG5hbWUgb3IgYSBSZWFjdCBjb21wb25lbnQgZmFjdG9yeSwgYW55dGhpbmcgdGhhdCBjYW4gYmUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0b1xuICAgICAgICAgKiBgUmVhY3QuY3JlYXRlRWxlbWVudGBcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGxvd3MgZm9yIGEgcGFydGljdWxhciBjaGlsZCB0byBiZSBpbml0aWFsbHkgcmVhY2hhYmxlIHZpYSB0YWJiaW5nOyBvbmx5IGFwcGxpZWQgZHVyaW5nIGZpcnN0IHJlbmRlclxuICAgICAgICAgKi9cbiAgICAgICAgZGVmYXVsdEFjdGl2ZUNoaWxkSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnRyb2xzIHdoaWNoIGFycm93IGtleSBldmVudHMgYXJlIGNhcHR1cmVkIHRvIG1vdmUgYWN0aXZlIGZvY3VzIHdpdGhpbiB0aGUgbGlzdDpcbiAgICAgICAgICpcbiAgICAgICAgICogTW9kZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS2V5c1xuICAgICAgICAgKiAtLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAtLS0tXG4gICAgICAgICAqIGBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIYCAgICAgICB8IOKshe+4jyDinqHvuI8g4qyG77iPIOKsh++4j1xuICAgICAgICAgKiBgQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuSE9SSVpPTlRBTGAgfCDirIXvuI8g4p6h77iPXG4gICAgICAgICAqIGBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5WRVJUSUNBTGAgICB8IOKshu+4jyDirIfvuI9cbiAgICAgICAgICpcbiAgICAgICAgICogX05vdGU6IGZvY3VzIGxvb3BzIHdoZW4gYXJyb3dpbmcgcGFzdCBvbmUgb2YgdGhlIGJvdW5kYXJpZXM7IHRhYmJpbmcgbW92ZXMgdGhlIHVzZXIgYXdheSBmcm9tIHRoZSBsaXN0Ll9cbiAgICAgICAgICovXG4gICAgICAgIG1vZGU6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAgICAgICBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RILFxuICAgICAgICAgICAgQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuSE9SSVpPTlRBTCxcbiAgICAgICAgICAgIEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLlZFUlRJQ0FMLFxuICAgICAgICBdKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBjb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBkZWZhdWx0QWN0aXZlQ2hpbGRJbmRleDogMCxcbiAgICAgICAgbW9kZTogQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCxcbiAgICAgICAgb25LZXlEb3duOiAoKSA9PiB7fSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoQXJyb3dLZXlOYXZpZ2F0aW9uLmRlZmF1bHRQcm9wcylcblxuICAgIHN0YXRlID0ge1xuICAgICAgICBhY3RpdmVDaGlsZEluZGV4OiB0aGlzLnByb3BzLmRlZmF1bHRBY3RpdmVDaGlsZEluZGV4LFxuICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgfVxuXG4gICAgZ2V0RmlsdGVyZWRDaGlsZHJlbihwcm9wcyA9IHRoaXMucHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIENoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pLmZpbHRlcihCb29sZWFuKTtcbiAgICB9XG5cbiAgICBzZXRBY3RpdmVDaGlsZEluZGV4KCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBudW1DaGlsZHJlbiA9IENoaWxkcmVuLmNvdW50KHRoaXMuc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgICAgICBpZiAobnVtQ2hpbGRyZW4gPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlQ2hpbGRJbmRleDogMCB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ID49IG51bUNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZUNoaWxkSW5kZXg6IG51bUNoaWxkcmVuIC0gMSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHsgdGhpcy5zZXRTdGF0ZSh7IGNoaWxkcmVuOiB0aGlzLmdldEZpbHRlcmVkQ2hpbGRyZW4oKSB9KTsgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5jaGlsZHJlbiAhPT0gdGhpcy5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoeyBjaGlsZHJlbjogdGhpcy5nZXRGaWx0ZXJlZENoaWxkcmVuKG5leHRQcm9wcykgfSwgdGhpcy5zZXRBY3RpdmVDaGlsZEluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlQ2hpbGRJbmRleCgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ICE9PSBwcmV2U3RhdGUuYWN0aXZlQ2hpbGRJbmRleCkge1xuICAgICAgICAgICAgdGhpcy5zZXRGb2N1cyh0aGlzLnN0YXRlLmFjdGl2ZUNoaWxkSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Rm9jdXMoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgY2hpbGROb2RlID0gdGhpcy4kd3JhcHBlci5jaGlsZHJlbltpbmRleF07XG5cbiAgICAgICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuaGFzQXR0cmlidXRlKERBVEFfQVRUUklCVVRFX1NLSVApKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmVGb2N1cyhcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyA/IC0xIDogMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZE5vZGUgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gY2hpbGROb2RlKSB7XG4gICAgICAgICAgICBjaGlsZE5vZGUuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1vdmVGb2N1cyhkZWx0YSkge1xuICAgICAgICBjb25zdCBudW1DaGlsZHJlbiA9IHRoaXMuc3RhdGUuY2hpbGRyZW4gPyBDaGlsZHJlbi5jb3VudCh0aGlzLnN0YXRlLmNoaWxkcmVuKSA6IDA7XG4gICAgICAgIGxldCBuZXh0SW5kZXggPSB0aGlzLnN0YXRlLmFjdGl2ZUNoaWxkSW5kZXggKyBkZWx0YTtcblxuICAgICAgICBpZiAobmV4dEluZGV4ID49IG51bUNoaWxkcmVuKSB7XG4gICAgICAgICAgICBuZXh0SW5kZXggPSAwOyAvLyBsb29wXG4gICAgICAgIH0gZWxzZSBpZiAobmV4dEluZGV4IDwgMCkge1xuICAgICAgICAgICAgbmV4dEluZGV4ID0gbnVtQ2hpbGRyZW4gLSAxOyAvLyByZXZlcnNlIGxvb3BcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVDaGlsZEluZGV4OiBuZXh0SW5kZXggfSk7XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IEFycm93S2V5TmF2aWdhdGlvbi5tb2RlLlZFUlRJQ0FMXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVGb2N1cygtMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5IT1JJWk9OVEFMXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5CT1RIKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVGb2N1cygtMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb2RlID09PSBBcnJvd0tleU5hdmlnYXRpb24ubW9kZS5WRVJUSUNBTFxuICAgICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMubW9kZSA9PT0gQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlRm9jdXMoMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuSE9SSVpPTlRBTFxuICAgICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMubW9kZSA9PT0gQXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuQk9USCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlRm9jdXMoMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25LZXlEb3duKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uS2V5RG93bihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVGb2N1cyA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lmhhc0F0dHJpYnV0ZShEQVRBX0FUVFJJQlVURV9JTkRFWCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShEQVRBX0FUVFJJQlVURV9JTkRFWCksIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gQ2hpbGRyZW4udG9BcnJheSh0aGlzLnN0YXRlLmNoaWxkcmVuKVtpbmRleF07XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVDaGlsZEluZGV4OiBpbmRleCB9KTtcblxuICAgICAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gQ2hpbGRyZW4ubWFwKHRoaXMuc3RhdGUuY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAgICAgICBbREFUQV9BVFRSSUJVVEVfSU5ERVhdOiBpbmRleCxcbiAgICAgICAgICAgICAgICBbREFUQV9BVFRSSUJVVEVfU0tJUF06IHBhcnNlSW50KGNoaWxkLnByb3BzLnRhYkluZGV4LCAxMCkgPT09IC0xIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBrZXk6IGNoaWxkLmtleSB8fCBpbmRleCxcbiAgICAgICAgICAgICAgICB0YWJJbmRleDogdGhpcy5zdGF0ZS5hY3RpdmVDaGlsZEluZGV4ID09PSBpbmRleCA/IDAgOiAtMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwZXJzaXN0V3JhcHBlckVsZW1lbnRSZWZlcmVuY2UgPSAodW5rbm93blR5cGUpID0+IHtcbiAgICAgICAgdGhpcy4kd3JhcHBlciA9IHVua25vd25UeXBlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyB1bmtub3duVHlwZSA6IGZpbmRET01Ob2RlKHVua25vd25UeXBlKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBBcnJvd0tleU5hdmlnYXRpb24uaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9e3RoaXMucGVyc2lzdFdyYXBwZXJFbGVtZW50UmVmZXJlbmNlfVxuICAgICAgICAgICAgICAgIG9uRm9jdXM9e3RoaXMuaGFuZGxlRm9jdXN9XG4gICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckNoaWxkcmVuKCl9XG4gICAgICAgICAgICA8L3RoaXMucHJvcHMuY29tcG9uZW50PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1hcnJvdy1rZXktbmF2aWdhdGlvbi9pbmRleC5qcyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjbG9uZUVsZW1lbnQsIGNyZWF0ZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuY29uc3QgZ2V0ID0gKGJhc2UsIHBhdGgsIGZhbGxiYWNrKSA9PiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKChjdXJyZW50LCBmcmFnbWVudCkgPT4gY3VycmVudFtmcmFnbWVudF0gfHwgZmFsbGJhY2ssIGJhc2UpO1xuXG4vKipcbiAqIFRoZXJlIGFyZSBwbGVudHkgb2Ygc2l0dWF0aW9ucyB3aGVyZSB5b3UgbmVlZCB0byBmZXRjaCBjb250ZW50IHRvIGJlIGRpc3BsYXllZCwgYnV0IHdhbnRcbiAqIHRvIHNob3cgc29tZSBzb3J0IG9mIGxvYWRpbmcgZ3JhcGhpYyBpbiB0aGUgaW50ZXJpbS4gVGhpcyBjb21wb25lbnQgaGVscHMgdG8gc2ltcGxpZnlcbiAqIHRoYXQgcGF0dGVybiBieSBoYW5kbGluZyBjb21tb24gdHlwZXMgb2YgcHJvbWlzZXMgYW5kIHByb3ZpZGluZyBhIHNpbXBsZSBtZWNoYW5pc21cbiAqIGZvciBtYXRlcmlhbGl6aW5nIHRoZSBmdWxmaWxsZWQgcGF5bG9hZCBpbnRvIEpTWC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXN5bmMgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGEgcHJvbWlzZSwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcHJvbWlzZSwgb3Igb3RoZXIgdHlwZSBvZiByZW5kZXJhYmxlIGNvbnRlbnQ7IGlmIGEgZnVuY3Rpb24gaXMgcGFzc2VkLCBpdCB3aWxsXG4gICAgICAgICAqIGJlIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHByb3BzXG4gICAgICAgICAqXG4gICAgICAgICAqIFByb21pc2UgZXhhbXBsZTpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganN4XG4gICAgICAgICAqIGNvbnN0IGxpc3REYXRhUHJvbWlzZSA9IGZldGNoKCcvc29tZS9saXN0L2RhdGEvZW5kcG9pbnQnKS50aGVuKFxuICAgICAgICAgKiAgICAgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5vayA/IHJlc3BvbnNlLmpzb24oKSA6ICdGYWlsZWQgdG8gcmVjZWl2ZSBsaXN0IGRhdGEnLFxuICAgICAgICAgKiAgICAgKGVycm9yKSA9PiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgKiApLnRoZW4oKHBheWxvYWQpID0+IHtcbiAgICAgICAgICogICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICogICAgICAgICByZXR1cm4gKDxkaXYgY2xhc3NOYW1lPSdlcnJvcic+e3BheWxvYWR9PC9kaXY+KTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIHJldHVybiAoXG4gICAgICAgICAqICAgICAgICAgPHVsPlxuICAgICAgICAgKiAgICAgICAgICAgICB7cGF5bG9hZC5tYXAoKGl0ZW0pID0+ICg8bGkga2V5PXtpdGVtLmlkfT57aXRlbS5jb250ZW50fTwvbGk+KSl9XG4gICAgICAgICAqICAgICAgICAgPC91bD5cbiAgICAgICAgICogICAgICk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiA8QXN5bmM+e2xpc3REYXRhUHJvbWlzZX08L0FzeW5jPlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogRnVuY3Rpb24gZXhhbXBsZSwgcmVhZGluZyBpbiBgW2RhdGEtZW5kcG9pbnRdYCBhcyB0aGUgYHdpbmRvdy5mZXRjaCgpYCB0YXJnZXQ6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGpzeFxuICAgICAgICAgKiBjb25zdCBmZXRjaExpc3REYXRhID0gKHByb3BzKSA9PiBmZXRjaChwcm9wc1snZGF0YS1lbmRwb2ludCddKS50aGVuKFxuICAgICAgICAgKiAgICAgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5vayA/IHJlc3BvbnNlLmpzb24oKSA6ICdGYWlsZWQgdG8gcmVjZWl2ZSBsaXN0IGRhdGEnLFxuICAgICAgICAgKiAgICAgKGVycm9yKSA9PiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgKiApLnRoZW4oKHBheWxvYWQpID0+IHtcbiAgICAgICAgICogICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICogICAgICAgICByZXR1cm4gKDxkaXYgY2xhc3NOYW1lPSdlcnJvcic+e3BheWxvYWR9PC9kaXY+KTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIHJldHVybiAoXG4gICAgICAgICAqICAgICAgICAgPHVsPlxuICAgICAgICAgKiAgICAgICAgICAgICB7cGF5bG9hZC5tYXAoKGl0ZW0pID0+ICg8bGkga2V5PXtpdGVtLmlkfT57aXRlbS5jb250ZW50fTwvbGk+KSl9XG4gICAgICAgICAqICAgICAgICAgPC91bD5cbiAgICAgICAgICogICAgICk7XG4gICAgICAgICAqIH0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiA8QXN5bmMgZGF0YS1lbmRwb2ludD0nL3NvbWUvbGlzdC9kYXRhL2VuZHBvaW50Jz57ZmV0Y2hMaXN0RGF0YX08L0FzeW5jPlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgUHJvcFR5cGVzLm5vZGUsXG4gICAgICAgICAgICBQcm9wVHlwZXMuaW5zdGFuY2VPZihQcm9taXNlKSxcbiAgICAgICAgXSkuaXNSZXF1aXJlZCxcblxuICAgICAgICAvKiogYSBjYWxsYmFjayBmb3Igd2hlbiByZWFsIGNvbnRlbnQgaGFzIGJlZW4gcmVuZGVyZWQ7IHRoaXMgd2lsbCBiZSBjYWxsZWQgaW1tZWRpYXRlbHkgaWYgbm9ybWFsIEpTWCBpcyBwYXNzZWQgdG8gQXN5bmMsIG9yLCBpbiB0aGUgY2FzZSBvZiBhIHByb21pc2UsIHVwb24gcmVzb2x1dGlvbiBvciByZWplY3Rpb24gKi9cbiAgICAgICAgY2hpbGRyZW5EaWRSZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKiBjb250ZW50IHRvIGJlIHNob3duIHdoaWxlIHRoZSBwcm9taXNlIGlzIGluIFwicGVuZGluZ1wiIHN0YXRlIChsaWtlIGEgbG9hZGluZyBncmFwaGljLCBwZXJoYXBzKSAqL1xuICAgICAgICBwZW5kaW5nQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2hpbGRyZW46IDxkaXYgLz4sXG4gICAgICAgIGNoaWxkcmVuRGlkUmVuZGVyOiAoKSA9PiB7fSxcbiAgICAgICAgcGVuZGluZ0NvbnRlbnQ6IDxkaXYgLz4sXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKEFzeW5jLmRlZmF1bHRQcm9wcylcblxuICAgIG1vdW50ZWQgPSBmYWxzZVxuICAgIHByb21pc2UgPSBudWxsXG4gICAgc3RhdGUgPSB7fVxuXG4gICAgaGFuZGxlUHJvbWlzZUZ1bGZpbGxtZW50KGNvbnRleHQsIHBheWxvYWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vdW50ZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgLy8gb25seSBzZXQgdGhlIGNvbXBvbmVudCBpZiB0aGUgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCBtYXRjaGVzXG4gICAgICAgIC8vIHRoZSBvbmUgd2UncmUgdHJhY2tpbmcgaW4gc3RhdGUsIG90aGVyd2lzZSBpZ25vcmUgaXQgYW5kIHJldGFpbiB0aGUgcHJldmlvdXMgZGF0YVxuICAgICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIHJlbmRlclBheWxvYWRJZlByb21pc2VNYXRjaGVzKHN0YXRlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9taXNlID09PSBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IGNvbXBvbmVudDogcGF5bG9hZCB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sIHRoaXMuZmlyZVJlbmRlckNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGlsZHJlbihjaGlsZHJlbikge1xuICAgICAgICBsZXQgY29udGVudCA9IGNoaWxkcmVuO1xuXG4gICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChjb250ZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoeyBjb21wb25lbnQ6IGNvbnRlbnQgfSwgdGhpcy5maXJlUmVuZGVyQ2FsbGJhY2spO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVDaGlsZHJlbihjb250ZW50KHRoaXMucHJvcHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJvdW5kSGFuZGxlciA9IHRoaXMuaGFuZGxlUHJvbWlzZUZ1bGZpbGxtZW50LmJpbmQodGhpcywgY29udGVudCk7XG5cbiAgICAgICAgLy8gdGhpcyBpcyBrZXB0IG91dHNpZGUgc3RhdGUgc28gaXQgY2FuIGJlIHNldCBpbW1lZGlhdGVseSBpZiB0aGUgcHJvcHMgY2hhbmdlXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IGNvbnRlbnQ7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvbXBvbmVudDogbnVsbCB9LCAoKSA9PiBjb250ZW50LnRoZW4oYm91bmRIYW5kbGVyLCBib3VuZEhhbmRsZXIpKTtcbiAgICB9XG5cbiAgICBmaXJlUmVuZGVyQ2FsbGJhY2soKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbkRpZFJlbmRlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkgICAgICAgICAgICAgICAgIHsgdGhpcy5oYW5kbGVDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKTsgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkgICAgICAgICAgICAgICAgICB7IHRoaXMubW91bnRlZCA9IHRydWU7IH1cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykgeyB0aGlzLmhhbmRsZUNoaWxkcmVuKG5leHRQcm9wcy5jaGlsZHJlbik7IH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpICAgICAgICAgICAgICAgeyB0aGlzLm1vdW50ZWQgPSBmYWxzZTsgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHByb3BzLCBzdGF0ZSB9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gY2xvbmVFbGVtZW50KHN0YXRlLmNvbXBvbmVudCB8fCBwcm9wcy5wZW5kaW5nQ29udGVudCwge1xuICAgICAgICAgICAgLi4ub21pdChwcm9wcywgQXN5bmMuaW50ZXJuYWxLZXlzKSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY3goXG4gICAgICAgICAgICAgICAgJ2ItYXN5bmMnLFxuICAgICAgICAgICAgICAgIHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBzdGF0ZS5jb21wb25lbnQgPT09IG51bGwgJiYgZ2V0KHByb3BzLCAncGVuZGluZ0NvbnRlbnQucHJvcHMuY2xhc3NOYW1lJyksXG4gICAgICAgICAgICAgICAgc3RhdGUuY29tcG9uZW50ICYmIGdldChzdGF0ZSwgJ2NvbXBvbmVudC5wcm9wcy5jbGFzc05hbWUnLCAnJyksXG4gICAgICAgICAgICAgICAgeyAnYi1hc3luYy1wZW5kaW5nJzogc3RhdGUuY29tcG9uZW50ID09PSBudWxsIH1cbiAgICAgICAgICAgICksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1hc3luYy9pbmRleC5qcyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuLyoqXG4gKiBCdXR0b24gaGFzIHR3byBtb2RlcyBvZiBvcGVyYXRpb246XG4gKlxuICogMS4gc3RhdGVsZXNzIChsaWtlIGEgbm9ybWFsIGA8YnV0dG9uPmApXG4gKiAgICBgYGBqc3hcbiAqICAgIDxCdXR0b24gb25QcmVzc2VkPXtkb1NvbWV0aGluZ30+Zm9vPC9CdXR0b24+XG4gKiAgICBgYGBcbiAqXG4gKiAgICA+IE5vdGUgdGhhdCBpbnN0ZWFkIG9mIGBvbkNsaWNrYCwgQnV0dG9uIHVzZXMgYG9uUHJlc3NlZGAuIFRoaXMgaXMgYmVjYXVzZSB0aGUgY29tcG9uZW50IGFsc28gbGlzdGVucyBmb3Iga2V5Ym9hcmRcbiAqICAgIDxrYmQ+RW50ZXI8L2tiZD4gZXZlbnRzLCBzbyBgb25DbGlja2Agb25seSB0ZWxscyBoYWxmIHRoZSBzdG9yeS4gWW91IGNhbiBzdGlsbCBiaW5kIHRvIHRoYXQgcGFydGljdWxhciBSZWFjdCBldmVudFxuICogICAgdGhvdWdoIGlmIHRoZXJlJ3MgYSBuZWVkIHRvIHRlbGwgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBjbGlja3MgYW5kIEVudGVyIHByZXNzZXMuXG4gKlxuICogMi4gc3RhdGVmdWwgKGxpa2UgYSB0b2dnbGUsIGUuZy4gYm9sZC1tb2RlIGluIGEgcmljaCB0ZXh0IGVkaXRvcilcbiAqICAgIFwic3RhdGVmdWxcIiBtb2RlIGlzIHRyaWdnZXJlZCBieSBwYXNzaW5nIGEgYm9vbGVhbiB0byBgcHJvcHMucHJlc3NlZGAuIFRoaXMgZW5hYmxlcyB0aGUgYnV0dG9uIHRvIGFjdCBsaWtlIGFcbiAqICAgIGNvbnRyb2xsZWQgY29tcG9uZW50LiBUaGUgYG9uVW5wcmVzc2VkYCBldmVudCBjYWxsYmFjayB3aWxsIGFsc28gbm93IGJlIGZpcmVkIHdoZW4gYXBwcm9wcmlhdGUuXG4gKlxuICogICAgYGBganN4XG4gKiAgICA8QnV0dG9uXG4gKiAgICAgICAgcHJlc3NlZD17dHJ1ZX1cbiAqICAgICAgICBvblByZXNzZWQ9e2RvU29tZXRoaW5nfVxuICogICAgICAgIG9uVW5wcmVzc2VkPXtkb1NvbWV0aGluZ0Vsc2V9PlxuICogICAgICAgIGZvb1xuICogICAgPC9CdXR0b24+XG4gKiAgICBgYGBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV1cbiAgICAgICAgICogKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW55IHZhbGlkIEhUTUwgdGFnIG5hbWUgb3IgYSBSZWFjdENvbXBvbmVudCwgYW55dGhpbmcgdGhhdCBjYW4gYmUgcGFzc2VkIGFzIHRoZVxuICAgICAgICAgKiBmaXJzdCBhcmd1bWVudCB0byBgUmVhY3QuY3JlYXRlRWxlbWVudGA7IG5vdGUgdGhhdCB0aGlzIGNvbXBvbmVudCBzZXRzIHRoZSBgcm9sZWAgYW5kIGBhcmlhLWNoZWNrZWRgXG4gICAgICAgICAqIGF0dHJpYnV0ZXMgc28gbm9uLWA8YnV0dG9uPmAgZWxlbWVudHMgd2lsbCBzdGlsbCBiZWhhdmUgbGlrZSBhIGJ1dHRvbiBmb3Igc2NyZWVuIHJlYWRlcnNcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB1c2UgdGhpcyBjYWxsYmFjayBpbnN0ZWFkIG9mIGBvbkNsaWNrYCAoaXQncyBgb25DbGlja2AgKyBgb25LZXlEb3duOkVudGVyYCk7IGZpcmVzIGZvciBib3RoIGJ1dHRvbiBtb2Rlc1xuICAgICAgICAgKi9cbiAgICAgICAgb25QcmVzc2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gdGhlIGVsZW1lbnQgYmVjb21lcyBcInVucHJlc3NlZFwiOyBvbmx5IGZpcmVzIHdoZW4gdGhlIEJ1dHRvbiBpcyBpbiBzdGF0ZWZ1bCBtb2RlXG4gICAgICAgICAqL1xuICAgICAgICBvblVucHJlc3NlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHBhc3N0aHJvdWdoIHRvIGBhcmlhLXByZXNzZWRgOyB1c2luZyB0aGlzIHByb3AgdHVybnMgb24gdGhlIGBvblVucHJlc3NlZGAgY2FsbGJhY2sgd2hlbiBhcHBsaWNhYmxlXG4gICAgICAgICAqL1xuICAgICAgICBwcmVzc2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBjb21wb25lbnQ6ICdidXR0b24nLFxuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7fSxcbiAgICAgICAgb25LZXlEb3duOiAoKSA9PiB7fSxcbiAgICAgICAgb25QcmVzc2VkOiAoKSA9PiB7fSxcbiAgICAgICAgb25VbnByZXNzZWQ6ICgpID0+IHt9LFxuICAgICAgICBwcmVzc2VkOiB1bmRlZmluZWQsXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKEJ1dHRvbi5kZWZhdWx0UHJvcHMpXG5cbiAgICBmaXJlU3RhdGVmdWxDYWxsYmFjayhldmVudCkge1xuICAgICAgICB0aGlzLnByb3BzW3RoaXMucHJvcHMucHJlc3NlZCA/ICdvblVucHJlc3NlZCcgOiAnb25QcmVzc2VkJ10oZXZlbnQpO1xuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHRoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgICAgIHRoaXMuZmlyZVN0YXRlZnVsQ2FsbGJhY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGhhbmRsZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgY2FzZSAnU3BhY2UnOlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZVN0YXRlZnVsQ2FsbGJhY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgQnV0dG9uLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1idXR0b24nLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnYi1idXR0b24tcHJlc3NhYmxlJzogdGhpcy5wcm9wcy5wcmVzc2VkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICdiLWJ1dHRvbi1wcmVzc2VkJzogdGhpcy5wcm9wcy5wcmVzc2VkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIGFyaWEtcHJlc3NlZD17dGhpcy5wcm9wcy5wcmVzc2VkfVxuICAgICAgICAgICAgICAgIHJvbGU9J2J1dHRvbidcbiAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLWJ1dHRvbi9pbmRleC5qcyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnYm91bmRsZXNzLWNoZWNrYm94JztcbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuaW1wb3J0IHV1aWQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXV1aWQnO1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbi8qKlxuVGhlIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciBgQ2hlY2tib3hHcm91cGAgaXMgYSBcInNlbGVjdCBhbGxcIiAvIGNoaWxkcmVuIHNjZW5hcmlvLiBUaGlzIHBhcnRpY3VsYXJcbmNvbmZpZ3VyYXRpb24gaXMgYnVpbHQtaW4gYW5kIGlzIGFjdGl2YXRlZCBieSBwYXNzaW5nIHRoZSBgc2VsZWN0QWxsYCBwcm9wLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGVja2JveEdyb3VwIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHNlbGVjdEFsbCA9IHtcbiAgICAgICAgQkVGT1JFOiB1dWlkKCksXG4gICAgICAgIEFGVEVSOiB1dWlkKCksXG4gICAgICAgIE5PTkU6IHV1aWQoKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG92ZXJyaWRlIHRoZSB3cmFwcGVyIEhUTUwgZWxlbWVudCBpZiBkZXNpcmVkXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBkYXRhIHdpc2hlZCB0byBiZSByZW5kZXJlZCwgZWFjaCBpdGVtIG11c3QgY29uZm9ybSB0byB0aGUgW0NoZWNrYm94IHByb3Agc3BlY10oaHR0cHM6Ly9naXRodWIuY29tL2VuaWdtYS1pby9ib3VuZGxlc3MvYmxvYi9tYXN0ZXIvcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94KVxuICAgICAgICAgKi9cbiAgICAgICAgaXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKENoZWNrYm94LnByb3BUeXBlcy5pbnB1dFByb3BzKS5pc1JlcXVpcmVkLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiBhbGwgY2hpbGRyZW4gYmVjb21lIGNoZWNrZWQgKG5vdCBmaXJlZCBvbiBmaXJzdCByZW5kZXIpLCBubyByZXR1cm5cbiAgICAgICAgICovXG4gICAgICAgIG9uQWxsQ2hlY2tlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIGFsbCBjaGlsZHJlbiBiZWNvbWUgdW5jaGVja2VkIChub3QgZmlyZWQgb24gZmlyc3QgcmVuZGVyKSwgbm8gcmV0dXJuXG4gICAgICAgICAqL1xuICAgICAgICBvbkFsbFVuY2hlY2tlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIGEgc3BlY2lmaWMgY2hpbGQgaGFzIGJlY29tZSBjaGVja2VkLCByZXR1cm5zIHRoZSBjaGlsZCBkZWZpbml0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBvbkNoaWxkQ2hlY2tlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIGEgc3BlY2lmaWMgY2hpbGQgaGFzIGJlY29tZSBjaGVja2VkLCByZXR1cm5zIHRoZSBjaGlsZCBkZWZpbml0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBvbkNoaWxkVW5jaGVja2VkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVuZGVycyBhIG1hc3RlciBjaGVja2JveCB0aGF0IGNhbiBtYW5pcHVsYXRlIHRoZSB2YWx1ZXMgb2YgYWxsIGNoaWxkcmVuIHNpbXVsdGFuZW91c2x5XG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RBbGw6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAgICAgICBDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5CRUZPUkUsXG4gICAgICAgICAgICBDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5BRlRFUixcbiAgICAgICAgICAgIENoZWNrYm94R3JvdXAuc2VsZWN0QWxsLk5PTkUsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBtdXN0IGNvbmZvcm0gdG8gdGhlIFtDaGVja2JveCBwcm9wIHNwZWNdKC4vQ2hlY2tib3gpXG4gICAgICAgICAqL1xuICAgICAgICBzZWxlY3RBbGxQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiB0aGUgdGV4dCBvciByZW5kZXJhYmxlIG5vZGUgdG8gZGlzcGxheSBuZXh0IHRvIHRoZSBjaGVja2JveFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgIH0pLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgb25BbGxDaGVja2VkOiBub29wLFxuICAgICAgICBvbkFsbFVuY2hlY2tlZDogbm9vcCxcbiAgICAgICAgb25DaGlsZENoZWNrZWQ6IG5vb3AsXG4gICAgICAgIG9uQ2hpbGRVbmNoZWNrZWQ6IG5vb3AsXG4gICAgICAgIHNlbGVjdEFsbDogQ2hlY2tib3hHcm91cC5zZWxlY3RBbGwuQkVGT1JFLFxuICAgICAgICBzZWxlY3RBbGxQcm9wczoge30sXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKENoZWNrYm94R3JvdXAuZGVmYXVsdFByb3BzKVxuXG4gICAgc2VsZWN0QWxsVVVJRCA9IHV1aWQoKVxuXG4gICAgYWxsSXRlbXNDaGVja2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pdGVtcy5ldmVyeSgoaXRlbSkgPT4gaXRlbS5pbnB1dFByb3BzLmNoZWNrZWQgPT09IHRydWUpO1xuICAgIH1cblxuICAgIGFueUl0ZW1zQ2hlY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaXRlbXMuc29tZSgoaXRlbSkgPT4gaXRlbS5pbnB1dFByb3BzLmNoZWNrZWQgPT09IHRydWUpO1xuICAgIH1cblxuICAgIHJlbmRlclNlbGVjdEFsbENoZWNrYm94KCkge1xuICAgICAgICBjb25zdCBhbGxDaGVja2VkID0gdGhpcy5hbGxJdGVtc0NoZWNrZWQoKTtcbiAgICAgICAgY29uc3QgeyBpbnB1dFByb3BzIH0gPSB0aGlzLnByb3BzLnNlbGVjdEFsbFByb3BzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5zZWxlY3RBbGxQcm9wc31cbiAgICAgICAgICAgICAgICBrZXk9e3RoaXMuc2VsZWN0QWxsVVVJRH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWNoZWNrYm94LWdyb3VwLWFsbCcsIHRoaXMucHJvcHMuc2VsZWN0QWxsUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgIC4uLmlucHV0UHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGFsbENoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgIGluZGV0ZXJtaW5hdGU6ICFhbGxDaGVja2VkICYmIHRoaXMuYW55SXRlbXNDaGVja2VkKCksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGlucHV0UHJvcHMgJiYgaW5wdXRQcm9wcy5uYW1lID8gaW5wdXRQcm9wcy5uYW1lIDogbnVsbCxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0aGlzLnByb3BzLnNlbGVjdEFsbFByb3BzLmxhYmVsIHx8ICdTZWxlY3QgQWxsJ31cbiAgICAgICAgICAgICAgICBvbkNoZWNrZWQ9e3RoaXMucHJvcHMub25BbGxDaGVja2VkfVxuICAgICAgICAgICAgICAgIG9uVW5jaGVja2VkPXt0aGlzLnByb3BzLm9uQWxsVW5jaGVja2VkfSAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckNoZWNrYm94ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgey4uLml0ZW19XG4gICAgICAgICAgICAgICAgICAgIGtleT17aXRlbS5pbnB1dFByb3BzLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hlY2tlZD17dGhpcy5wcm9wcy5vbkNoaWxkQ2hlY2tlZH1cbiAgICAgICAgICAgICAgICAgICAgb25VbmNoZWNrZWQ9e3RoaXMucHJvcHMub25DaGlsZFVuY2hlY2tlZH0gLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlckNoaWxkcmVuKCkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IFsgdGhpcy5yZW5kZXJDaGVja2JveGVzKCkgXTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMuc2VsZWN0QWxsKSB7XG4gICAgICAgIGNhc2UgQ2hlY2tib3hHcm91cC5zZWxlY3RBbGwuQkVGT1JFOlxuICAgICAgICAgICAgY2hpbGRyZW4udW5zaGlmdCh0aGlzLnJlbmRlclNlbGVjdEFsbENoZWNrYm94KCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDaGVja2JveEdyb3VwLnNlbGVjdEFsbC5BRlRFUjpcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5yZW5kZXJTZWxlY3RBbGxDaGVja2JveCgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIENoZWNrYm94R3JvdXAuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWNoZWNrYm94LWdyb3VwJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJDaGlsZHJlbigpfVxuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtY2hlY2tib3gtZ3JvdXAvaW5kZXguanMiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5pbXBvcnQgdXVpZCBmcm9tICdib3VuZGxlc3MtdXRpbHMtdXVpZCc7XG5cbmNvbnN0IGlzRnVuY3Rpb24gPSAoeCkgPT4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbi8qKlxuQ2hlY2tib3ggaXMgaW1wbGVtZW50ZWQgYXMgYSBcImNvbnRyb2xsZWQgaW5wdXRcIiwgbWVhbmluZyBpdCBpcyBhIGRpcmVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgZGF0YSBwYXNzZWRcbmluc2lkZS4gVXNlciBpbnRlcmFjdGlvbiB3aWxsIGJ1YmJsZSBjaGFuZ2VzIGluIHRoZSBmb3JtIG9mIGBvbkNoZWNrZWRgIGFuZCBgb25VbmNoZWNrZWRgIHRoYXQgYSBjb250cm9sbGVyXG52aWV3IG11c3QgaW50ZXJjZXB0IGFuZCBhcHBseSBhZ2FpbnN0IHRoZSBkYXRhIHByb3ZpZGVyLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGVja2JveCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IHZhbGlkIEhUTUwgdGFnIG5hbWVcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWxsIGlucHV0LXNwZWNpZmljIHByb3BzIGxpa2UgYHZhbHVlYCwgYG5hbWVgLCBldGMgc2hvdWxkIGJlIHBhc3NlZCBoZXJlIC0tIGNvbW1vbiBvbmVzIGFyZSBsaXN0ZWQgYmVsb3dcbiAgICAgICAgICovXG4gICAgICAgIGlucHV0UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogZGV0ZXJtaW5lcyBpZiB0aGUgY2hlY2tib3ggaXMgcmVuZGVyZWQgYXMgY2hlY2tlZC91bmNoZWNrZWQsIHNlZSBSZWFjdCBbXCJjb250cm9sbGVkIGlucHV0c1wiXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzKSlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBwcmV2ZW50cyB0aGUgYG9ue0NoZWNrZWQsVW5jaGVja2VkfWAgZXZlbnRzIGZyb20gZmlyaW5nIHdoZW4gYHRydWVgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgICAgIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGVuYWJsZXMgb3IgZGlzYWJsZXMgXCJtaXhlZFwiIGNoZWNrYm94IHN0YXRlLCByZWFkIHRoaXMgW0NTUy1Ucmlja3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9pbmRldGVybWluYXRlLWNoZWNrYm94ZXMvKSAgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgICAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgICAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiByZW5kZXJlZCBhcyB0aGUgaW5wdXQgY29udHJvbCdzIGZvcm0gbmFtZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqICBwYXNzZWQtdGhyb3VnaCB0byB0aGUgaW5wdXQgbm9kZSwgbGlrZSBgbmFtZWBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgUmVhY3QtcmVuZGVyYWJsZSBjb250ZW50LCBtb3N0IGNvbW1vbmx5IGEgc2ltcGxlIHN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIGxhYmVsUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBiZWNvbWVzIGNoZWNrZWQ7IGJhY2tpbmcgZGF0YSBtdXN0IGJlIHVwZGF0ZWQgdG8gcGVyc2lzdCB0aGUgc3RhdGUgY2hhbmdlXG4gICAgICAgICAqL1xuICAgICAgICBvbkNoZWNrZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBiZWNvbWVzIHVuY2hlY2tlZDsgYmFja2luZyBkYXRhIG11c3QgYmUgdXBkYXRlZCB0byBwZXJzaXN0IHRoZSBzdGF0ZSBjaGFuZ2VcbiAgICAgICAgICovXG4gICAgICAgIG9uVW5jaGVja2VkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBjb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBpbnB1dFByb3BzOiB7XG4gICAgICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgICAgIGluZGV0ZXJtaW5hdGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBsYWJlbDogbnVsbCxcbiAgICAgICAgbGFiZWxQcm9wczoge30sXG4gICAgICAgIG9uQ2hlY2tlZDogbm9vcCxcbiAgICAgICAgb25VbmNoZWNrZWQ6IG5vb3AsXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKENoZWNrYm94LmRlZmF1bHRQcm9wcylcblxuICAgIGlkID0gdXVpZCgpXG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnNldEluZGV0ZXJtaW5hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUgIT09IHRoaXMucHJvcHMuaW5wdXRQcm9wcy5pbmRldGVybWluYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnNldEluZGV0ZXJtaW5hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEluZGV0ZXJtaW5hdGUoKSB7XG4gICAgICAgIHRoaXMucmVmcy5pbnB1dC5pbmRldGVybWluYXRlID0gISF0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZTtcbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQpID0+IHsgLy8gU2VuZCB0aGUgb3Bwb3NpdGUgc2lnbmFsIGZyb20gd2hhdCB3YXMgcGFzc2VkIHRvIHRvZ2dsZSB0aGUgZGF0YVxuICAgICAgICBpZiAodGhpcy5wcm9wcy5pbnB1dFByb3BzLmRpc2FibGVkKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHRoaXMucHJvcHNbIXRoaXMucHJvcHMuaW5wdXRQcm9wcy5jaGVja2VkID8gJ29uQ2hlY2tlZCcgOiAnb25VbmNoZWNrZWQnXSh0aGlzLnByb3BzLmlucHV0UHJvcHMubmFtZSk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlucHV0UHJvcHMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgdGhpcy5yZWZzLmlucHV0LmZvY3VzKCk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2xpY2spKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25DbGljayhldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRBcmlhU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSA/ICdtaXhlZCcgOiBTdHJpbmcodGhpcy5wcm9wcy5pbnB1dFByb3BzLmNoZWNrZWQpO1xuICAgIH1cblxuICAgIHJlbmRlcklucHV0KCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcy5pbnB1dFByb3BzLCAnaW5kZXRlcm1pbmF0ZScpfVxuICAgICAgICAgICAgICAgIHJlZj0naW5wdXQnXG4gICAgICAgICAgICAgICAgdHlwZT0nY2hlY2tib3gnXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1jaGVja2JveCcsIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2ItY2hlY2tib3gtbWl4ZWQnOiB0aGlzLnByb3BzLmlucHV0UHJvcHMuaW5kZXRlcm1pbmF0ZSxcbiAgICAgICAgICAgICAgICAgICAgJ2ItY2hlY2tib3gtY2hlY2tlZCc6IHRoaXMucHJvcHMuaW5wdXRQcm9wcy5jaGVja2VkLFxuICAgICAgICAgICAgICAgICAgICAnYi1jaGVja2JveC11bmNoZWNrZWQnOiAhdGhpcy5wcm9wcy5pbnB1dFByb3BzLmluZGV0ZXJtaW5hdGUgJiYgIXRoaXMucHJvcHMuaW5wdXRQcm9wcy5jaGVja2VkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlucHV0UHJvcHMuaWQgfHwgdGhpcy5pZH1cbiAgICAgICAgICAgICAgICBhcmlhLWNoZWNrZWQ9e3RoaXMuZ2V0QXJpYVN0YXRlKCl9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9IC8+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVyTGFiZWwoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmxhYmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5sYWJlbFByb3BzfVxuICAgICAgICAgICAgICAgICAgICByZWY9J2xhYmVsJ1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWNoZWNrYm94LWxhYmVsJywgdGhpcy5wcm9wcy5sYWJlbFByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e3RoaXMucHJvcHMuaW5wdXRQcm9wcy5pZCB8fCB0aGlzLmlkfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGFiZWx9XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBDaGVja2JveC5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIHJlZj0nd3JhcHBlcidcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWNoZWNrYm94LXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlcklucHV0KCl9XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTGFiZWwoKX1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLWNoZWNrYm94L2luZGV4LmpzIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBQb3J0YWwgZnJvbSAnYm91bmRsZXNzLXBvcnRhbCc7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuY29uc3QgaXNGdW5jdGlvbiA9ICh4KSA9PiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcbmNvbnN0IHRvQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbi8qKlxuQSBkaWFsb2cgZGlmZmVycyBmcm9tIGEgbW9kYWwgaW4gdGhhdCBpdCBkb2VzIG5vdCBjb21lIHdpdGggYSBtYXNraW5nIGxheWVyICh0byBvYnNjdXJlIHRoZSByZXN0IG9mIHRoZSBwYWdlKVxuYW5kIHRoZSB1c2VyIGNhbiBjaG9vc2UgdG8gc2hpZnQgZm9jdXMgYXdheSBmcm9tIHRoZSBkaWFsb2cgY29udGVudHMgdmlhIG1vdXNlIGNsaWNrIG9yIGEga2V5Ym9hcmQgc2hvcnRjdXQuXG5cbklmIHlvdSBkZWNpZGUgdG8gcHJvdmlkZSBhIGhlYWRlciBpbnNpZGUgeW91ciBkaWFsb2csIGl0J3MgcmVjb21tZW5kZWQgdG8gY29uZmlndXJlIHRoZSBbYGFyaWEtbGFiZWxsZWRieWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FjY2Vzc2liaWxpdHkvQVJJQS9BUklBX1RlY2huaXF1ZXMvVXNpbmdfdGhlX2FyaWEtbGFiZWxsZWRieV9hdHRyaWJ1dGUpIGF0dHJpYnV0ZSwgd2hpY2ggY2FuIGJlIGFkZGVkIHRvIGBwcm9wcy5kaWFsb2dQcm9wc2AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpYWxvZyBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYXJiaXRyYXJ5IGNvbnRlbnQgdG8gYmUgcmVuZGVyZWQgYWZ0ZXIgdGhlIGRpYWxvZyBpbiB0aGUgRE9NXG4gICAgICAgICAqL1xuICAgICAgICBhZnRlcjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFyYml0cmFyeSBjb250ZW50IHRvIGJlIHJlbmRlcmVkIGJlZm9yZSB0aGUgZGlhbG9nIGluIHRoZSBET01cbiAgICAgICAgICovXG4gICAgICAgIGJlZm9yZTogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRldGVybWluZXMgaWYgZm9jdXMgaXMgYWxsb3dlZCB0byBtb3ZlIGF3YXkgZnJvbSB0aGUgZGlhbG9nXG4gICAgICAgICAqL1xuICAgICAgICBjYXB0dXJlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBlbmFibGUgZGV0ZWN0aW9uIG9mIFwiRXNjYXBlXCIga2V5cHJlc3NlcyB0byB0cmlnZ2VyIGBwcm9wcy5vbkNsb3NlYDsgaWYgYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgdGhlIHJldHVyblxuICAgICAgICAgKiB2YWx1ZSBkZXRlcm1pbmVzIGlmIHRoZSBkaWFsb2cgd2lsbCBiZSBjbG9zZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlT25Fc2NLZXk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVuYWJsZSBkZXRlY3Rpb24gb2YgY2xpY2tzIGluc2lkZSB0aGUgZGlhbG9nIGFyZWEgdG8gdHJpZ2dlciBgcHJvcHMub25DbG9zZWA7IGlmIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQsIHRoZSByZXR1cm5cbiAgICAgICAgICogdmFsdWUgZGV0ZXJtaW5lcyBpZiB0aGUgZGlhbG9nIHdpbGwgYmUgY2xvc2VkXG4gICAgICAgICAqL1xuICAgICAgICBjbG9zZU9uSW5zaWRlQ2xpY2s6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVuYWJsZSBkZXRlY3Rpb24gb2YgY2xpY2tzIG91dHNpZGUgdGhlIGRpYWxvZyBhcmVhIHRvIHRyaWdnZXIgYHByb3BzLm9uQ2xvc2VgOyBpZiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCB0aGUgcmV0dXJuXG4gICAgICAgICAqIHZhbHVlIGRldGVybWluZXMgaWYgdGhlIGRpYWxvZyB3aWxsIGJlIGNsb3NlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xvc2VPbk91dHNpZGVDbGljazogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZW5hYmxlIGRldGVjdGlvbiBvZiBmb2N1cyBvdXRzaWRlIHRoZSBkaWFsb2cgYXJlYSB0byB0cmlnZ2VyIGBwcm9wcy5vbkNsb3NlYDsgaWYgYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgdGhlIHJldHVyblxuICAgICAgICAgKiB2YWx1ZSBkZXRlcm1pbmVzIGlmIHRoZSBkaWFsb2cgd2lsbCBiZSBjbG9zZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlT25PdXRzaWRlRm9jdXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGVuYWJsZSBkZXRlY3Rpb24gb2Ygc2Nyb2xsIGFuZCBtb3VzZXdoZWVsIGV2ZW50cyBvdXRzaWRlIHRoZSBkaWFsb2cgYXJlYSB0byB0cmlnZ2VyIGBwcm9wcy5vbkNsb3NlYDsgaWYgYSBmdW5jdGlvblxuICAgICAgICAgKiBpcyBwcm92aWRlZCwgdGhlIHJldHVybiB2YWx1ZSBkZXRlcm1pbmVzIGlmIHRoZSBkaWFsb2cgd2lsbCBiZSBjbG9zZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlT25PdXRzaWRlU2Nyb2xsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5ib29sLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvdmVycmlkZSB0aGUgdHlwZSBvZiBgLmItZGlhbG9nLXdyYXBwZXJgIEhUTUwgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvdmVycmlkZSB0aGUgdHlwZSBvZiBgLmItZGlhbG9nYCBIVE1MIGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGRpYWxvZ0NvbXBvbmVudDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICBkaWFsb2dQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgfSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGEgY3VzdG9tIGV2ZW50IGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgdG8gaW5kaWNhdGUgdGhhdCB0aGUgZGlhbG9nIHNob3VsZCBiZSB1bnJlbmRlcmVkIGJ5IGl0cyBwYXJlbnQ7IHRoZSBldmVudCBvY2N1cnMgaWYgb25lIG9yIG1vcmUgb2YgdGhlIFwiY2xvc2VPblwiIHByb3BzIChgY2xvc2VPbkVzY0tleWAsIGBjbG9zZU9uT3V0c2lkZUNsaWNrYCwgZXRjLikgYXJlIHBhc3NlZCBhcyBgdHJ1ZWAgYW5kIHRoZSBkaXNtaXNzYWwgY3JpdGVyaWEgYXJlIHNhdGlzZmllZFxuICAgICAgICAgKi9cbiAgICAgICAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgYWZ0ZXI6IG51bGwsXG4gICAgICAgIGJlZm9yZTogbnVsbCxcbiAgICAgICAgY2FwdHVyZUZvY3VzOiB0cnVlLFxuICAgICAgICBjaGlsZHJlbjogbnVsbCxcbiAgICAgICAgY2xvc2VPbkVzY0tleTogZmFsc2UsXG4gICAgICAgIGNsb3NlT25JbnNpZGVDbGljazogZmFsc2UsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IGZhbHNlLFxuICAgICAgICBjbG9zZU9uT3V0c2lkZUZvY3VzOiBmYWxzZSxcbiAgICAgICAgY2xvc2VPbk91dHNpZGVTY3JvbGw6IGZhbHNlLFxuICAgICAgICBjb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBkaWFsb2dDb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBkaWFsb2dQcm9wczoge30sXG4gICAgICAgIG9uQ2xvc2U6IG5vb3AsXG4gICAgICAgIG9uS2V5RG93bjogbm9vcCxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoRGlhbG9nLmRlZmF1bHRQcm9wcylcblxuICAgIG1vdW50ZWQgPSBmYWxzZVxuXG4gICAgaXNQYXJ0T2ZEaWFsb2cobm9kZSkge1xuICAgICAgICBpZiAoIW5vZGUgfHwgbm9kZSA9PT0gd2luZG93KSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgIGNvbnN0IHJvb3RzID0gWyB0aGlzLiR3cmFwcGVyIF0uY29uY2F0KFxuICAgICAgICAgICAgdG9BcnJheS5jYWxsKFxuICAgICAgICAgICAgICAgIHRoaXMuJHdyYXBwZXIucXVlcnlTZWxlY3RvckFsbChgWyR7UG9ydGFsLlBPUlRBTF9EQVRBX0FUVFJJQlVURX1dYClcbiAgICAgICAgICAgICkubWFwKChkb20pID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRvbS5nZXRBdHRyaWJ1dGUoUG9ydGFsLlBPUlRBTF9EQVRBX0FUVFJJQlVURSkpKVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSA/IG5vZGUucGFyZW50Tm9kZSA6IG5vZGU7XG5cbiAgICAgICAgcmV0dXJuIHJvb3RzLnNvbWUoKGRvbSkgPT4gZG9tLmNvbnRhaW5zKGVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljaywgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwsIHRydWUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2FwdHVyZUZvY3VzICYmICF0aGlzLmlzUGFydE9mRGlhbG9nKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLiRkaWFsb2cuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljaywgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLCB0cnVlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZU91dHNpZGVTY3JvbGxXaGVlbCwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuaGFuZGxlT3V0c2lkZVNjcm9sbFdoZWVsLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzaG91bGREaWFsb2dDbG9zZU9uRXZlbnQocHJvcCwgZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24odGhpcy5wcm9wc1twcm9wXSkgPyB0aGlzLnByb3BzW3Byb3BdKGV2ZW50KSA6IHRoaXMucHJvcHNbcHJvcF07XG4gICAgfVxuXG4gICAgaGFuZGxlRm9jdXMgPSAobmF0aXZlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmNhcHR1cmVGb2N1cykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZUZvY3VzJywgbmF0aXZlRXZlbnQpICYmICF0aGlzLmlzUGFydE9mRGlhbG9nKG5hdGl2ZUV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQodGhpcy5wcm9wcy5vbkNsb3NlLCAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXhwbGljaXRPcmlnaW5hbFRhcmdldCBpcyBmb3IgRmlyZWZveCwgYXMgaXQgZG9lc24ndCBzdXBwb3J0IHJlbGF0ZWRUYXJnZXRcbiAgICAgICAgbGV0IHByZXZpb3VzID0gbmF0aXZlRXZlbnQuZXhwbGljaXRPcmlnaW5hbFRhcmdldCB8fCBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0O1xuXG4gICAgICAgIGlmICh0aGlzLmlzUGFydE9mRGlhbG9nKHByZXZpb3VzKSAmJiAhdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICBuYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcHJldmlvdXMuZm9jdXMoKTsgLy8gcmVzdG9yZSBmb2N1c1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uRXNjS2V5JywgZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5wcm9wcy5vbkNsb3NlLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uS2V5RG93bikge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlSW5zaWRlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uSW5zaWRlQ2xpY2snLCBldmVudCkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMucHJvcHMub25DbG9zZSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVPdXRzaWRlQ2xpY2sgPSAobmF0aXZlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZUNsaWNrJywgbmF0aXZlRXZlbnQpICYmICF0aGlzLmlzUGFydE9mRGlhbG9nKG5hdGl2ZUV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMucHJvcHMub25DbG9zZSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVPdXRzaWRlU2Nyb2xsV2hlZWwgPSAobmF0aXZlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkRGlhbG9nQ2xvc2VPbkV2ZW50KCdjbG9zZU9uT3V0c2lkZVNjcm9sbCcsIG5hdGl2ZUV2ZW50KSAmJiAhdGhpcy5pc1BhcnRPZkRpYWxvZyhuYXRpdmVFdmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLnByb3BzLm9uQ2xvc2UsIDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyRm9jdXNCb3VuZGFyeSgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2FwdHVyZUZvY3VzKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdiLW9mZnNjcmVlbicgdGFiSW5kZXg9JzAnIGFyaWEtaGlkZGVuPSd0cnVlJz4mbmJzcDs8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9IC8vIHVzZWQgdG8gbG9jayBmb2N1cyBpbnRvIGEgcGFydGljdWxhciBzdWJzZXQgb2YgRE9NXG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBEaWFsb2cuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByZWY9eyhub2RlKSA9PiAodGhpcy4kd3JhcHBlciA9IG5vZGUpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItZGlhbG9nLXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckZvY3VzQm91bmRhcnkoKX1cblxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmJlZm9yZX1cblxuICAgICAgICAgICAgICAgIDx0aGlzLnByb3BzLmRpYWxvZ0NvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5kaWFsb2dQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgcmVmPXsobm9kZSkgPT4gKHRoaXMuJGRpYWxvZyA9IG5vZGUpfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWRpYWxvZycsIHRoaXMucHJvcHMuZGlhbG9nUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVJbnNpZGVDbGlja31cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259XG4gICAgICAgICAgICAgICAgICAgIHJvbGU9e3RoaXMucHJvcHMuY2FwdHVyZUZvY3VzID8gJ2FsZXJ0ZGlhbG9nJyA6ICdkaWFsb2cnfVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD0nMCc+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5kaWFsb2dDb21wb25lbnQ+XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5hZnRlcn1cblxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckZvY3VzQm91bmRhcnkoKX1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZy9pbmRleC5qcyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuY29uc3QgaW5zdGFuY2VzID0gW107XG5cbmZ1bmN0aW9uIHRvSShzdHJpbmdOdW1iZXIpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoc3RyaW5nTnVtYmVyLCAxMCk7XG59XG5cbmZ1bmN0aW9uIHJlc2NhbGUoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBub2RlID0gZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgIGNvbnN0IGNvbnRhaW5lckJveCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUucGFyZW50Tm9kZSk7XG4gICAgY29uc3QgZm9udFNpemUgPSB0b0kod2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSkuZm9udFNpemUpO1xuXG4gICAgaWYgKGluc3RhbmNlLmJhc2VGb250U2l6ZSA9PT0gbnVsbCkge1xuICAgICAgICBpbnN0YW5jZS5iYXNlRm9udFNpemUgPSBmb250U2l6ZTtcbiAgICB9XG5cbiAgICBsZXQgY29udGFpbmVySGVpZ2h0ID0gdG9JKGNvbnRhaW5lckJveC5oZWlnaHQpO1xuICAgIGxldCBjb250YWluZXJXaWR0aCA9IHRvSShjb250YWluZXJCb3gud2lkdGgpO1xuXG4gICAgLy8gbmVlZCB0byBhY2NvdW50IGZvciBwYWRkaW5nXG4gICAgaWYgKGNvbnRhaW5lckJveC5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JyB8fCBjb250YWluZXJCb3guYm94U2l6aW5nID09PSAncGFkZGluZy1ib3gnKSB7XG4gICAgICAgIGNvbnRhaW5lckhlaWdodCAtPSB0b0koY29udGFpbmVyQm94LnBhZGRpbmdUb3ApICsgdG9JKGNvbnRhaW5lckJveC5wYWRkaW5nQm90dG9tKTtcbiAgICAgICAgY29udGFpbmVyV2lkdGggLT0gdG9JKGNvbnRhaW5lckJveC5wYWRkaW5nTGVmdCkgKyB0b0koY29udGFpbmVyQm94LnBhZGRpbmdSaWdodCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW1pemVGb3JIZWlnaHQgPSBNYXRoLmZsb29yKChmb250U2l6ZSAvIG5vZGUub2Zmc2V0SGVpZ2h0KSAqIGNvbnRhaW5lckhlaWdodCk7XG4gICAgY29uc3Qgb3B0aW1pemVGb3JXaWR0aCA9IE1hdGguZmxvb3IoKGZvbnRTaXplIC8gbm9kZS5vZmZzZXRXaWR0aCkgKiBjb250YWluZXJXaWR0aCk7XG5cbiAgICAvLyBpZiB1cHNjYWxpbmcgaXMgYWxsb3dlZCwgdGhhdCBjaGFuZ2VzIHRoZSBtYXRoIGEgYml0XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnVwc2NhbGUpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5mb250U2l6ZSA9IChNYXRoLm1heChvcHRpbWl6ZUZvckhlaWdodCwgb3B0aW1pemVGb3JXaWR0aCkgfHwgMSkgKyAncHgnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc3R5bGUuZm9udFNpemUgPSAoTWF0aC5taW4oaW5zdGFuY2UuYmFzZUZvbnRTaXplLCBvcHRpbWl6ZUZvckhlaWdodCwgb3B0aW1pemVGb3JXaWR0aCkgfHwgMSkgKyAncHgnO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlV2luZG93UmVzaXplKCkge1xuICAgIGluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4gcmVzY2FsZShpbnN0YW5jZSkpO1xufVxuXG5mdW5jdGlvbiByZWdpc3Rlckluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgaWYgKGluc3RhbmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiB1bnJlZ2lzdGVySW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZXMuc3BsaWNlKGluc3RhbmNlcy5pbmRleE9mKGluc3RhbmNlKSwgMSk7XG5cbiAgICBpZiAoaW5zdGFuY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlV2luZG93UmVzaXplLCB0cnVlKTtcbiAgICB9XG59XG5cbi8qKlxuVGhpcyBjb21wb25lbnQgY2FuIGJlIHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIGFuIGludGVybmF0aW9uYWxpemVkIHN0cmluZyBpcyBiZWluZyBwbGFjZWQgaW50byB0aGUgVUkgYW5kIGl0J3MgdW5jbGVhciBpZiBhbGwgdmFyaWF0aW9ucyBvZiBpdCB3aWxsIGZpdCB3aXRob3V0IGV4Y2Vzc2l2ZSBhbW91bnRzIG9mIGVkZ2UtY2FzZSBDU1MuIFVsdGltYXRlbHksIGl0J3MgZ29vZCBhdCBtYWtpbmcgc3VyZSB3aGF0IHlvdSBwdXQgaW4gZG9lc24ndCBvdmVyZmxvdy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRml0dGVkVGV4dCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IHZhbGlkIEhUTUwgdGFnIG5hbWVcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY29udHJvbHMgaWYgRml0dGVkVGV4dCB3aWxsIGF1dG9tYXRpY2FsbHkgc2NhbGUgdXAgdGhlIGNvbnRlbnQgdG8gZml0IHRoZSBhdmFpbGFibGUgc3BhY2U7IG5vcm1hbGx5IHRoZSBjb21wb25lbnRcbiAgICAgICAgICogb25seSBzY2FsZXMgdGV4dCBkb3duIGFzIG5lZWRlZCB0byBmaXRcbiAgICAgICAgICovXG4gICAgICAgIHVwc2NhbGU6IFByb3BUeXBlcy5ib29sLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ3NwYW4nLFxuICAgICAgICB1cHNjYWxlOiBmYWxzZSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoRml0dGVkVGV4dC5kZWZhdWx0UHJvcHMpXG5cbiAgICAvLyBzZXQgZHVyaW5nIHRoZSBmaXJzdCByZXNjYWxlKCkgcnVuXG4gICAgYmFzZUZvbnRTaXplID0gbnVsbFxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHJlc2NhbGUodGhpcyk7XG5cbiAgICAgICAgLy8gdGhlcmUgYXJlIGxpa2VseSB0byBiZSBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgdGhpcyBjb21wb25lbnQgb24gYSBwYWdlLCBzbyBpdCBtYWtlcyBzZW5zZSB0byBqdXN0IHVzZVxuICAgICAgICAvLyBhIHNoYXJlZCBnbG9iYWwgcmVzaXplIGxpc3RlbmVyIGluc3RlYWQgb2YgZWFjaCBjb21wb25lbnQgaGF2aW5nIGl0cyBvd25cbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIHJlc2NhbGUodGhpcyk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHVucmVnaXN0ZXJJbnN0YW5jZSh0aGlzKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBGaXR0ZWRUZXh0LmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi10ZXh0JywgdGhpcy5wcm9wcy5jbGFzc05hbWUpfT5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLWZpdHRlZC10ZXh0L2luZGV4LmpzIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuaW1wb3J0IHV1aWQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXV1aWQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBzdGF0dXMgPSB7XG4gICAgICAgIExPQURJTkc6IHV1aWQoKSxcbiAgICAgICAgTE9BREVEOiB1dWlkKCksXG4gICAgICAgIEVSUk9SOiB1dWlkKCksXG4gICAgfVxuXG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIHdyaXR0ZW4gZGVzY3JpcHRpb24gb2YgdGhlIGltYWdlIGZvciBzZWFyY2ggZW5naW5lcywgaG92ZXJ0ZXh0IGFuZCB0aG9zZSB1c2luZyBhY2Nlc3NpYmlsaXR5IHRlY2hub2xvZ2llc1xuICAgICAgICAgKi9cbiAgICAgICAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvdmVycmlkZXMgdGhlIGNvbXBvbmVudCBIVE1MIHRhZ1xuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIHZhbGlkIHBhdGggdG8gdGhlIGRlc2lyZWQgaW1hZ2VcbiAgICAgICAgICovXG4gICAgICAgIHNyYzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGFsdDogJycsXG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIHNyYzogJ2Fib3V0OmJsYW5rJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoSW1hZ2UuZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIHN0YXR1czogSW1hZ2Uuc3RhdHVzLkxPQURJTkcsXG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5zcmMgIT09IHRoaXMucHJvcHMuc3JjKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0UHJlbG9hZGVyKCk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc3RhdHVzOiBJbWFnZS5zdGF0dXMuTE9BRElORyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkgICAgIHsgdGhpcy5wcmVsb2FkKCk7IH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSAgICB7IHRoaXMucHJlbG9hZCgpOyB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSAgeyB0aGlzLnJlc2V0UHJlbG9hZGVyKCk7IH1cblxuICAgIHJlc2V0UHJlbG9hZGVyKCkge1xuICAgICAgICB0aGlzLmxvYWRlci5vbmxvYWQgPSBudWxsO1xuICAgICAgICB0aGlzLmxvYWRlci5vbmVycm9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2FkZXIgPSBudWxsO1xuICAgIH1cblxuICAgIHByZWxvYWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmxvYWRlcikgeyByZXR1cm47IH1cblxuICAgICAgICB0aGlzLmxvYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgIHRoaXMubG9hZGVyLm9ubG9hZCA9ICgpID0+IHRoaXMuc2V0U3RhdGUoeyBzdGF0dXM6IEltYWdlLnN0YXR1cy5MT0FERUQgfSk7XG4gICAgICAgIHRoaXMubG9hZGVyLm9uZXJyb3IgPSAoKSA9PiB0aGlzLnNldFN0YXRlKHsgc3RhdHVzOiBJbWFnZS5zdGF0dXMuRVJST1IgfSk7XG5cbiAgICAgICAgdGhpcy5sb2FkZXIuc3JjID0gdGhpcy5wcm9wcy5zcmM7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgSW1hZ2UuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWltYWdlJywgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2ItaW1hZ2UtbG9hZGluZyc6IHRoaXMuc3RhdGUuc3RhdHVzID09PSBJbWFnZS5zdGF0dXMuTE9BRElORyxcbiAgICAgICAgICAgICAgICAgICAgJ2ItaW1hZ2UtbG9hZGVkJzogdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEltYWdlLnN0YXR1cy5MT0FERUQsXG4gICAgICAgICAgICAgICAgICAgICdiLWltYWdlLWVycm9yJzogdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEltYWdlLnN0YXR1cy5FUlJPUixcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy5hbHR9XG4gICAgICAgICAgICAgICAgcm9sZT0naW1nJ1xuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuc3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3RoaXMucHJvcHMuc3JjfSlgLFxuICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgICZuYnNwO1xuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtaW1hZ2UvaW5kZXguanMiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5cbmNvbnN0IGlzRnVuY3Rpb24gPSAoeCkgPT4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5cbi8qKlxuSW5wdXQgYWJzdHJhY3RzIGF3YXkgdGhlIGNyb3NzLXBsYXRmb3JtIGRpZmZlcmVuY2VzIG9mIHBsYWNlaG9sZGVyIHN0eWxpbmcgYW5kIGJlaGF2aW9ycywgZm9yIGV4YW1wbGU6IEludGVybmV0IEV4cGxvcmVyIGRpc21pc3NlcyBuYXRpdmUgcGxhY2Vob2xkZXJzIG9uIGlucHV0IGZvY3VzIGFuZCBvdGhlciBwbGF0Zm9ybXMgZG8gbm90LiBUaGlzIGNvbXBvbmVudCBlbnN1cmVzIHRoYXQgdGV4dCBpbnB1dCBjb250cm9scyB3aWxsIGZlZWwgYW5kIGJlaGF2ZSBzaW1pbGFybHkgb24gbW9yZSBkZXZpY2VzLlxuXG4jIyBDb21wb25lbnQgSW5zdGFuY2UgTWV0aG9kc1xuXG5XaGVuIHVzaW5nIGBJbnB1dGAgaW4geW91ciBwcm9qZWN0LCB5b3UgbWF5IGNhbGwgdGhlIGZvbGxvd2luZyBtZXRob2RzIG9uIGEgcmVuZGVyZWQgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudC4gVXNlIFtgcmVmc2BdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvcmVmcy1hbmQtdGhlLWRvbS5odG1sKSB0byBnZXQgdGhlIGluc3RhbmNlLlxuXG4tIF9fZ2V0VmFsdWUoKV9fXG4gIHJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IGZpZWxkXG5cbi0gX19zZXRWYWx1ZShzdHJpbmcpX19cbiAgcHJvZ3JhbW1hdGljYWxseSBzZXQgdGhlIGlucHV0IHZhbHVlOyB1c2VmdWwgZm9yIGNsZWFyaW5nIG91dCB0aGUgaW5wdXQgaW4gXCJ1bmNvbnRyb2xsZWRcIiBtb2RlIC0tIG5vdGUgdGhhdCBkaWdnaW5nIGludG8gdGhlIGludGVybmFscyBhbmQgc2V0dGluZyB0aGUgYHJlZnMuZmllbGQudmFsdWUgPSAnJ2AgZGlyZWN0bHkgd2lsbCBub3QgdHJpZ2dlciBldmVudHMgYW5kIG1lc3NlcyB1cCB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGNvbXBvbmVudFxuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0IGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgKi9cbiAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvdmVycmlkZXMgdGhlIEhUTUwgY29udGFpbmVyIHRhZ1xuICAgICAgICAgKi9cbiAgICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0cmlnZ2VycyB0aGUgcGxhY2Vob2xkZXIgdG8gZGlzYXBwZWFyIHdoZW4gdGhlIGlucHV0IGZpZWxkIGlzIGZvY3VzZWQsIHJlYXBwZWFycyB3aGVuIHRoZSB1c2VyIGhhcyB0YWJiZWQgYXdheSBvciBmb2N1cyBpcyBtb3ZlZFxuICAgICAgICAgKi9cbiAgICAgICAgaGlkZVBsYWNlaG9sZGVyT25Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgaW5wdXRQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgICAgIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIH0pLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGhpZGVQbGFjZWhvbGRlck9uRm9jdXM6IHRydWUsXG4gICAgICAgIGlucHV0UHJvcHM6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoSW5wdXQuZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGlucHV0OiAnJyxcbiAgICAgICAgaXNDb250cm9sbGVkOiB0eXBlb2YgdGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQ29udHJvbGxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0SW5wdXRWYWx1ZSh0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRJbnB1dFZhbHVlKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSAhPT0gdGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnNldElucHV0VmFsdWUobmV4dFByb3BzLmlucHV0UHJvcHMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0SW5wdXRWYWx1ZSA9ICh2YWx1ZSA9ICcnKSA9PiB0aGlzLnNldFN0YXRlKHsgaW5wdXQ6IHZhbHVlIH0pXG5cbiAgICBnZXRWYWx1ZSA9ICgpID0+IHRoaXMucmVmcy5maWVsZC52YWx1ZVxuXG4gICAgc2V0VmFsdWUobmV4dFZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0SW5wdXRWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICB0aGlzLnJlZnMuZmllbGQudmFsdWUgPSBuZXh0VmFsdWU7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNDb250cm9sbGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBzaW11bGF0ZSBpbnB1dCBjaGFuZ2UgZXZlbnQgZmxvd1xuICAgICAgICAgICAgdGhpcy5yZWZzLmZpZWxkLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgICAgICAgICB0aGlzLnJlZnMuZmllbGQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScsIHsgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVCbHVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0ZvY3VzZWQ6IGZhbHNlIH0pO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkJsdXIpID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUZvY3VzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0ZvY3VzZWQ6IHRydWUgfSk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uRm9jdXMpID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgLy8gZm9yIFwiY29udHJvbGxlZFwiIHNjZW5hcmlvcywgdXBkYXRlcyB0byB0aGUgY2FjaGVkIGlucHV0IHRleHQgc2hvdWxkIGNvbWVcbiAgICAgICAgLy8gZXhjbHVzaXZlbHkgdmlhIHByb3BzIChjV1JQKSBzbyBpdCBleGFjdGx5IG1pcnJvcnMgdGhlIGN1cnJlbnQgYXBwbGljYXRpb25cbiAgICAgICAgLy8gc3RhdGUsIG90aGVyd2lzZSBhIHJlLXJlbmRlciB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbmV3IHRleHQgaGFzIGNvbXBsZXRlZCBpdHNcbiAgICAgICAgLy8gZmVlZGJhY2sgbG9vcCBhbmQgdGhlIGN1cnNvciBwb3NpdGlvbiBpcyBsb3N0XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQ29udHJvbGxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5wdXRWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFBsYWNlaG9sZGVyVGV4dCgpIHtcbiAgICAgICAgY29uc3QgaXNOb25FbXB0eSA9IHRoaXMuc3RhdGUuaW5wdXQgIT09ICcnO1xuICAgICAgICBjb25zdCBzaG91bGRTaG93UGxhY2Vob2xkZXIgPSB0aGlzLnByb3BzLmhpZGVQbGFjZWhvbGRlck9uRm9jdXMgPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnN0YXRlLmlzRm9jdXNlZCA9PT0gZmFsc2UgJiYgaXNOb25FbXB0eSA9PT0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpc05vbkVtcHR5ID09PSBmYWxzZTtcblxuICAgICAgICByZXR1cm4gc2hvdWxkU2hvd1BsYWNlaG9sZGVyID8gdGhpcy5wcm9wcy5pbnB1dFByb3BzLnBsYWNlaG9sZGVyIDogJyc7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgSW5wdXQuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWlucHV0LXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgdGl0bGU9e3RoaXMuZ2V0UGxhY2Vob2xkZXJUZXh0KCl9PlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5pbnB1dFByb3BzfVxuICAgICAgICAgICAgICAgICAgICByZWY9J2ZpZWxkJ1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWlucHV0JywgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtudWxsfVxuICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e3RoaXMuaGFuZGxlQmx1cn1cbiAgICAgICAgICAgICAgICAgICAgb25Gb2N1cz17dGhpcy5oYW5kbGVGb2N1c31cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ItaW5wdXQtcGxhY2Vob2xkZXIgYi1pbnB1dCc+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmdldFBsYWNlaG9sZGVyVGV4dCgpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtaW5wdXQvaW5kZXguanMiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IERpYWxvZyBmcm9tICdib3VuZGxlc3MtZGlhbG9nJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnYm91bmRsZXNzLXBvcnRhbCc7XG5pbXBvcnQgZXh0cmFjdENoaWxkUHJvcHMgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9iamVjdC1pbnRlcnNlY3Rpb24nO1xuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5cbi8qKlxuTW9kYWwgaXMgYW4gZW5oYW5jZW1lbnQgdXBvbiBbRGlhbG9nXShodHRwczovL2dpdGh1Yi5jb20vZW5pZ21hLWlvL2JvdW5kbGVzcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9ib3VuZGxlc3MtZGlhbG9nKS4gVHlwaWNhbGx5LCBhIG1hc2tpbmcgbGF5ZXIgaXMgcHJvdmlkZWQgdG8gb2JzY3VyZSB0aGUgcmVzdCBvZiB0aGUgcGFnZSBpbiBzb21lIGZhc2hpb24sIHdoaWxlIGFsc28gYmxvY2tpbmcgb3V0c2lkZSBjbGljayBhbmQga2V5c3Ryb2tlIGFjY2VzcyB1bnRpbCB0aGUgbW9kYWwgaXMgZGlzbWlzc2VkLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC4uLkRpYWxvZy5wcm9wVHlwZXMsXG5cbiAgICAgICAgbWFza1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICBtb2RhbFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICBwb3J0YWxQcm9wczogUHJvcFR5cGVzLnNoYXBlKFBvcnRhbC5wcm9wVHlwZXMpLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIC4uLkRpYWxvZy5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGNhcHR1cmVGb2N1czogdHJ1ZSxcbiAgICAgICAgbWFza1Byb3BzOiB7fSxcbiAgICAgICAgbW9kYWxQcm9wczoge30sXG4gICAgICAgIHBvcnRhbFByb3BzOiB7fSxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoTW9kYWwuZGVmYXVsdFByb3BzKVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8UG9ydGFsIHsuLi5wcm9wcy5wb3J0YWxQcm9wc30+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICB7Li4ub21pdChwcm9wcywgTW9kYWwuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICAgICAgcmVmPXsobm9kZSkgPT4gKHRoaXMuJG1vZGFsID0gbm9kZSl9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItbW9kYWwtd3JhcHBlcicsIHByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHMubWFza1Byb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1tb2RhbC1tYXNrJywgcHJvcHMubWFza1Byb3BzLmNsYXNzTmFtZSl9IC8+XG5cbiAgICAgICAgICAgICAgICAgICAgPERpYWxvZ1xuICAgICAgICAgICAgICAgICAgICAgICAgey4uLmV4dHJhY3RDaGlsZFByb3BzKHByb3BzLCBEaWFsb2cuZGVmYXVsdFByb3BzKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5wcm9wcy5tb2RhbFByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1tb2RhbCcsIHByb3BzLm1vZGFsUHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgICAgIDwvRGlhbG9nPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9Qb3J0YWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLW1vZGFsL2luZGV4LmpzIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBpc0ludGVnZXIgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgQXN5bmMgZnJvbSAnYm91bmRsZXNzLWFzeW5jJztcbmltcG9ydCBTZWdtZW50ZWRDb250cm9sIGZyb20gJ2JvdW5kbGVzcy1zZWdtZW50ZWQtY29udHJvbCc7XG5pbXBvcnQgQXJyb3dLZXlOYXZpZ2F0aW9uIGZyb20gJ2JvdW5kbGVzcy1hcnJvdy1rZXktbmF2aWdhdGlvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcbmltcG9ydCB1dWlkIGZyb20gJ2JvdW5kbGVzcy11dGlscy11dWlkJztcblxuY29uc3QgaWRlbnRpdHkgPSAoeCkgPT4geDtcbmNvbnN0IGlzRnVuY3Rpb24gPSAoeCkgPT4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbi8qKlxuICogUGFnaW5hdGlvbiBpcyBpbXBsZW1lbnRlZCBhcyBhbiBlbmNhcHN1bGF0ZWQgdmlldyBzeXN0ZW0sIGFjY2VwdGluZyBhbiBhcnJheSBvZiBpdGVtcyBhcyBpbnB1dC5cbiAqXG4gKiAjIyBDb21wb25lbnQgSW5zdGFuY2UgTWV0aG9kc1xuICpcbiAqIFdoZW4gdXNpbmcgYFBhZ2luYXRpb25gIGluIHlvdXIgcHJvamVjdCwgeW91IG1heSBjYWxsIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBvbiBhIHJlbmRlcmVkXG4gKiBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50LiBVc2UgW2ByZWZzYF0oaHR0cHM6Ly8gKiBmYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9yZWZzLWFuZC10aGUtZG9tLmh0bWwpXG4gKiB0byBnZXQgdGhlIGluc3RhbmNlLlxuICpcbiAqIC0gX19gY3VycmVudFBhZ2UoKWBfXyByZXR1cm5zIHRoZSBfX19vbmVfX18taW5kZXhlZCBwYWdlIG51bWJlciBjdXJyZW50bHkgaW4gdmlld1xuICpcbiAqIC0gX19ganVtcFRvSW5kZXgoaW5kZXg6IG51bWJlcilgX18gcmVuZGVycyB0aGUgcGFnZSB0aGF0IGNvbnRhaW5zIHRoZSBfX196ZXJvX19fLWluZGV4ZWQgaXRlbVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdpbmF0aW9uIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gICAgc3RhdGljIGNvbnRyb2wgPSB7XG4gICAgICAgIENVU1RPTTogdXVpZCgpLFxuICAgICAgICBGSVJTVDogdXVpZCgpLFxuICAgICAgICBMQVNUOiB1dWlkKCksXG4gICAgICAgIE5FWFQ6IHV1aWQoKSxcbiAgICAgICAgUFJFVklPVVM6IHV1aWQoKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgcG9zaXRpb24gPSB7XG4gICAgICAgIEFCT1ZFOiB1dWlkKCksXG4gICAgICAgIEJFTE9XOiB1dWlkKCksXG4gICAgICAgIEJPVEg6IHV1aWQoKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgQ09OVFJPTF9EQVRBX0FUVFJJQlVURSA9ICdkYXRhLXBhZ2UtY29udHJvbCdcblxuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYXJiaXRyYXJ5IGNvbnRlbnQgdG8gYmUgcmVuZGVyZWQgYWZ0ZXIgdGhlIGl0ZW1zIGluIHRoZSBET01cbiAgICAgICAgICovXG4gICAgICAgIGFmdGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYXJiaXRyYXJ5IGNvbnRlbnQgdG8gYmUgcmVuZGVyZWQgYmVmb3JlIHRoZSBpdGVtcyBpbiB0aGUgRE9NXG4gICAgICAgICAqL1xuICAgICAgICBiZWZvcmU6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIGNvbnRyb2xXcmFwcGVyUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbGxvd3MgZm9yIGFyYml0cmFyeSBjb250ZW50IHRvIGJlIHJlbmRlcmVkIGludG8gdGhlIGNvbnRyb2wgYXJlYVxuICAgICAgICAgKi9cbiAgICAgICAgY3VzdG9tQ29udHJvbENvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2l0aCBhIGRlc2lyZWQgaXRlbSBpbmRleCB3aGVuIHRoYXQgaXRlbSBjb21lcyBpbnRvIHZpZXc7XG4gICAgICAgICAqIGFjY2VwdHMgYSBgUHJvbWlzZWAgaWYgeW91IG5lZWQgdG8gZmV0Y2ggdGhlIHJvdyBhc3luY2hyb25vdXNseVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0SXRlbTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZG9lcyBub3QgcmVuZGVyIHRoZSBwYWdpbmcgY29udHJvbHMgaWYgdGhlIG51bWJlciBvZiBpdGVtcyBzdXBwbGllZFxuICAgICAgICAgKiB0byB0aGUgdmlldyBpcyBsZXNzLXRoYW4tb3ItZXF1YWwtdG8gdGhlIG51bWJlciBvZiBpdGVtcyB0byBzaG93XG4gICAgICAgICAqIHBlciBwYWdlIHZpYSBgcHJvcHMubnVtSXRlbXNQZXJQYWdlYFxuICAgICAgICAgKi9cbiAgICAgICAgaGlkZVBhZ2VySWZOb3ROZWVkZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIHVuaXF1ZSBuYW1lIGZvciB0aGUgZGF0YSBzb3VyY2UgYmVpbmcgY29uc3VtZWQ7IHBhc3MgYVxuICAgICAgICAgKiBkaWZmZXJlbnQgbmFtZSB0byBjYXVzZSB0aGUgdmlldyB0byBmdWxseSByZXNldCBhbmQgcHVsbCBmcmVzaCBkYXRhXG4gICAgICAgICAqL1xuICAgICAgICBpZGVudGlmaWVyOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSAoX19vbmUtaW5kZXhlZF9fKSBudW1iZXIgb2YgdGhlIHBhZ2UgdGhhdCBzaG91bGQgYmUgaW5pdGlhbGx5XG4gICAgICAgICAqIGRpc3BsYXllZDsgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICAgICAqIHRoZSB0b3RhbCBudW1iZXIgb2YgcGFnZXNcbiAgICAgICAgICovXG4gICAgICAgIGluaXRpYWxQYWdlOiBmdW5jdGlvbiB2YWxpZGF0ZUluaXRpYWxQYWdlKHByb3BzKSB7XG4gICAgICAgICAgICBpZiAoaXNJbnRlZ2VyKHByb3BzLmluaXRpYWxQYWdlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdgaW5pdGlhbFBhZ2VgIG11c3QgYmUgYW4gaW50ZWdlci4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbnVtYmVyT2ZQYWdlcyA9IE1hdGguY2VpbChwcm9wcy50b3RhbEl0ZW1zIC8gcHJvcHMubnVtSXRlbXNQZXJQYWdlKTtcblxuICAgICAgICAgICAgaWYgKHByb3BzLmluaXRpYWxQYWdlIDwgMSB8fCBwcm9wcy5pbml0aWFsUGFnZSA+IG51bWJlck9mUGFnZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdgaW5pdGlhbFBhZ2VgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCAnICsgbnVtYmVyT2ZQYWdlcyArICcuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFsbG93cyBmb3IgYXJiaXRyYXJ5IGNvbnRlbnQgdG8gYmUgcmVuZGVyZWQgaW50byBwYWdpbmF0aW9uIGl0ZW1zXG4gICAgICAgICAqIGFzIHRoZXkncmUgbG9hZGluZyBpZiB0aGUgYmFja2luZyBkYXRhIGlzIGEgYFByb21pc2VgXG4gICAgICAgICAqL1xuICAgICAgICBpdGVtTG9hZGluZ0NvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbiBmdW5jdGlvbiB0byBzcGVjaWZ5IGhvdyBhbiBpdGVtIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgICAgICAgICogdG8gSlNYLCBpZiBpdCBpcyBub3QgYWxyZWFkeSByZW5kZXJhYmxlIGJ5IFJlYWN0XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGpzeFxuICAgICAgICAgKlxuICAgICAgICAgKiBjb25zdCBnZXRJdGVtID0gKCkgPT4gKHtpZDogMTIzNCwgdGV4dDogJ2Zvbyd9KTtcbiAgICAgICAgICogY29uc3Qgb2JqVG9KU1ggPSAoe2lkLCB0ZXh0fSkgPT4gPGRpdiBkYXRhLWlkPXtpZH0+e3RleHR9PC9kaXY+O1xuICAgICAgICAgKlxuICAgICAgICAgKiA8UGFnaW5hdGlvblxuICAgICAgICAgKiAgICAgZ2V0SXRlbT17Z2V0SXRlbX1cbiAgICAgICAgICogICAgIGlkZW50aWZlcj0nZm9vJ1xuICAgICAgICAgKiAgICAgaXRlbVRvSlNYQ29udmVydGVyPXtvYmpUb0pTWH1cbiAgICAgICAgICogICAgIHRvdGFsSXRlbXM9ezF9IC8+XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgaXRlbVRvSlNYQ29udmVydGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICBpdGVtV3JhcHBlclByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY29udGVudCB0byBiZSBkaXNwbGF5ZWQgaW5zaWRlIG9mIHRoZSBcIkZpcnN0IHBhZ2VcIiBjb250cm9sIGJ1dHRvblxuICAgICAgICAgKi9cbiAgICAgICAganVtcFRvRmlyc3RQYWdlQ29udHJvbENvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgb2YgdGhlIFwiTGFzdCBwYWdlXCIgY29udHJvbCBidXR0b25cbiAgICAgICAgICovXG4gICAgICAgIGp1bXBUb0xhc3RQYWdlQ29udHJvbENvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgb2YgdGhlIFwiTmV4dCBwYWdlXCIgY29udHJvbCBidXR0b25cbiAgICAgICAgICovXG4gICAgICAgIGp1bXBUb05leHRQYWdlQ29udHJvbENvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBpbnNpZGUgb2YgdGhlIFwiUHJldmlvdXMgcGFnZVwiIGNvbnRyb2wgYnV0dG9uXG4gICAgICAgICAqL1xuICAgICAgICBqdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVtcyB0byBiZSBkaXNwbGF5ZWQgb24gZWFjaCBwYWdlOyBtdXN0IGJlXG4gICAgICAgICAqIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgICAgICAqL1xuICAgICAgICBudW1JdGVtc1BlclBhZ2U6IGZ1bmN0aW9uIHZhbGlkYXRlTnVtSXRlbXNQZXJQYWdlKHByb3BzKSB7XG4gICAgICAgICAgICBpZiAoaXNJbnRlZ2VyKHByb3BzLm51bUl0ZW1zUGVyUGFnZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignYG51bUl0ZW1zUGVyUGFnZWAgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5udW1JdGVtc1BlclBhZ2UgPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignYG51bUl0ZW1zUGVyUGFnZWAgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIG1heGltdW0gbnVtYmVyIG9mIHBhZ2VzIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgY29udHJvbCBiYXIgYXRcbiAgICAgICAgICogb25lIHRpbWVcbiAgICAgICAgICovXG4gICAgICAgIG51bVBhZ2VUb2dnbGVzOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBhZ2luYXRpb24gY29udHJvbHMgYXJlIGRpc3BsYXllZCBhYm92ZSxcbiAgICAgICAgICogYmVsb3csIG9yIGJvdGggYWJvdmUgYW5kIGJlbG93IHRoZSBjb250ZW50XG4gICAgICAgICAqL1xuICAgICAgICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICAgICAgIFBhZ2luYXRpb24ucG9zaXRpb24uQUJPVkUsXG4gICAgICAgICAgICBQYWdpbmF0aW9uLnBvc2l0aW9uLkJFTE9XLFxuICAgICAgICAgICAgUGFnaW5hdGlvbi5wb3NpdGlvbi5CT1RILFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogd2hldGhlciB0aGUgXCJmaXJzdCBwYWdlXCIgY29udHJvbCBidXR0b24gc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0p1bXBUb0ZpcnN0UGFnZUNvbnRyb2w6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB3aGV0aGVyIHRoZSBcImxhc3QgcGFnZVwiIGNvbnRyb2wgYnV0dG9uIHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNob3dKdW1wVG9MYXN0UGFnZUNvbnRyb2w6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB3aGV0aGVyIHRoZSBcIm5leHQgcGFnZVwiIGNvbnRyb2wgYnV0dG9uIHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNob3dKdW1wVG9OZXh0UGFnZUNvbnRyb2w6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB3aGV0aGVyIHRoZSBcInByZXZpb3VzIHBhZ2VcIiBjb250cm9sIGJ1dHRvbiBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAgICAgICAqL1xuICAgICAgICBzaG93SnVtcFRvUHJldmlvdXNQYWdlQ29udHJvbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlbmRlcnMgYW4gZWxlbWVudCBjYWxsZWQgYC5iLXBhZ2luYXRpb24tY29udHJvbC1zdGF0ZWAgdGhhdFxuICAgICAgICAgKiBjb250YWlucyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcGFnaW5hdGlvbiBsaWtlIFwiMSBvZiAxMFwiO1xuICAgICAgICAgKiBhbHRlcm5hdGl2ZWx5LCB0aGlzIHByb3AgYWxzbyBhY2NlcHRzIGEgZnVuY3Rpb24gdGhhdCBpdCB3aWxsXG4gICAgICAgICAqIGNhbGwgd2l0aCB0aGUgY3VycmVudFBhZ2UgYW5kIHRvdGFsUGFnZXMgZm9yIHlvdSB0byBmb3JtYXQ6XG5cbiAgICAgICAgICogYGBganN4XG4gICAgICAgICAqIHNob3dQYWdpbmF0ZWRTdGF0ZT17XG4gICAgICAgICAqICAgICAoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpID0+IChcbiAgICAgICAgICogICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZm9vJz5cbiAgICAgICAgICogICAgICAgICAgICAgWW91J3JlIG9uIHBhZ2Uge2N1cnJlbnRQYWdlfSBvZiB7dG90YWxQYWdlc30gcGFnZXMhXG4gICAgICAgICAqICAgICAgICAgPC9kaXY+XG4gICAgICAgICAqICAgICApXG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBzaG93UGFnaW5hdGlvblN0YXRlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5ib29sLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIF0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgdmlld1xuICAgICAgICAgKi9cbiAgICAgICAgdG90YWxJdGVtczogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGFmdGVyOiBudWxsLFxuICAgICAgICBiZWZvcmU6IG51bGwsXG4gICAgICAgIGNvbnRyb2xXcmFwcGVyUHJvcHM6IHt9LFxuICAgICAgICBjdXN0b21Db250cm9sQ29udGVudDogbnVsbCxcbiAgICAgICAgZ2V0SXRlbTogbm9vcCxcbiAgICAgICAgaGlkZVBhZ2VySWZOb3ROZWVkZWQ6IGZhbHNlLFxuICAgICAgICBpZGVudGlmaWVyOiB1dWlkKCksXG4gICAgICAgIGluaXRpYWxQYWdlOiAxLFxuICAgICAgICBpdGVtTG9hZGluZ0NvbnRlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgaXRlbVRvSlNYQ29udmVydGVyOiBpZGVudGl0eSxcbiAgICAgICAgaXRlbVdyYXBwZXJQcm9wczoge30sXG4gICAgICAgIGp1bXBUb0ZpcnN0UGFnZUNvbnRyb2xDb250ZW50OiAn4oekJyxcbiAgICAgICAganVtcFRvTGFzdFBhZ2VDb250cm9sQ29udGVudDogJ+KHpScsXG4gICAgICAgIGp1bXBUb05leHRQYWdlQ29udHJvbENvbnRlbnQ6ICfihpInLFxuICAgICAgICBqdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sQ29udGVudDogJ+KGkCcsXG4gICAgICAgIG51bUl0ZW1zUGVyUGFnZTogMTAsXG4gICAgICAgIG51bVBhZ2VUb2dnbGVzOiA1LFxuICAgICAgICBwb3NpdGlvbjogUGFnaW5hdGlvbi5wb3NpdGlvbi5BQk9WRSxcbiAgICAgICAgc2hvd0p1bXBUb0ZpcnN0UGFnZUNvbnRyb2w6IHRydWUsXG4gICAgICAgIHNob3dKdW1wVG9MYXN0UGFnZUNvbnRyb2w6IHRydWUsXG4gICAgICAgIHNob3dKdW1wVG9OZXh0UGFnZUNvbnRyb2w6IHRydWUsXG4gICAgICAgIHNob3dKdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sOiB0cnVlLFxuICAgICAgICBzaG93UGFnaW5hdGlvblN0YXRlOiB0cnVlLFxuICAgICAgICB0b3RhbEl0ZW1zOiBudWxsLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhQYWdpbmF0aW9uLmRlZmF1bHRQcm9wcylcblxuICAgIG1vdW50ZWQgPSBmYWxzZVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGN1cnJlbnRQYWdlOiB0aGlzLnByb3BzLmluaXRpYWxQYWdlLFxuICAgICAgICB0YXJnZXRJbmRleDogKHRoaXMucHJvcHMuaW5pdGlhbFBhZ2UgLSAxKSAqIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlLFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjdXJyZW50UGFnZSA9ICgpID0+IHRoaXMuc3RhdGUuY3VycmVudFBhZ2VcblxuICAgIGdldFBhZ2VGb3JJbmRleCA9IChpbmRleCwgaXRlbXNQZXJQYWdlID0gdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpID0+IE1hdGguY2VpbCgoaW5kZXggKyAxKSAvIGl0ZW1zUGVyUGFnZSlcbiAgICB0b3RhbFBhZ2VzID0gKCkgPT4gTWF0aC5jZWlsKHRoaXMucHJvcHMudG90YWxJdGVtcyAvIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlKVxuXG4gICAgZmlyc3RWaXNpYmxlSXRlbUluZGV4ID0gKCkgPT4gKHRoaXMuY3VycmVudFBhZ2UoKSAtIDEpICogdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2VcblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkgICAgIHsgdGhpcy5tb3VudGVkID0gdHJ1ZTsgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgIHsgdGhpcy5tb3VudGVkID0gZmFsc2U7IH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShfLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKHByZXZTdGF0ZS5jdXJyZW50UGFnZSAhPT0gdGhpcy5jdXJyZW50UGFnZSgpKSB7XG4gICAgICAgICAgICBmaW5kRE9NTm9kZSh0aGlzLnJlZnMuaXRlbV8wKS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpIHtcbiAgICAgICAgY29uc3Qgb2xkUHJvcHMgPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIC8vIHVzZSB0cmFuc2FjdGlvbmFsIGBzZXRTdGF0ZSgpYCBzeW50YXggdG8gZW5zdXJlIHRoYXQgcGVuZGluZyBzdGF0ZSB1cGRhdGVzIGFyZSBob25vcmVkLFxuICAgICAgICAvLyBsaWtlIHRob3NlIGZyb20gYGp1bXBUb0luZGV4KClgXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlLCBwcm9wcykgPT4ge1xuICAgICAgICAgICAgLy8gTk9URTogYHByb3BzYCBoZXJlIGlzIHRlY2huaWNhbGx5IHRoZSBgbmV4dFByb3BzYCB5b3UnZCByZWNlaXZlIGZyb20gdGhlIGZpcnN0IGNXUlAgYXJndW1lbnRcbiAgICAgICAgICAgIC8vIHNvIHRoYXQncyB3aHkgd2UncmUgY2FjaGluZyBgb2xkUHJvcHNgIG91dHNpZGUgdGhlIGBzZXRTdGF0ZWBcbiAgICAgICAgICAgIGlmIChwcm9wcy5pZGVudGlmaWVyICE9PSBvbGRQcm9wcy5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEluZGV4OiAwLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMuZ2V0UGFnZUZvckluZGV4KHN0YXRlLnRhcmdldEluZGV4LCBwcm9wcy5udW1JdGVtc1BlclBhZ2UpLFxuICAgICAgICAgICAgICAgIHRhcmdldEluZGV4OiBzdGF0ZS50YXJnZXRJbmRleCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBqdW1wVG9JbmRleCA9IChpKSA9PiB7XG4gICAgICAgIGlmIChpIDwgMCB8fCBpID49IHRoaXMucHJvcHMudG90YWxJdGVtcykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbm5vdCBwYWdlIHRvIGludmFsaWQgaW5kZXggJHtpfS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMuZ2V0UGFnZUZvckluZGV4KGkpLFxuICAgICAgICAgICAgdGFyZ2V0SW5kZXg6IGksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdlbmVyYXRlQ29udHJvbHMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBbXTtcbiAgICAgICAgY29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLmN1cnJlbnRQYWdlKCk7XG4gICAgICAgIGNvbnN0IHRvdGFsUGFnZXMgPSB0aGlzLnRvdGFsUGFnZXMoKTtcbiAgICAgICAgY29uc3Qgc3RhcnRQYWdlID0gY3VycmVudFBhZ2UgLSAoKGN1cnJlbnRQYWdlIC0gMSkgJSB0aGlzLnByb3BzLm51bVBhZ2VUb2dnbGVzKTtcbiAgICAgICAgY29uc3QgZW5kUGFnZSA9IE1hdGgubWluKHN0YXJ0UGFnZSArIHRoaXMucHJvcHMubnVtUGFnZVRvZ2dsZXMgLSAxLCB0b3RhbFBhZ2VzKTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zaG93UGFnaW5hdGlvblN0YXRlKSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBpc0Z1bmN0aW9uKHRoaXMucHJvcHMuc2hvd1BhZ2luYXRpb25TdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnByb3BzLnNob3dQYWdpbmF0aW9uU3RhdGUoY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYCR7Y3VycmVudFBhZ2V9IC8gJHt0b3RhbFBhZ2VzfWAsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtc3RhdGUnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zaG93SnVtcFRvRmlyc3RQYWdlQ29udHJvbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBbUGFnaW5hdGlvbi5DT05UUk9MX0RBVEFfQVRUUklCVVRFXTogUGFnaW5hdGlvbi5jb250cm9sLkZJUlNULFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmp1bXBUb0ZpcnN0UGFnZUNvbnRyb2xDb250ZW50LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ItcGFnaW5hdGlvbi1jb250cm9sIGItcGFnaW5hdGlvbi1jb250cm9sLWZpcnN0JyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogY3VycmVudFBhZ2UgPT09IDEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNob3dKdW1wVG9QcmV2aW91c1BhZ2VDb250cm9sKSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIFtQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEVdOiBQYWdpbmF0aW9uLmNvbnRyb2wuUFJFVklPVVMsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuanVtcFRvUHJldmlvdXNQYWdlQ29udHJvbENvbnRlbnQsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wgYi1wYWdpbmF0aW9uLWNvbnRyb2wtcHJldmlvdXMnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBjdXJyZW50UGFnZSA9PT0gMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0UGFnZTsgaSA8PSBlbmRQYWdlOyBpKyspIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV06IGksXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IGksXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYi1wYWdpbmF0aW9uLWNvbnRyb2wnLFxuICAgICAgICAgICAgICAgIHByZXNzZWQ6IGN1cnJlbnRQYWdlID09PSBpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zaG93SnVtcFRvTmV4dFBhZ2VDb250cm9sKSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIFtQYWdpbmF0aW9uLkNPTlRST0xfREFUQV9BVFRSSUJVVEVdOiBQYWdpbmF0aW9uLmNvbnRyb2wuTkVYVCxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5qdW1wVG9OZXh0UGFnZUNvbnRyb2xDb250ZW50LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ItcGFnaW5hdGlvbi1jb250cm9sIGItcGFnaW5hdGlvbi1jb250cm9sLW5leHQnLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBjdXJyZW50UGFnZSA9PT0gdG90YWxQYWdlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd0p1bXBUb0xhc3RQYWdlQ29udHJvbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICBbUGFnaW5hdGlvbi5DT05UUk9MX0RBVEFfQVRUUklCVVRFXTogUGFnaW5hdGlvbi5jb250cm9sLkxBU1QsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuanVtcFRvTGFzdFBhZ2VDb250cm9sQ29udGVudCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdiLXBhZ2luYXRpb24tY29udHJvbCBiLXBhZ2luYXRpb24tY29udHJvbC1sYXN0JyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogY3VycmVudFBhZ2UgPT09IHRvdGFsUGFnZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmN1c3RvbUNvbnRyb2xDb250ZW50KSB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmN1c3RvbUNvbnRyb2xDb250ZW50LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ItcGFnaW5hdGlvbi1jb250cm9sIGItcGFnaW5hdGlvbi1jb250cm9sLWN1c3RvbScsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIGdlbmVyYXRlSXRlbXMoKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGNvbnN0IGZpcnN0SW5kZXggPSB0aGlzLmZpcnN0VmlzaWJsZUl0ZW1JbmRleCgpO1xuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBNYXRoLm1pbih0aGlzLnByb3BzLnRvdGFsSXRlbXMsIGZpcnN0SW5kZXggKyB0aGlzLnByb3BzLm51bUl0ZW1zUGVyUGFnZSkgLSAxO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHRoaXMucHJvcHMuZ2V0SXRlbShpKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuXG4gICAgaGFuZGxlUGFnZVNlbGVjdGVkID0gKG9wdGlvbikgPT4ge1xuICAgICAgICBsZXQgbmV4dFRhcmdldEluZGV4O1xuXG4gICAgICAgIHN3aXRjaCAob3B0aW9uW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV0pIHtcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY2FzZSBQYWdpbmF0aW9uLmNvbnRyb2wuRklSU1Q6XG4gICAgICAgICAgICBuZXh0VGFyZ2V0SW5kZXggPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYWdpbmF0aW9uLmNvbnRyb2wuUFJFVklPVVM6XG4gICAgICAgICAgICBuZXh0VGFyZ2V0SW5kZXggPSB0aGlzLmZpcnN0VmlzaWJsZUl0ZW1JbmRleCgpIC0gdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2U7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBhZ2luYXRpb24uY29udHJvbC5ORVhUOlxuICAgICAgICAgICAgbmV4dFRhcmdldEluZGV4ID0gdGhpcy5maXJzdFZpc2libGVJdGVtSW5kZXgoKSArIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQYWdpbmF0aW9uLmNvbnRyb2wuTEFTVDpcbiAgICAgICAgICAgIG5leHRUYXJnZXRJbmRleCA9IHRoaXMucHJvcHMudG90YWxJdGVtcyAtIDE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbmV4dFRhcmdldEluZGV4ID0gcGFyc2VJbnQob3B0aW9uW1BhZ2luYXRpb24uQ09OVFJPTF9EQVRBX0FUVFJJQlVURV0sIDEwKSAqIHRoaXMucHJvcHMubnVtSXRlbXNQZXJQYWdlIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMuZ2V0UGFnZUZvckluZGV4KG5leHRUYXJnZXRJbmRleCksXG4gICAgICAgICAgICB0YXJnZXRJbmRleDogbmV4dFRhcmdldEluZGV4LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVJdGVtUHJvbWlzZUZ1bGZpbGxtZW50ID0gKHBheWxvYWQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaXRlbVRvSlNYQ29udmVydGVyKHBheWxvYWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVySXRlbXMoKSB7XG4gICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcy5pdGVtV3JhcHBlclByb3BzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QXJyb3dLZXlOYXZpZ2F0aW9uXG4gICAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcGFnaW5hdGlvbi1pdGVtcycsIHByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLmdlbmVyYXRlSXRlbXMoKS5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8QXN5bmNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e2luZGV4ID09PSAwID8gJ2l0ZW1fMCcgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1wYWdpbmF0aW9uLWl0ZW0nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiLXBhZ2luYXRpb24taXRlbS1ldmVuJzogaW5kZXggJSAyID09PSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYi1wYWdpbmF0aW9uLWl0ZW0tb2RkJzogaW5kZXggJSAyICE9PSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGFnaW5hdGlvbi1pbmRleD17dGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UgKiAodGhpcy5jdXJyZW50UGFnZSgpIC0gMSkgKyBpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQ29udGVudD17dGhpcy5wcm9wcy5pdGVtTG9hZGluZ0NvbnRlbnR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtIGluc3RhbmNlb2YgUHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGl0ZW0udGhlbih0aGlzLmhhbmRsZUl0ZW1Qcm9taXNlRnVsZmlsbG1lbnQsIHRoaXMuaGFuZGxlSXRlbVByb21pc2VGdWxmaWxsbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnByb3BzLml0ZW1Ub0pTWENvbnZlcnRlcihpdGVtKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQXN5bmM+XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L0Fycm93S2V5TmF2aWdhdGlvbj5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJDb250cm9scyhwb3NpdGlvbikge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5oaWRlUGFnZXJJZk5vdE5lZWRlZCAmJiB0aGlzLnByb3BzLnRvdGFsSXRlbXMgPD0gdGhpcy5wcm9wcy5udW1JdGVtc1BlclBhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8U2VnbWVudGVkQ29udHJvbFxuICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmNvbnRyb2xXcmFwcGVyUHJvcHN9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1wYWdpbmF0aW9uLWNvbnRyb2xzJywgdGhpcy5wcm9wcy5jb250cm9sV3JhcHBlclByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBbJ2ItcGFnaW5hdGlvbi1jb250cm9scy1hYm92ZSddOiBwb3NpdGlvbiA9PT0gUGFnaW5hdGlvbi5wb3NpdGlvbi5BQk9WRSxcbiAgICAgICAgICAgICAgICAgICAgWydiLXBhZ2luYXRpb24tY29udHJvbHMtYmVsb3cnXTogcG9zaXRpb24gPT09IFBhZ2luYXRpb24ucG9zaXRpb24uQkVMT1csXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgb3B0aW9ucz17dGhpcy5nZW5lcmF0ZUNvbnRyb2xzKCl9XG4gICAgICAgICAgICAgICAgb25PcHRpb25TZWxlY3RlZD17dGhpcy5oYW5kbGVQYWdlU2VsZWN0ZWR9IC8+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVyVmlldygpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgcCA9IFBhZ2luYXRpb24ucG9zaXRpb247XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdiLXBhZ2luYXRpb24nPlxuICAgICAgICAgICAgICAgIHtwb3NpdGlvbiA9PT0gcC5BQk9WRSB8fCBwb3NpdGlvbiA9PT0gcC5CT1RIID8gdGhpcy5yZW5kZXJDb250cm9scyhwLkFCT1ZFKSA6IG51bGx9XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYmVmb3JlfVxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckl0ZW1zKCl9XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYWZ0ZXJ9XG4gICAgICAgICAgICAgICAge3Bvc2l0aW9uID09PSBwLkJFTE9XIHx8IHBvc2l0aW9uID09PSBwLkJPVEggPyB0aGlzLnJlbmRlckNvbnRyb2xzKHAuQkVMT1cpIDogbnVsbH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgey4uLm9taXQodGhpcy5wcm9wcywgUGFnaW5hdGlvbi5pbnRlcm5hbEtleXMpfSBjbGFzc05hbWU9e2N4KCdiLXBhZ2luYXRpb24td3JhcHBlcicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyVmlldygpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vaW5kZXguanMiLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvX1N5bWJvbC5qcyIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9+L2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL34vbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvX3Jvb3QuanMiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzSW50ZWdlcigzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzSW50ZWdlcignMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0ludGVnZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9+L2xvZGFzaC9pc0ludGVnZXIuanMiLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy1wYWdpbmF0aW9uL34vbG9kYXNoL2lzT2JqZWN0LmpzIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ2YXIgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwODtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRmluaXRlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvdG9GaW5pdGUuanMiLCJ2YXIgdG9GaW5pdGUgPSByZXF1aXJlKCcuL3RvRmluaXRlJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9JbnRlZ2VyKDMuMik7XG4gKiAvLyA9PiAzXG4gKlxuICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiAwXG4gKlxuICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gKiAvLyA9PiAzXG4gKi9cbmZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9JbnRlZ2VyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBhZ2luYXRpb24vfi9sb2Rhc2gvdG9JbnRlZ2VyLmpzIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtcGFnaW5hdGlvbi9+L2xvZGFzaC90b051bWJlci5qcyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjbG9uZUVsZW1lbnQsIGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBEaWFsb2cgZnJvbSAnYm91bmRsZXNzLWRpYWxvZyc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJ2JvdW5kbGVzcy1wb3J0YWwnO1xuaW1wb3J0IG9taXQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLW9taXQta2V5cyc7XG5pbXBvcnQgdHJhbnNmb3JtUHJvcCBmcm9tICdib3VuZGxlc3MtdXRpbHMtdHJhbnNmb3JtLXByb3BlcnR5JztcblxuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVDYXJkaW5hbChkaXJlY3Rpb24pIHtcbiAgICBzd2l0Y2ggKGRpcmVjdGlvblswXSkge1xuICAgIGNhc2UgJ04nOlxuICAgICAgICByZXR1cm4gJ1MnO1xuICAgIGNhc2UgJ1MnOlxuICAgICAgICByZXR1cm4gJ04nO1xuICAgIGNhc2UgJ0UnOlxuICAgICAgICByZXR1cm4gJ1cnO1xuICAgIH1cblxuICAgIHJldHVybiAnRSc7XG59XG5cbmZ1bmN0aW9uIHdpdGhvdXQoYXJyMSwgYXJyMikgeyByZXR1cm4gYXJyMS5maWx0ZXIoKGl0ZW0pID0+IGFycjIuaW5kZXhPZihpdGVtKSA9PT0gLTEpOyB9XG5cbmNvbnN0IENMQVNTX1JFTU9WQUxfUkVHRVggPSAvXFxzP2ItcG9wb3Zlci0oYW5jaG9yfHNlbGYpLShzdGFydHxtaWRkbGV8ZW5kKS9nO1xuXG5jb25zdCBERUZBVUxUX0NBUkVUX0NPTVBPTkVOVCA9IChcbiAgICA8c3ZnIHZpZXdCb3g9JzAgMCAxNCA5LjUnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc+XG4gICAgICAgIDxnPlxuICAgICAgICAgICAgPHBvbHlnb24gY2xhc3NOYW1lPSdiLXBvcG92ZXItY2FyZXQtYm9yZGVyJyBmaWxsPScjMDAwJyBwb2ludHM9JzcgMCAxNCAxMCAwIDEwJyAvPlxuICAgICAgICAgICAgPHBvbHlnb24gY2xhc3NOYW1lPSdiLXBvcG92ZXItY2FyZXQtZmlsbCcgZmlsbD0nI0ZGRicgcG9pbnRzPSc2Ljk4MjMwNDQ0IDEuNzUgMTIuNzUgMTAgMS4yNSAxMCcgLz5cbiAgICAgICAgPC9nPlxuICAgIDwvc3ZnPlxuKTtcblxuY29uc3QgU1RBUlQgPSAwO1xuY29uc3QgTUlERExFID0gMTtcbmNvbnN0IEVORCA9IDI7XG5cbmNvbnN0IGNvbWJpbmF0aW9ucyA9IFtcbiAgICB7IG5hbWU6ICdOTlcnLCAgIGF4OiBTVEFSVCwgICAgIGF5OiBTVEFSVCwgICAgICBkeDogU1RBUlQsICAgZHk6IEVORCB9LFxuICAgIHsgbmFtZTogJ04nLCAgICAgYXg6IE1JRERMRSwgICAgYXk6IFNUQVJULCAgICAgIGR4OiBNSURETEUsICBkeTogRU5EIH0sXG4gICAgeyBuYW1lOiAnTk5FJywgICBheDogRU5ELCAgICAgICBheTogU1RBUlQsICAgICAgZHg6IEVORCwgICAgIGR5OiBFTkQgfSxcbiAgICB7IG5hbWU6ICdFTkUnLCAgIGF4OiBFTkQsICAgICAgIGF5OiBTVEFSVCwgICAgICBkeDogU1RBUlQsICAgZHk6IFNUQVJUIH0sXG4gICAgeyBuYW1lOiAnRScsICAgICBheDogRU5ELCAgICAgICBheTogTUlERExFLCAgICAgZHg6IFNUQVJULCAgIGR5OiBNSURETEUgfSxcbiAgICB7IG5hbWU6ICdFU0UnLCAgIGF4OiBFTkQsICAgICAgIGF5OiBFTkQsICAgICAgICBkeDogU1RBUlQsICAgZHk6IEVORCB9LFxuICAgIHsgbmFtZTogJ1NTRScsICAgYXg6IEVORCwgICAgICAgYXk6IEVORCwgICAgICAgIGR4OiBFTkQsICAgICBkeTogU1RBUlQgfSxcbiAgICB7IG5hbWU6ICdTJywgICAgIGF4OiBNSURETEUsICAgIGF5OiBFTkQsICAgICAgICBkeDogTUlERExFLCAgZHk6IFNUQVJUIH0sXG4gICAgeyBuYW1lOiAnU1NXJywgICBheDogU1RBUlQsICAgICBheTogRU5ELCAgICAgICAgZHg6IFNUQVJULCAgIGR5OiBTVEFSVCB9LFxuICAgIHsgbmFtZTogJ1dTVycsICAgYXg6IFNUQVJULCAgICAgYXk6IEVORCwgICAgICAgIGR4OiBFTkQsICAgICBkeTogRU5EIH0sXG4gICAgeyBuYW1lOiAnVycsICAgICBheDogU1RBUlQsICAgICBheTogTUlERExFLCAgICAgZHg6IEVORCwgICAgIGR5OiBNSURETEUgfSxcbiAgICB7IG5hbWU6ICdXTlcnLCAgIGF4OiBTVEFSVCwgICAgIGF5OiBTVEFSVCwgICAgICBkeDogRU5ELCAgICAgZHk6IFNUQVJUIH0sXG5dO1xuXG4vKipcbkEgcG9wb3ZlciBpcyBhIHR5cGUgb2YgW0RpYWxvZ10oaHR0cHM6Ly9naXRodWIuY29tL2VuaWdtYS1pby9ib3VuZGxlc3MvdHJlZS9tYXN0ZXIvcGFja2FnZXMvYm91bmRsZXNzLWRpYWxvZykgdGhhdCBpcyBtZWFudCB0byBwcm92aWRlIGFkZGl0aW9uYWwgY29udGV4dCB0byBjb250ZW50IChhbiBcImFuY2hvclwiKSBjdXJyZW50bHkgb24tc2NyZWVuLiBUeXBpY2FsbHksIGEgcG9wb3ZlciBpcyBzcGF3bmVkIGJ5IGludGVyYWN0aW5nIHdpdGggdGhlIGNvbnRlbnQgaXQgZW5yaWNoZXMgYW5kIGlzIGRpc21pc3NlZCBieSBjbGlja2luZyBvciBzaGlmdGluZyBmb2N1cyB0byBhbiBhbHRlcm5hdGUgbG9jYXRpb24uXG5cbkFsaWdubWVudCBvcHRpb25zIGZvciB0aGUgcG9wb3ZlciBhcmUgZGVzaWduZWQgdG8gbWlycm9yIGNvbXBhc3MgZGlyZWN0aW9uczpcblxuYGBgXG4gICAgICAg4oaSICAgICAgIOKGkFxuICAgICAgTk5XICBOICBOTkVcbuKGkyBXTlcgICAgICAgICAgICAgRU5FIOKGk1xuICAgIFcgICBBTkNIT1IgICAgRVxu4oaRIFdTVyAgICAgICAgICAgICBFU0Ug4oaRXG4gICAgICBTU1cgIFMgIFNTRVxuICAgICAgIOKGkiAgICAgICDihpBcbmBgYFxuXG5UaGUgYXJyb3dzIGluZGljYXRlIHdoaWNoIHdheSB0aGUgcG9wb3ZlciB3aWxsIGV4dGVuZCwgZS5nLiDihpIgbWVhbnMgdGhlIHBvcG92ZXIgaXMgYWxpZ25lZCB0byB0aGUgbGVmdCBlZGdlIGFuZCBleHRlbmRzIGluIHRoYXQgZGlyZWN0aW9uLiBEaWFnb25hbCBjb3JuZXJzIChOVywgTkUsIFNFLCBTVykgYXJlIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLlxuXG5gYGBqc3hcbjxQb3BvdmVyXG4gICAgYW5jaG9yPXtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc29tZS1hbmNob3ItZWxlbWVudCcpfVxuICAgIHByZXNldD17UG9wb3Zlci5wcmVzZXQuTn0+XG4gICAgTXkgcG9wb3ZlciBjb250ZW50IVxuPC9Qb3BvdmVyPlxuYGBgXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcG92ZXIgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VxdWVuY2VzXG4gICAgc3RhdGljIHByZXNldCA9IGNvbWJpbmF0aW9ucy5yZWR1Y2UoKG1hcCwgZGVmKSA9PiAoKG1hcFtkZWYubmFtZV0gPSBkZWYpLCBtYXApLCB7fSlcblxuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC4uLkRpYWxvZy5wcm9wVHlwZXMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGEgRE9NIGVsZW1lbnQgb3IgUmVhY3QgcmVmZXJlbmNlIChyZWYpIHRvIG9uZSBmb3IgcG9zaXRpb25pbmcgcHVycG9zZXNcbiAgICAgICAgICovXG4gICAgICAgIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMuaW5zdGFuY2VPZihIVE1MRWxlbWVudCksXG4gICAgICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgICAgIHByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHRoZSBnaXZlbiBhbGlnbm1lbnQgc2V0dGluZ3Mgd291bGQgdGFrZSB0aGUgcG9wb3ZlciBvdXQgb2YgYm91bmRzLCBjaGFuZ2UgdGhlIGFsaWdubWVudCBhcyBuZWNlc3NhcnkgdG8gcmVtYWluIGluIHRoZSB2aWV3cG9ydFxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b1JlcG9zaXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhIERPTSBlbGVtZW50IG9yIFJlYWN0IHJlZmVyZW5jZSAocmVmKSB0byBvbmUgZm9yIHBvc2l0aW9uaW5nIHB1cnBvc2VzLCB0aGUgY2FyZXQgY29tcG9uZW50IHdpbGxcbiAgICAgICAgICogYmUgYXV0b21hdGljYWxseSBwb3NpdGlvbmVkIHRvIGNlbnRlciBvbiB0aGlzIHByb3ZpZGVkIGFuY2hvcjsgYnkgZGVmYXVsdCBpdCB3aWxsIGNlbnRlclxuICAgICAgICAgKiBvbiBgcHJvcHMuYW5jaG9yYFxuICAgICAgICAgKi9cbiAgICAgICAgY2FyZXRBbmNob3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLmluc3RhbmNlT2YoSFRNTEVsZW1lbnQpLFxuICAgICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgICAgICBwcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIEpTWCB0aGF0IGlzIHJlbmRlcmVkIGFuZCB1c2VkIHRvIHBvaW50IGF0IHRoZSBtaWRkbGUgb2YgdGhlIGFuY2hvciBlbGVtZW50IGFuZCBpbmRpY2F0ZSB0aGUgY29udGV4dCBvZiB0aGUgcG9wb3ZlclxuICAgICAgICAgKi9cbiAgICAgICAgY2FyZXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gICAgICAgIHBvcnRhbFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoUG9ydGFsLlByb3BUeXBlcyksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgICAqIGBgYGpzeFxuICAgICAgICAgKiA8UG9wb3ZlclxuICAgICAgICAgKiAgICAgYW5jaG9yPXtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc29tZS1hbmNob3ItZWxlbWVudCcpfVxuICAgICAgICAgKiAgICAgcHJlc2V0PXtQb3BvdmVyLnByZXNldC5OTkV9PlxuICAgICAgICAgKiAgICAgTXkgcG9wb3ZlciBjb250ZW50IVxuICAgICAgICAgKiA8L1BvcG92ZXI+XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgcHJlc2V0OiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuTk5XLFxuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuTixcbiAgICAgICAgICAgIFBvcG92ZXIucHJlc2V0Lk5ORSxcbiAgICAgICAgICAgIFBvcG92ZXIucHJlc2V0LkVORSxcbiAgICAgICAgICAgIFBvcG92ZXIucHJlc2V0LkUsXG4gICAgICAgICAgICBQb3BvdmVyLnByZXNldC5FU0UsXG4gICAgICAgICAgICBQb3BvdmVyLnByZXNldC5TU0UsXG4gICAgICAgICAgICBQb3BvdmVyLnByZXNldC5TLFxuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuU1NXLFxuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuV1NXLFxuICAgICAgICAgICAgUG9wb3Zlci5wcmVzZXQuVyxcbiAgICAgICAgICAgIFBvcG92ZXIucHJlc2V0LldOVyxcbiAgICAgICAgXSksXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgLi4uRGlhbG9nLmRlZmF1bHRQcm9wcyxcbiAgICAgICAgYW5jaG9yOiB1bmRlZmluZWQsXG4gICAgICAgIGF1dG9SZXBvc2l0aW9uOiB0cnVlLFxuICAgICAgICBjYXB0dXJlRm9jdXM6IGZhbHNlLFxuICAgICAgICBjYXJldEFuY2hvcjogdW5kZWZpbmVkLFxuICAgICAgICBjYXJldENvbXBvbmVudDogREVGQVVMVF9DQVJFVF9DT01QT05FTlQsXG4gICAgICAgIGNsb3NlT25Fc2NLZXk6IHRydWUsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IHRydWUsXG4gICAgICAgIGNsb3NlT25PdXRzaWRlU2Nyb2xsOiB0cnVlLFxuICAgICAgICBwb3J0YWxQcm9wczoge30sXG4gICAgICAgIHByZXNldDogUG9wb3Zlci5wcmVzZXQuUyxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gd2l0aG91dChPYmplY3Qua2V5cyhQb3BvdmVyLmRlZmF1bHRQcm9wcyksIERpYWxvZy5pbnRlcm5hbEtleXMpXG5cbiAgICBzdGF0aWMgZ2V0QWxpZ25tZW50Q2xhc3NGcmFnbWVudChjb25zdGFudCkge1xuICAgICAgICBzd2l0Y2ggKGNvbnN0YW50KSB7XG4gICAgICAgIGNhc2UgU1RBUlQ6XG4gICAgICAgICAgICByZXR1cm4gJ3N0YXJ0JztcblxuICAgICAgICBjYXNlIE1JRERMRTpcbiAgICAgICAgICAgIHJldHVybiAnbWlkZGxlJztcblxuICAgICAgICBjYXNlIEVORDpcbiAgICAgICAgICAgIHJldHVybiAnZW5kJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhY2hlVmlld3BvcnRDYXJ0b2dyYXBoeShhbmNob3IsIGNhcmV0QW5jaG9yKSB7XG4gICAgICAgIGNvbnN0IGJvZHlSZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICB0aGlzLmFuY2hvclJlY3QgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuY2FyZXRBbmNob3JSZWN0ID0gY2FyZXRBbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgLy8gbm9ybWFsbHkgd2UnZCB1c2Ugc2Nyb2xsVG9wL3Njcm9sbExlZnQsIGJ1dCBzY3JvbGwgYmVoYXZpb3IgY2hhbmdlcyB3aGVuIHBvc2l0aW9uOiBzdGlja3lcbiAgICAgICAgLy8gaXMgZW5hYmxlZCBpbiBDaHJvbWUgYW5kIGludmVydGluZyB0aGUgbmVnYXRpdmUgdmlld3BvcnQgcmVjdCB2YWx1ZSBzZWVtcyB0byB3b3JrIG1vcmVcbiAgICAgICAgLy8gY29uc2lzdGVudGx5XG4gICAgICAgIHRoaXMuYm9keUxlZnQgPSBib2R5UmVjdC5sZWZ0ICogLTE7XG4gICAgICAgIHRoaXMuYm9keVRvcCA9IGJvZHlSZWN0LnRvcCAqIC0xO1xuICAgIH1cblxuICAgIGdldE5leHRDYXJldFhQb3NpdGlvbih7IG5hbWUsIGF4LCBkeCwgYXksIGR5IH0sIGNhcmV0ID0gdGhpcy4kY2FyZXQpIHtcbiAgICAgICAgbGV0IG5leHRYID0gMDtcblxuICAgICAgICBpZiAobmFtZVswXSA9PT0gJ04nIHx8IG5hbWVbMF0gPT09ICdTJykge1xuICAgICAgICAgICAgLy8gcG9wb3ZlciBpcyBhYm92ZS9iZWxvdywgc28gd2UgbmVlZCB0byBkZXRlY3QgdGhlIFggcG9zaXRpb24gb2YgdGhlIGNhcmV0IGFuY2hvclxuICAgICAgICAgICAgbmV4dFggPSB0aGlzLmNhcmV0QW5jaG9yUmVjdC5sZWZ0IC0gdGhpcy5hbmNob3JSZWN0LmxlZnQgKyB0aGlzLmNhcmV0QW5jaG9yUmVjdC53aWR0aCAvIDI7XG5cbiAgICAgICAgICAgIGlmIChkeCA9PT0gTUlERExFKSB7XG4gICAgICAgICAgICAgICAgbmV4dFggKz0gKHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsaWVudFdpZHRoIC0gdGhpcy5hbmNob3JSZWN0LndpZHRoKSAvIDI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGR4ID09PSBFTkQpIHtcbiAgICAgICAgICAgICAgICBuZXh0WCArPSB0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRXaWR0aCAtIHRoaXMuYW5jaG9yUmVjdC53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBvcG92ZXIgaXMgbGVmdC9yaWdodCwgc28gd2UgbmVlZCB0byBkZXRlY3QgdGhlIFkgcG9zaXRpb24gb2YgdGhlIGNhcmV0IGFuY2hvciAoY2FyZXQgaXMgcm90YXRlZCB2aWEgQ1NTKVxuICAgICAgICAgICAgbmV4dFggPSB0aGlzLmNhcmV0QW5jaG9yUmVjdC50b3AgLSB0aGlzLmFuY2hvclJlY3QudG9wICsgdGhpcy5jYXJldEFuY2hvclJlY3QuaGVpZ2h0IC8gMjtcblxuICAgICAgICAgICAgaWYgKGR5ID09PSBNSURETEUpIHtcbiAgICAgICAgICAgICAgICBuZXh0WCArPSAodGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50SGVpZ2h0IC0gdGhpcy5hbmNob3JSZWN0LmhlaWdodCkgLyAyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkeSA9PT0gRU5EKSB7XG4gICAgICAgICAgICAgICAgbmV4dFggKz0gdGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50SGVpZ2h0IC0gdGhpcy5hbmNob3JSZWN0LmhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5leHRYIC09IGNhcmV0LmNsaWVudFdpZHRoIC8gMjtcblxuICAgICAgICByZXR1cm4gbmV4dFg7XG4gICAgfVxuXG4gICAgZ2V0TmV4dERpYWxvZ1hQb3NpdGlvbih7IGF4LCBkeCB9LCBkaWFsb2cgPSB0aGlzLmRpYWxvZy4kd3JhcHBlcikge1xuICAgICAgICBsZXQgbmV4dFggPSB0aGlzLmFuY2hvclJlY3QubGVmdCArIHRoaXMuYm9keUxlZnQ7XG5cbiAgICAgICAgc3dpdGNoIChheCkge1xuICAgICAgICBjYXNlIE1JRERMRTpcbiAgICAgICAgICAgIG5leHRYICs9IHRoaXMuYW5jaG9yUmVjdC53aWR0aCAvIDI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEVORDpcbiAgICAgICAgICAgIG5leHRYICs9IHRoaXMuYW5jaG9yUmVjdC53aWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChkeCkge1xuICAgICAgICBjYXNlIE1JRERMRTpcbiAgICAgICAgICAgIG5leHRYIC09IGRpYWxvZy5jbGllbnRXaWR0aCAvIDI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEVORDpcbiAgICAgICAgICAgIG5leHRYIC09IGRpYWxvZy5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHRYO1xuICAgIH1cblxuICAgIGdldE5leHREaWFsb2dZUG9zaXRpb24oeyBheSwgZHkgfSwgZGlhbG9nID0gdGhpcy5kaWFsb2cuJHdyYXBwZXIpIHtcbiAgICAgICAgbGV0IG5leHRZID0gdGhpcy5hbmNob3JSZWN0LnRvcCArIHRoaXMuYm9keVRvcDtcblxuICAgICAgICBzd2l0Y2ggKGF5KSB7XG4gICAgICAgIGNhc2UgTUlERExFOlxuICAgICAgICAgICAgbmV4dFkgKz0gdGhpcy5hbmNob3JSZWN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEVORDpcbiAgICAgICAgICAgIG5leHRZICs9IHRoaXMuYW5jaG9yUmVjdC5oZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZHkpIHtcbiAgICAgICAgY2FzZSBNSURETEU6XG4gICAgICAgICAgICBuZXh0WSAtPSBkaWFsb2cuY2xpZW50SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRU5EOlxuICAgICAgICAgICAgbmV4dFkgLT0gZGlhbG9nLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHRZO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcG9zaXRpb24gY29tYmluYXRpb24sIHdpbGwgdGhlIHBvcG92ZXIgZml0IGludG8gdGhlIHNwYWNlIHdpdGhvdXQgb2NjbHVzaW9uP1xuICAgICAqXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSAgY29uZmlnXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgY29uZmlnLmF4XG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgY29uZmlnLmF5XG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgY29uZmlnLmR4XG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgY29uZmlnLmR5XG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgcEhlaWdodFxuICAgICAqIEBwYXJhbSAge051bWJlcn0gIHBXaWR0aFxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1Bvc2l0aW9uVmFsaWQoeyBuYW1lLCBheCwgYXksIGR4LCBkeSB9LCBwSGVpZ2h0LCBwV2lkdGgpIHtcbiAgICAgICAgY29uc3QgY2FyZGluYWwgPSBuYW1lWzBdO1xuXG4gICAgICAgIGlmIChjYXJkaW5hbCA9PT0gJ04nIHx8IGNhcmRpbmFsID09PSAnUycpIHtcbiAgICAgICAgICAgIGlmIChjYXJkaW5hbCA9PT0gJ04nICYmIHRoaXMuYW5jaG9yUmVjdC50b3AgLSBwSGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgICAvKiB3b3VsZCBvY2NsdWRlIGFib3ZlICovXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNhcmRpbmFsID09PSAnUycgJiYgdGhpcy5hbmNob3JSZWN0LmJvdHRvbSArIHBIZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7ICAgLyogd291bGQgb2NjbHVkZSBiZWxvdyAqL1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXggPT09IFNUQVJUKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEoXG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmFuY2hvclJlY3QubGVmdCArIHBXaWR0aCA+IHdpbmRvdy5pbm5lcldpZHRoICAgICAgLyogd291bGQgb2NjbHVkZSByaWdodCAqLyB8fCB0aGlzLmFuY2hvclJlY3QubGVmdCA8IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGFuY2hvciBpcyBwYXJ0aWFsbHkgb2Zmc2NyZWVuIHRvIHRoZSBsZWZ0ICovXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXggPT09IE1JRERMRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhKFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5hbmNob3JSZWN0LmxlZnQgLSBwV2lkdGggLyAyIDwgMCAgICAgICAgICAgICAgICAgIC8qIHdvdWxkIG9jY2x1ZGUgbGVmdCAqLyB8fCB0aGlzLmFuY2hvclJlY3QubGVmdCArIHBXaWR0aCAvIDIgPiB3aW5kb3cuaW5uZXJXaWR0aCkgIC8qIHdvdWxkIG9jY2x1ZGUgcmlnaHQgKi9cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gIShcbiAgICAgICAgICAgICAgICAgICAodGhpcy5hbmNob3JSZWN0LmxlZnQgLSBwV2lkdGggPCAwICAgICAgICAgICAgICAgICAgLyogd291bGQgb2NjbHVkZSBsZWZ0ICovIHx8IHRoaXMuYW5jaG9yUmVjdC5yaWdodCA+IHdpbmRvdy5pbm5lcldpZHRoKSAgICAgICAgICAvKiBhbmNob3IgaXMgcGFydGlhbGx5IG9mZnNjcmVlbiB0byB0aGUgcmlnaHQgKi9cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjYXJkaW5hbCA9PT0gJ1cnIHx8IGNhcmRpbmFsID09PSAnRScpIHtcbiAgICAgICAgICAgIGlmIChjYXJkaW5hbCA9PT0gJ1cnICYmIHRoaXMuYW5jaG9yUmVjdC5sZWZ0IC0gcFdpZHRoIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgICAvKiB3b3VsZCBvY2NsdWRlIGxlZnQgKi9cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FyZGluYWwgPT09ICdFJyAmJiB0aGlzLmFuY2hvclJlY3QucmlnaHQgKyBwV2lkdGggPiB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgICAvKiB3b3VsZCBvY2NsdWRlIHJpZ2h0ICovXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChheSA9PT0gU1RBUlQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIShcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYW5jaG9yUmVjdC50b3AgKyBwSGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0ICAgIC8qIHdvdWxkIG9jY2x1ZGUgYmVsb3cgKi8gfHwgdGhpcy5hbmNob3JSZWN0LnRvcCA8IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGFuY2hvciBpcyBwYXJ0aWFsbHkgb2Zmc2NyZWVuIGFib3ZlICovXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXkgPT09IE1JRERMRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhKFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5hbmNob3JSZWN0LnRvcCArIHRoaXMuYW5jaG9yUmVjdC5oZWlnaHQgLyAyIC0gcEhlaWdodCAvIDIgPCAwICAgICAgICAgICAgICAgICAgICAgLyogd291bGQgb2NjbHVkZSBhYm92ZSAqLyB8fCB0aGlzLmFuY2hvclJlY3QudG9wICsgdGhpcy5hbmNob3JSZWN0LmhlaWdodCAvIDIgKyBwSGVpZ2h0IC8gMiA+IHdpbmRvdy5pbm5lckhlaWdodCkgICAgLyogd291bGQgb2NjbHVkZSBiZWxvdyAqL1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAhKFxuICAgICAgICAgICAgICAgICAgICh0aGlzLmFuY2hvclJlY3QudG9wIC0gcEhlaWdodCA8IDAgICAgICAgICAgICAgIC8qIHdvdWxkIG9jY2x1ZGUgYWJvdmUgKi8gfHwgdGhpcy5hbmNob3JSZWN0LmJvdHRvbSA+IHdpbmRvdy5pbm5lckhlaWdodCkgICAgLyogYW5jaG9yIGlzIHBhcnRpYWxseSBvZmZzY3JlZW4gYmVsb3cgKi9cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXRWYWxpZEFsaWdubWVudFByZXNldCgpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmRpYWxvZy4kd3JhcHBlci5jbGllbnRXaWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5kaWFsb2cuJHdyYXBwZXIuY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgIC8vIGdpdmVuIHRoZSBjdXJyZW50IHZpZXdwb3J0IGNhcnRvZ3JhcGh5LCB3aGVyZSBjYW4gd2Ugc3RpY2sgdGhlIHBvcG92ZXJcbiAgICAgICAgLy8gc28gaXQgd29uJ3QgYmUgcGFydGlhbGx5IG9jY2x1ZGVkP1xuICAgICAgICBjb25zdCB2YWxpZENvbWJvcyA9IGNvbWJpbmF0aW9ucy5maWx0ZXIoKGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNQb3NpdGlvblZhbGlkKGNvbmZpZywgaGVpZ2h0LCB3aWR0aCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIDEuIGlzIHRoZSByZXF1ZXN0ZWQgcHJlc2V0IGluIHRoZSBsaXN0P1xuICAgICAgICAvLyAyLiBkb2VzIHRoZSBjb25zdW1lciBub3Qgd2FudCB1cyBhdXRvLXJlcG9zaXRpb25pbmc/XG4gICAgICAgIC8vIDMuIGFyZSBubyBjb21ib3MgdmFsaWQ/XG4gICAgICAgIGlmICh2YWxpZENvbWJvcy5pbmRleE9mKHRoaXMucHJvcHMucHJlc2V0KSAhPT0gLTEgfHwgIXRoaXMucHJvcHMuYXV0b1JlcG9zaXRpb24gfHwgIXZhbGlkQ29tYm9zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucHJlc2V0OyAvLyBqdXN0IGdvIHdpdGggdGhlIHJlcXVlc3RlZCBwcmVzZXRcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG90aGVyd2lzZS4uLiB3ZSB0cnkgdG8gZmluZCB0aGUgYmVzdCBwb3NzaWJsZSBmYWxsYmFjayBvcHRpb25cblxuICAgICAgICAvLyBvcHRpbWl6ZSBmb3IgdGhlIHJlcXVlc3RlZCBwcmVzZXQgaGVtaXNwaGVyZVxuICAgICAgICBjb25zdCBiZXN0Q29tYm9zID0gdmFsaWRDb21ib3MuZmlsdGVyKCh7IG5hbWUgfSkgPT4gbmFtZVswXSA9PT0gdGhpcy5wcm9wcy5wcmVzZXQubmFtZVswXSk7XG5cbiAgICAgICAgaWYgKGJlc3RDb21ib3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gYmVzdENvbWJvc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZW4gdGhlIG9wcG9zaXRlIChlLmcuIHRoZSBlbGVtZW50IGlzIHRvbyBsb3cgaW4gdGhlIHZpZXdwb3J0IHNvIGZsaXAgdXAgaW5zdGVhZCBvZiBkb3duKVxuICAgICAgICBjb25zdCBvcHBvc2l0ZUNhcmRpbmFsID0gZ2V0T3Bwb3NpdGVDYXJkaW5hbCh0aGlzLnByb3BzLnByZXNldC5uYW1lKTtcbiAgICAgICAgY29uc3Qgb2theUNvbWJvcyA9IHZhbGlkQ29tYm9zLmZpbHRlcigoeyBuYW1lIH0pID0+IG5hbWVbMF0gPT09IG9wcG9zaXRlQ2FyZGluYWwpO1xuXG4gICAgICAgIGlmIChva2F5Q29tYm9zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG9rYXlDb21ib3NbMF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aGF0ZXZlcidzIGxlZnQgd2lsbCBoYXZlIHRvIGRvXG4gICAgICAgIHJldHVybiB2YWxpZENvbWJvc1swXTtcbiAgICB9XG5cbiAgICBhbGlnbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYW5jaG9yID0gdGhpcy5wcm9wcy5hbmNob3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMucHJvcHMuYW5jaG9yXG4gICAgICAgICAgICAgICAgICAgICAgIDogZmluZERPTU5vZGUodGhpcy5wcm9wcy5hbmNob3IpO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICBjb25zdCBjYXJldEFuY2hvciA9IHRoaXMucHJvcHMuY2FyZXRBbmNob3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMucHJvcHMuY2FyZXRBbmNob3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnByb3BzLmNhcmV0QW5jaG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZpbmRET01Ob2RlKHRoaXMucHJvcHMuY2FyZXRBbmNob3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhbmNob3I7XG5cbiAgICAgICAgdGhpcy5jYWNoZVZpZXdwb3J0Q2FydG9ncmFwaHkoYW5jaG9yLCBjYXJldEFuY2hvcik7XG5cbiAgICAgICAgY29uc3QgcHJlc2V0ID0gdGhpcy5nZXRWYWxpZEFsaWdubWVudFByZXNldCgpO1xuICAgICAgICBjb25zdCBmcmFnID0gUG9wb3Zlci5nZXRBbGlnbm1lbnRDbGFzc0ZyYWdtZW50O1xuXG4gICAgICAgIHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsYXNzTmFtZSA9IHRoaXMuZGlhbG9nLiR3cmFwcGVyLmNsYXNzTmFtZS5yZXBsYWNlKENMQVNTX1JFTU9WQUxfUkVHRVgsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGAgYi1wb3BvdmVyLWFuY2hvci14LSR7ZnJhZyhwcmVzZXQuYXgpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBgIGItcG9wb3Zlci1hbmNob3IteS0ke2ZyYWcocHJlc2V0LmF5KX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYCBiLXBvcG92ZXItc2VsZi14LSR7ZnJhZyhwcmVzZXQuZHgpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBgIGItcG9wb3Zlci1zZWxmLXktJHtmcmFnKHByZXNldC5keSl9YDtcblxuICAgICAgICBjb25zdCBkeCA9IE1hdGgucm91bmQodGhpcy5nZXROZXh0RGlhbG9nWFBvc2l0aW9uKHByZXNldCkpO1xuICAgICAgICBjb25zdCBkeSA9IE1hdGgucm91bmQodGhpcy5nZXROZXh0RGlhbG9nWVBvc2l0aW9uKHByZXNldCkpO1xuXG4gICAgICAgIHRoaXMuZGlhbG9nLiR3cmFwcGVyLnN0eWxlW3RyYW5zZm9ybVByb3BdID0gYHRyYW5zbGF0ZSgke2R4fXB4LCAke2R5fXB4KWA7XG5cbiAgICAgICAgY29uc3QgY2FyZGluYWwgPSBwcmVzZXQubmFtZVswXTtcbiAgICAgICAgY29uc3QgbG9uZ2l0dWRpbmFsID0gY2FyZGluYWwgPT09ICdOJyB8fCBjYXJkaW5hbCA9PT0gJ1MnO1xuXG4gICAgICAgIC8vIHRoZSBjYXJldCBpcyBpbml0aWFsbHkgcG9zaXRpb25lZCBhdCAwLDAgaW5zaWRlIHRoZSBkaWFsb2dcbiAgICAgICAgLy8gd2hpY2ggaXMgYWxyZWFkeSBwb3NpdGlvbmVkIGF0IHRoZSBhbmNob3IsIHNvIHdlIGp1c3QgbmVlZCB0b1xuICAgICAgICAvLyBtYWtlIHNtYWxsIGFkanVzdG1lbnRzIGFzIG5lY2Vzc2FyeSB0byBsaW5lIHVwIHRoZSBjYXJldFxuICAgICAgICAvLyB3aXRoIHRoZSB2aXN1YWwgY2VudGVyIG9mIHRoZSBhbmNob3JcbiAgICAgICAgdGhpcy4kY2FyZXQuc3R5bGVbbG9uZ2l0dWRpbmFsID8gJ2xlZnQnIDogJ3RvcCddID0gTWF0aC5yb3VuZCh0aGlzLmdldE5leHRDYXJldFhQb3NpdGlvbihwcmVzZXQpKSArICdweCc7XG4gICAgICAgIHRoaXMuJGNhcmV0LnN0eWxlW2xvbmdpdHVkaW5hbCA/ICd0b3AnIDogJ2xlZnQnXSA9ICcwcHgnO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLmFsaWduKCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmFsaWduLCB0cnVlKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIHRoaXMuYWxpZ24oKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHsgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuYWxpZ24sIHRydWUpOyB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxQb3J0YWwgey4uLnByb3BzLnBvcnRhbFByb3BzfT5cbiAgICAgICAgICAgICAgICA8RGlhbG9nXG4gICAgICAgICAgICAgICAgICAgIHsuLi5vbWl0KHByb3BzLCBQb3BvdmVyLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgICAgIHJlZj17KGluc3RhbmNlKSA9PiAodGhpcy5kaWFsb2cgPSBpbnN0YW5jZSl9XG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZT17XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZUVsZW1lbnQocHJvcHMuY2FyZXRDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6IChub2RlKSA9PiAodGhpcy4kY2FyZXQgPSBub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGN4KCdiLXBvcG92ZXItY2FyZXQnLCBwcm9wcy5jYXJldENvbXBvbmVudC5wcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXBvcG92ZXInLCBwcm9wcy5jbGFzc05hbWUpfSAvPlxuICAgICAgICAgICAgPC9Qb3J0YWw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXBvcG92ZXIvaW5kZXguanMiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQsIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVubW91bnRDb21wb25lbnRBdE5vZGUsIHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIGFzIHJlbmRlclN1YnRyZWUgfSBmcm9tICdyZWFjdC1kb20nO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcbmltcG9ydCB1dWlkIGZyb20gJ2JvdW5kbGVzcy11dGlscy11dWlkJztcblxuLyoqXG5gUG9ydGFsYCBpcyB1c2VkIGluIG90aGVyIGNvbXBvbmVudHMgc3VjaCBhcyBgUG9wb3ZlcmAgdG8gcmVuZGVyIGNvbnRlbnQgdG8gcGxhY2VzIGxpa2UgdGhlIEhUTUwgYDxib2R5PmAgdGFnLCBhdm9pZGluZyBzdHlsZSBsZWFrYWdlIGFuZCBwYXJlbnQgbGF5b3V0IGNvbnRleHRzLiBPbmx5IGFjY2VwdHMgYSBzaW5nbGUgdG9wLWxldmVsIGNoaWxkOyBuYWtlZCB0ZXh0LCBldGMgd2lsbCBiZSB3cmFwcGVkIGluIGEgYDxkaXY+YC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9ydGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLy8gc2luZ2xlIGNoaWxkIG9ubHkgLSBhcnJheXMgbm90IGFsbG93ZWRcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IG5vcm1hbCBSZWFjdCBjaGlsZCwgYnV0IG11c3QgYmUgc2luZ3VsYXI7IG11bHRpcGxlIHNpYmxpbmcgY2hpbGRyZW4gbXVzdCBoYXZlIGEgY29tbW9uIHdyYXBwZXIsIHN1Y2ggYXMgYSBcImxheW91dFwiIGA8ZGl2PmBcblxuICAgICAgICAgKiDinIUgT0s6XG5cbiAgICAgICAgICogYGBganN4XG4gICAgICAgICAqIDxQb3J0YWw+XG4gICAgICAgICAqICAgZm9vXG4gICAgICAgICAqIDwvUG9ydGFsPlxuXG4gICAgICAgICAqIDxQb3J0YWw+XG4gICAgICAgICAqICAgPGRpdj5mb288L2Rpdj5cbiAgICAgICAgICogPC9Qb3J0YWw+XG5cbiAgICAgICAgICogPFBvcnRhbD5cbiAgICAgICAgICogICA8ZGl2PlxuICAgICAgICAgKiAgICAgICA8ZGl2PmZvbzwvZGl2PlxuICAgICAgICAgKiAgICAgICA8ZGl2PmJhcjwvZGl2PlxuICAgICAgICAgKiAgIDwvZGl2PlxuICAgICAgICAgKiA8L1BvcnRhbD5cbiAgICAgICAgICogYGBgXG5cbiAgICAgICAgICog4puU77iPIE5vdCBPSzpcblxuICAgICAgICAgKiBgYGBqc3hcbiAgICAgICAgICogPFBvcnRhbD5cbiAgICAgICAgICogICA8ZGl2PmZvbzwvZGl2PlxuICAgICAgICAgKiAgIDxkaXY+YmFyPC9kaXY+XG4gICAgICAgICAqIDwvUG9ydGFsPlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIGxvY2F0aW9uIHRvIGFwcGVuZCB0aGUgZ2VuZXJhdGVkIHBvcnRhbCBhbmQgY2hpbGQgZWxlbWVudHNcbiAgICAgICAgICovXG4gICAgICAgIGRlc3RpbmF0aW9uOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihIVE1MRWxlbWVudCksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBJRCB1c2VkIHRvIGxpbmsgdGhlIHBvcnRhbCBvcmlnaW4gdG8gdGhlIGRlc3RpbmF0aW9uOyBhZGRlZCB0byBnZW5lcmF0ZWQgYDxkaXY+YCBhcHBlbmRlZCB0byB0aGUgZGVzdGluYXRpb24gSFRNTCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBwb3J0YWxJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBjaGlsZHJlbjogbnVsbCxcbiAgICAgICAgZGVzdGluYXRpb246IGRvY3VtZW50LmJvZHksXG4gICAgICAgIHBvcnRhbElkOiBudWxsLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhQb3J0YWwuZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGljIFBPUlRBTF9EQVRBX0FUVFJJQlVURSA9ICdkYXRhLXBvcnRhbC1pZCdcblxuICAgIGlkID0gdXVpZCgpXG5cbiAgICAvLyB0aGUgPGRpdj4gdGhhdCB0aGUgY2hpbGRyZW4gYXJlIHJlbmRlcmVkIGludG9cbiAgICAkcG9ydGFsID0gbnVsbFxuXG4gICAgLy8gdGhlIHRvcC1sZXZlbCBjaGlsZCByZW5kZXJlZCBpbnRvIHRoZSAkcG9ydGFsXG4gICAgJHBhc3NlbmdlciA9IG51bGw7XG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIHRoaXMuJHBvcnRhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnByb3BzLmRlc3RpbmF0aW9uLmFwcGVuZENoaWxkKHRoaXMuJHBvcnRhbCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJQb3J0YWxsZWRDb250ZW50KCk7XG4gICAgfVxuXG4gICAgcmVuZGVyUG9ydGFsbGVkQ29udGVudCgpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBpc1ZhbGlkRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuKSA/IHRoaXMucHJvcHMuY2hpbGRyZW4gOiAoPGRpdj57dGhpcy5wcm9wcy5jaGlsZHJlbn08L2Rpdj4pO1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgcG9ydGFsIElEIGxpbmsgaWYgbmVlZGVkXG4gICAgICAgIHRoaXMuJHBvcnRhbC5pZCA9IHRoaXMucHJvcHMucG9ydGFsSWQgfHwgdGhpcy5pZDtcblxuICAgICAgICByZW5kZXJTdWJ0cmVlKHRoaXMsIGNoaWxkLCB0aGlzLiRwb3J0YWwpO1xuICAgICAgICB0aGlzLiRwYXNzZW5nZXIgPSB0aGlzLiRwb3J0YWwuY2hpbGRyZW5bMF07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkgeyB0aGlzLnJlbmRlclBvcnRhbGxlZENvbnRlbnQoKTsgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy4kcG9ydGFsKTtcbiAgICAgICAgdGhpcy5wcm9wcy5kZXN0aW5hdGlvbi5yZW1vdmVDaGlsZCh0aGlzLiRwb3J0YWwpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgUG9ydGFsLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgey4uLnsgW1BvcnRhbC5QT1JUQUxfREFUQV9BVFRSSUJVVEVdOiB0aGlzLnByb3BzLnBvcnRhbElkIHx8IHRoaXMuaWQgfX0gLz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtcG9ydGFsL2luZGV4LmpzIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnYm91bmRsZXNzLWJ1dHRvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZ3Jlc3MgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSB2YWxpZCBIVE1MIHRhZyBuYW1lXG4gICAgICAgICAqL1xuICAgICAgICBjYW5jZWxDb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICBjYW5jZWxQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgfSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSB2YWxpZCBIVE1MIHRhZyBuYW1lXG4gICAgICAgICAqL1xuICAgICAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIHN1cHBsaWVkLCBhZGRzIGEgY2FuY2VsIGVsZW1lbnQgYW5kIGNhbGxzIHRoaXMgZnVuY3Rpb24gd2hlbiB0aGF0IGVsZW1lbnQgaXMgY2xpY2tlZFxuICAgICAgICAgKi9cbiAgICAgICAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgaW50ZWdlciAoYW5kIHVuaXQsIGlmIGFwcGxpY2FibGUpIG9mIHRoZSBjdXJyZW50IHByb2dyZXNzIHN0YXRlLCBlLmcuIDAuMDEgKG9wYWNpdHkpXG4gICAgICAgICAqL1xuICAgICAgICBwcm9ncmVzczogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IHZhbGlkIEhUTUwgdGFnIG5hbWVcbiAgICAgICAgICovXG4gICAgICAgIHByb2dyZXNzQ29tcG9uZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIHByb2dyZXNzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFueSBbUmVhY3Qtc3VwcG9ydGVkIGF0dHJpYnV0ZV0oaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90YWdzLWFuZC1hdHRyaWJ1dGVzLmh0bWwjaHRtbC1hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgIH0pLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgQ1NTIHByb3BlcnR5IHRvIHR3ZWVuIChtdXN0IGFjY2VwdCBwZXJjZW50YWdlcykgLSBkZWZhdWx0cyB0byBcIndpZHRoXCJcbiAgICAgICAgICovXG4gICAgICAgIHR3ZWVuUHJvcGVydHk6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2FuY2VsQ29tcG9uZW50OiAnYnV0dG9uJyxcbiAgICAgICAgY2FuY2VsUHJvcHM6IHt9LFxuICAgICAgICBjb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBvbkNhbmNlbDogbnVsbCxcbiAgICAgICAgcHJvZ3Jlc3M6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJvZ3Jlc3NDb21wb25lbnQ6ICdkaXYnLFxuICAgICAgICBwcm9ncmVzc1Byb3BzOiB7fSxcbiAgICAgICAgdHdlZW5Qcm9wZXJ0eTogJ3dpZHRoJyxcbiAgICB9XG5cbiAgICBzdGF0aWMgaW50ZXJuYWxLZXlzID0gT2JqZWN0LmtleXMoUHJvZ3Jlc3MuZGVmYXVsdFByb3BzKVxuXG4gICAgcmVuZGVyQ2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNhbmNlbCkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmNhbmNlbFByb3BzfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXByb2dyZXNzLWNhbmNlbCcsIHRoaXMucHJvcHMuY2FuY2VsUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50PXt0aGlzLnByb3BzLmNhbmNlbENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkPXt0aGlzLnByb3BzLm9uQ2FuY2VsfSAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlclByb2dyZXNzKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMucHJvZ3Jlc3NDb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4udGhpcy5wcm9wcy5wcm9ncmVzc1Byb3BzfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcHJvZ3Jlc3MnLCB0aGlzLnByb3BzLnByb2dyZXNzUHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICdiLXByb2dyZXNzLWluZGV0ZXJtaW5hdGUnOiB0aGlzLnByb3BzLnByb2dyZXNzID09PSB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgcm9sZT0ncHJlc2VudGF0aW9uJ1xuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMucHJvZ3Jlc3NQcm9wcy5zdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgW3RoaXMucHJvcHMudHdlZW5Qcm9wZXJ0eV06IHRoaXMucHJvcHMucHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgfX0gLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8dGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBQcm9ncmVzcy5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcHJvZ3Jlc3Mtd3JhcHBlcicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICBkYXRhLXByb2dyZXNzPXt0aGlzLnByb3BzLnByb2dyZXNzICE9PSB1bmRlZmluZWQgPyB0aGlzLnByb3BzLnByb2dyZXNzIDogbnVsbH0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyUHJvZ3Jlc3MoKX1cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJDYW5jZWwoKX1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXByb2dyZXNzL2luZGV4LmpzIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuXG5jb25zdCBpc0Z1bmN0aW9uID0gKHgpID0+IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG4vKipcbk1lY2hhbmljYWxseSwgaGlkZGVuIGRpc2Nsb3N1cmUgY29udGVudCBpcyBub3QgcmVuZGVyZWQgdG8gdGhlIERPTSB1bnRpbCBpdCBpcyBuZWVkZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzaXZlRGlzY2xvc3VyZSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKiogaWYgYSBmdW5jdGlvbiBpcyBwYXNzZWQsIGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bnRpbCB0aGUgZGlzY2xvc3VyZSBjb250ZW50IGlzIGR1ZSB0byBiZSByZW5kZXJlZCAqL1xuICAgICAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICBQcm9wVHlwZXMubm9kZSxcbiAgICAgICAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKSxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IHZhbGlkIEhUTUwgdGFnIG5hbWVcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY29udHJvbHMgdGhlIFByb2dyZXNzRGlzY2xvc3VyZSBcImV4cGFuZGVkXCIgc3RhdGUgZGVjbGFyYXRpdmVseVxuICAgICAgICAgKi9cbiAgICAgICAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiB0aGUgY29udGVudCBpcyBzaG93bjsgbm90IGNhbGxlZCBvbiBpbml0aWFsIHJlbmRlclxuICAgICAgICAgKi9cbiAgICAgICAgb25FeHBhbmQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiB0aGUgY29udGVudCBpcyBoaWRkZW47IG5vdCBjYWxsZWQgb24gaW5pdGlhbCByZW5kZXJcbiAgICAgICAgICovXG4gICAgICAgIG9uSGlkZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFueSB2YWxpZCBIVE1MIHRhZyBuYW1lXG4gICAgICAgICAqL1xuICAgICAgICB0b2dnbGVDb21wb25lbnQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNvbnRlbnQgdG8gYmUgc2hvd24gbmV4dCB0byB0aGUgZXhwYW5zaW9uIHRvZ2dsZSB3aGVuIHRoZSBkaXNjbG9zdXJlIGlzIGluIFwiY29udHJhY3RlZFwiIHN0YXRlLCBlLmcuIFwiU2hvdyBBZHZhbmNlZCBPcHRpb25zXCJcbiAgICAgICAgICovXG4gICAgICAgIHRvZ2dsZUNvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb250ZW50IHRvIGJlIHNob3duIG5leHQgdG8gdGhlIGV4cGFuc2lvbiB0b2dnbGUgd2hlbiB0aGUgZGlzY2xvc3VyZSBpcyBpbiBcImV4cGFuZGVkXCIgc3RhdGUsIGUuZy4gXCJIaWRlIEFkdmFuY2VkIE9wdGlvbnNcIlxuICAgICAgICAgKi9cbiAgICAgICAgdG9nZ2xlRXhwYW5kZWRDb250ZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAgICAgICB0b2dnbGVQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgfSksXG4gICAgfVxuXG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGV4cGFuZGVkOiBmYWxzZSxcbiAgICAgICAgb25FeHBhbmQ6IG5vb3AsXG4gICAgICAgIG9uSGlkZTogbm9vcCxcbiAgICAgICAgdG9nZ2xlQ29tcG9uZW50OiAnZGl2JyxcbiAgICAgICAgdG9nZ2xlQ29udGVudDogbnVsbCxcbiAgICAgICAgdG9nZ2xlRXhwYW5kZWRDb250ZW50OiBudWxsLFxuICAgICAgICB0b2dnbGVQcm9wczoge30sXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFByb2dyZXNzaXZlRGlzY2xvc3VyZS5kZWZhdWx0UHJvcHMpXG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgZXhwYW5kZWQ6IHRoaXMucHJvcHMuZXhwYW5kZWQsXG4gICAgfVxuXG4gICAgZmlyZVN0YXRlZnVsQ2FsbGJhY2sgPSAoKSA9PiB0aGlzLnByb3BzW3RoaXMuc3RhdGUuZXhwYW5kZWQgPyAnb25FeHBhbmQnIDogJ29uSGlkZSddKClcblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMpIHtcbiAgICAgICAgaWYgKG5ld1Byb3BzLmV4cGFuZGVkICE9PSB0aGlzLnByb3BzLmV4cGFuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXhwYW5kZWQ6IG5ld1Byb3BzLmV4cGFuZGVkIH0sIHRoaXMuZmlyZVN0YXRlZnVsQ2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4cGFuZGVkOiAhdGhpcy5zdGF0ZS5leHBhbmRlZCB9LCB0aGlzLmZpcmVTdGF0ZWZ1bENhbGxiYWNrKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLnRvZ2dsZVByb3BzLm9uQ2xpY2spKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnRvZ2dsZVByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGV4cGFuZGVkOiAhdGhpcy5zdGF0ZS5leHBhbmRlZCB9LCB0aGlzLmZpcmVTdGF0ZWZ1bENhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMudG9nZ2xlUHJvcHMub25LZXlEb3duKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy50b2dnbGVQcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyQ29udGVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ItZGlzY2xvc3VyZS1jb250ZW50Jz5cbiAgICAgICAgICAgICAgICAgICAge2lzRnVuY3Rpb24odGhpcy5wcm9wcy5jaGlsZHJlbikgPyB0aGlzLnByb3BzLmNoaWxkcmVuKCkgOiB0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIFByb2dyZXNzaXZlRGlzY2xvc3VyZS5pbnRlcm5hbEtleXMpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItZGlzY2xvc3VyZScsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgJ2ItZGlzY2xvc3VyZS1leHBhbmRlZCc6IHRoaXMuc3RhdGUuZXhwYW5kZWQsXG4gICAgICAgICAgICAgICAgfSl9PlxuXG4gICAgICAgICAgICAgICAgPHRoaXMucHJvcHMudG9nZ2xlQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLnRvZ2dsZVByb3BzfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLWRpc2Nsb3N1cmUtdG9nZ2xlJywgdGhpcy5wcm9wcy50b2dnbGVQcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMuaGFuZGxlS2V5RG93bn1cbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9JzAnPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5leHBhbmRlZCA/IHRoaXMucHJvcHMudG9nZ2xlRXhwYW5kZWRDb250ZW50IHx8IHRoaXMucHJvcHMudG9nZ2xlQ29udGVudCA6IHRoaXMucHJvcHMudG9nZ2xlQ29udGVudH1cbiAgICAgICAgICAgICAgICA8L3RoaXMucHJvcHMudG9nZ2xlQ29tcG9uZW50PlxuXG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ29udGVudCgpfVxuICAgICAgICAgICAgPC90aGlzLnByb3BzLmNvbXBvbmVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtcHJvZ3Jlc3NpdmUtZGlzY2xvc3VyZS9pbmRleC5qcyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcbmltcG9ydCB1dWlkIGZyb20gJ2JvdW5kbGVzcy11dGlscy11dWlkJztcblxuY29uc3QgaXNGdW5jdGlvbiA9ICh4KSA9PiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcblxuLyoqXG5SYWRpbyBpcyBpbXBsZW1lbnRlZCBhcyBhIFwiY29udHJvbGxlZCBpbnB1dFwiLCBtZWFuaW5nIGl0IGlzIGEgZGlyZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBkYXRhIHBhc3NlZCBpbnNpZGUuIFVzZXIgaW50ZXJhY3Rpb24gd2lsbCBidWJibGUgY2hhbmdlcyBpbiB0aGUgZm9ybSBvZiBgb25TZWxlY3RlZGAgdGhhdCBhIGNvbnRyb2xsZXIgdmlldyBtdXN0IGludGVyY2VwdCBhbmQgYXBwbHkgYWdhaW5zdCB0aGUgZGF0YSBwcm92aWRlci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFkaW8gZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG92ZXJyaWRlIHRoZSB3cmFwcGVyIGNvbXBvbmVudCBIVE1MIGVsZW1lbnQgdGFnIGlmIGRlc2lyZWRcbiAgICAgICAgICovXG4gICAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgICBpbnB1dFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFJlYWN0LXJlbmRlcmFibGUgY29udGVudFxuICAgICAgICAgKi9cbiAgICAgICAgbGFiZWxDb250ZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5ub2RlLFxuICAgICAgICAgICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLFxuICAgICAgICBdKSxcblxuICAgICAgICBsYWJlbFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcGFzc3Rocm91Z2ggdG8gdGhlIEhUTUwgYG5hbWVgIGF0dHJpYnV0ZSBvbiB0aGUgYC5iLXJhZGlvYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGJlY29tZXMgc2VsZWN0ZWQ7IGJhY2tpbmcgZGF0YSBtdXN0IGJlIHVwZGF0ZWQgdG8gcGVyc2lzdCB0aGUgc3RhdGUgY2hhbmdlXG4gICAgICAgICAqL1xuICAgICAgICBvblNlbGVjdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lcyB0aGUgYWN0aXZhdGlvbiBzdGF0ZSBvZiB0aGUgcmFkaW8gY29udHJvbCwgc2VlIFJlYWN0IFtcImNvbnRyb2xsZWQgaW5wdXRzXCJdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHMpKVxuICAgICAgICAgKi9cbiAgICAgICAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwYXNzdGhyb3VnaCB0byB0aGUgSFRNTCBgdmFsdWVgIGF0dHJpYnV0ZSBvbiB0aGUgYC5iLXJhZGlvYCBub2RlXG4gICAgICAgICAqL1xuICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGNvbXBvbmVudDogJ2RpdicsXG4gICAgICAgIGlucHV0UHJvcHM6IHt9LFxuICAgICAgICBsYWJlbENvbnRlbnQ6IG51bGwsXG4gICAgICAgIGxhYmVsUHJvcHM6IHt9LFxuICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgb25TZWxlY3RlZDogKCkgPT4ge30sXG4gICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6ICcnLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhSYWRpby5kZWZhdWx0UHJvcHMpXG5cbiAgICB1dWlkID0gdXVpZCgpXG5cbiAgICBoYW5kbGVDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU2VsZWN0ZWQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZSkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNoYW5nZShldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJJbnB1dCgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmlucHV0UHJvcHN9XG4gICAgICAgICAgICAgICAgdHlwZT0ncmFkaW8nXG4gICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuaWQgfHwgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmlkIHx8IHRoaXMudXVpZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXJhZGlvJywgdGhpcy5wcm9wcy5pbnB1dFByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAnYi1yYWRpby1zZWxlY3RlZCc6IHRoaXMucHJvcHMuc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lfVxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMucHJvcHMuc2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgYXJpYS1jaGVja2VkPXtTdHJpbmcodGhpcy5wcm9wcy5zZWxlY3RlZCl9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckxhYmVsKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5sYWJlbENvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLmxhYmVsUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItcmFkaW8tbGFiZWwnLCB0aGlzLnByb3BzLmxhYmVsUHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgaHRtbEZvcj17dGhpcy5wcm9wcy5pZCB8fCB0aGlzLnByb3BzLmlucHV0UHJvcHMuaWQgfHwgdGhpcy51dWlkfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMubGFiZWxDb250ZW50fVxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLm9taXQodGhpcy5wcm9wcywgUmFkaW8uaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXJhZGlvLXdyYXBwZXInLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlcklucHV0KCl9XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTGFiZWwoKX1cbiAgICAgICAgICAgIDwvdGhpcy5wcm9wcy5jb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXJhZGlvL2luZGV4LmpzIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBBcnJvd0tleU5hdmlnYXRpb24gZnJvbSAnYm91bmRsZXNzLWFycm93LWtleS1uYXZpZ2F0aW9uJztcbmltcG9ydCBCdXR0b24gZnJvbSAnYm91bmRsZXNzLWJ1dHRvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgdGVzdCkge1xuICAgIGxldCBmb3VuZDtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRlc3QoYXJyW2ldKSkge1xuICAgICAgICAgICAgZm91bmQgPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm91bmQ7XG59XG5cbi8qKlxuU2VnbWVudGVkQ29udHJvbCBoYXMgbWFueSBwb3RlbnRpYWwgdXNlcywgdGhlIG1vc3QgY29tbW9uIGJlaW5nOlxuXG4xLiBUaGUgY29udHJvbHMgZm9yIGEgdGFiYmVkIHZpZXdcbjIuIEEgbW9kZSBzd2l0Y2hcblxuRXNzZW50aWFsbHksIGl0IGJlaGF2ZXMgbGlrZSBhIHJhZGlvIGdyb3VwIHdpdGhvdXQgYWN0dWFsbHkgdXNpbmcgaW5wdXQgY29udHJvbHMuIE9ubHkgb25lIG9wdGlvbiBjYW4gYmUgc2VsZWN0ZWQgYXQgYSB0aW1lLlxuXG4jIyMgQ29tcG9uZW50IEluc3RhbmNlIE1ldGhvZHNcblxuLSBgZ2V0U2VsZWN0ZWRPcHRpb24oKWAgcmV0cmlldmVzIHRoZSBvcHRpb24gdGhhdCBpcyBzZWxlY3RlZFxuLSBgZ2V0U2VsZWN0ZWRPcHRpb25JbmRleCgpYCByZXRyaWV2ZXMgdGhlIGluZGV4IG9mIHRoZSBvcHRpb24gdGhhdCBpcyBzZWxlY3RlZFxuLSBgc2VsZWN0T3B0aW9uKG9wdGlvbilgIGFsbG93cyBmb3IgcHJvZ3JhbW1hdGljIHN3aXRjaGluZyBvZiB0aGUgYWN0aXZlIFNlZ21lbnRlZENvbnRyb2wgb3B0aW9uXG4tIGBzZWxlY3RPcHRpb25CeUtleShrZXksIHZhbHVlKWAgYWxsb3dzIGZvciBwcm9ncmFtbWF0aWMgc3dpdGNoaW5nIG9mIHRoZSBhY3RpdmUgU2VnbWVudGVkQ29udHJvbCBvcHRpb24gdXNpbmcgYSB1bmlxdWUga2V5XG4tIGBzZWxlY3RPcHRpb25JbmRleChpbmRleClgIGFsbG93cyBmb3IgcHJvZ3JhbW1hdGljIHN3aXRjaGluZyBvZiB0aGUgYWN0aXZlIFNlZ21lbnRlZENvbnRyb2wgb3B0aW9uIGJ5IGluZGV4XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlZ21lbnRlZENvbnRyb2wgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAqL1xuICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNldHMgdGhlIGluaXRpYWwgc2VsZWN0ZWQgb3B0aW9uIG9uIGZpcnN0IG1vdW50XG4gICAgICAgICAqL1xuICAgICAgICBkZWZhdWx0T3B0aW9uU2VsZWN0ZWRJbmRleDogUHJvcFR5cGVzLm51bWJlcixcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdoZW4gYSBjaGlsZCBlbGVtZW50IGJlY29tZXMgc2VsZWN0ZWQgd2l0aCB0aGUgb3B0aW9uIGFuZCBvcHRpb24gaW5kZXhcbiAgICAgICAgICovXG4gICAgICAgIG9uT3B0aW9uU2VsZWN0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwcm92aWRlIGEgY3VzdG9taXplZCBjb21wb25lbnQgdHlwZSBpZiBkZXNpcmVkLCBlaXRoZXIgYSBIVE1MIGVsZW1lbnQgbmFtZSBvciBSZWFjdENvbXBvbmVudFxuICAgICAgICAgKi9cbiAgICAgICAgb3B0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgXSksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHByb3Agb2JqZWN0cyB0byBiZSBhcHBsaWVkIGFnYWluc3QgdGhlIFNlZ21lbnRlZENvbnRyb2wgYnV0dG9ucywgYWNjZXB0cyBhbnkgdmFsaWQgUmVhY3QgcHJvcHNcbiAgICAgICAgICpcbiAgICAgICAgICogIyMjIyBFeGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYGpzeFxuICAgICAgICAgKiBvcHRpb25zPXtbe1xuICAgICAgICAgKiAgICAgY2hpbGRyZW46ICdGb28nLFxuICAgICAgICAgKiAgICAgY2xhc3NOYW1lOiAnZm9vJyxcbiAgICAgICAgICogfSwge1xuICAgICAgICAgKiAgICAgY2hpbGRyZW46IDxzcGFuPkJhcjwvc3Bhbj4sXG4gICAgICAgICAqICAgICAnZGF0YS1pZCc6ICdiYXInLFxuICAgICAgICAgKiB9XX1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBvcHRpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXShodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RhZ3MtYW5kLWF0dHJpYnV0ZXMuaHRtbCNodG1sLWF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICkuaXNSZXF1aXJlZCxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBkZWZhdWx0T3B0aW9uU2VsZWN0ZWRJbmRleDogMCxcbiAgICAgICAgb25PcHRpb25TZWxlY3RlZDogKCkgPT4ge30sXG4gICAgICAgIG9wdGlvbkNvbXBvbmVudDogJ2J1dHRvbicsXG4gICAgICAgIG9wdGlvbnM6IFtdLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhTZWdtZW50ZWRDb250cm9sLmRlZmF1bHRQcm9wcylcblxuICAgIHN0YXRlID0ge1xuICAgICAgICBzZWxlY3RlZEluZGV4OiBudWxsLFxuICAgIH1cblxuICAgIGluZmVyU2VsZWN0ZWRPcHRpb25JbmRleChwcm9wcyA9IHRoaXMucHJvcHMsIHN0YXRlID0gdGhpcy5zdGF0ZSkge1xuICAgICAgICByZXR1cm4gZmluZEluZGV4KHByb3BzLm9wdGlvbnMsIChvcHRpb24pID0+IG9wdGlvbi5wcmVzc2VkKSB8fCBzdGF0ZS5zZWxlY3RlZEluZGV4O1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSW5kZXg6IHRoaXMuaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4KCkgfHwgdGhpcy5wcm9wcy5kZWZhdWx0T3B0aW9uU2VsZWN0ZWRJbmRleCB9KTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAobmV4dFByb3BzLm9wdGlvbnMgIT09IHRoaXMucHJvcHMub3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSW5kZXg6IHRoaXMuaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4KG5leHRQcm9wcykgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVPcHRpb25TZWxlY3Rpb24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuLCBldmVudC50YXJnZXQpO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogaW5kZXggfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25PcHRpb25TZWxlY3RlZCh0aGlzLnByb3BzLm9wdGlvbnNbdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XSwgdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldFNlbGVjdGVkT3B0aW9uID0gKCkgPT4gdGhpcy5wcm9wcy5vcHRpb25zW3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF1cblxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXRTZWxlY3RlZE9wdGlvbkluZGV4ID0gKCkgPT4gdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XG5cbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2VsZWN0T3B0aW9uID0gKG9wdGlvbikgPT4gdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSW5kZXg6IHRoaXMucHJvcHMub3B0aW9ucy5pbmRleE9mKG9wdGlvbikgfSlcblxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZWxlY3RPcHRpb25CeUtleSA9IChrLCB2KSA9PiB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogZmluZEluZGV4KHRoaXMucHJvcHMub3B0aW9ucywgKG9wdGlvbikgPT4gb3B0aW9uW2tdID09PSB2KSB9KVxuXG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNlbGVjdE9wdGlvbkluZGV4ID0gKGluZGV4KSA9PiB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogaW5kZXggfSlcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcnJvd0tleU5hdmlnYXRpb25cbiAgICAgICAgICAgICAgICB7Li4ub21pdCh0aGlzLnByb3BzLCBTZWdtZW50ZWRDb250cm9sLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgcm9sZT0ncmFkaW9ncm91cCdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXNlZ21lbnRlZC1jb250cm9sJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgIG1vZGU9e0Fycm93S2V5TmF2aWdhdGlvbi5tb2RlLkhPUklaT05UQUx9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLm9wdGlvbnMubWFwKChwcm9wcywgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtwcm9wcy5rZXkgfHwgaW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWNoZWNrZWQ9e2luZGV4ID09PSB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e3Byb3BzLmNvbXBvbmVudCB8fCB0aGlzLnByb3BzLm9wdGlvbkNvbXBvbmVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2Itc2VnbWVudGVkLWNvbnRyb2wtb3B0aW9uJywgcHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Itc2VnbWVudGVkLWNvbnRyb2wtb3B0aW9uLXNlbGVjdGVkJzogaW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkPXt0aGlzLmhhbmRsZU9wdGlvblNlbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWQ9e2luZGV4ID09PSB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlPSdyYWRpbyc+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9BcnJvd0tleU5hdmlnYXRpb24+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXNlZ21lbnRlZC1jb250cm9sL2luZGV4LmpzIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNsb25lRWxlbWVudCwgY3JlYXRlRWxlbWVudCwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IFR5cGVhaGVhZCBmcm9tICdib3VuZGxlc3MtdHlwZWFoZWFkJztcbmltcG9ydCBleHRyYWN0Q2hpbGRQcm9wcyBmcm9tICdib3VuZGxlc3MtdXRpbHMtb2JqZWN0LWludGVyc2VjdGlvbic7XG5pbXBvcnQgb21pdCBmcm9tICdib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzJztcblxuY29uc3QgZmlyc3QgPSAoYXJyYXkpID0+IGFycmF5WzBdO1xuY29uc3QgbGFzdCA9IChhcnJheSkgPT4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG5jb25zdCBpc0Z1bmN0aW9uID0gKHgpID0+IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuXG4vKipcbiogQmFzaWMgdXNhZ2Ugb2YgdGhpcyBjb21wb25lbnQgaXMgaWRlbnRpY2FsIHRvIHRoYXQgb2YgW1R5cGVhaGVhZF1cbiogKGh0dHBzOi8vZ2l0aHViLmNvbS9lbmlnbWEtaW8vYm91bmRsZXNzL21hc3Rlci9wYWNrYWdlcy8qIGJvdW5kbGVzcy10eXBlYWhlYWQpLiBBZGRpdGlvbmFsIHByb3BzIGFyZSBhdmFpbGFibGUgdG8gdGFrZVxuKiBhZHZhbnRhZ2Ugb2YgdGhlIHRva2VuaXphdGlvbiBmdW5jdGlvbmFsaXR5LlxuKlxuKiAjIyBDb21wb25lbnQgSW5zdGFuY2UgTWV0aG9kc1xuKlxuKiBXaGVuIHVzaW5nIGBUb2tlbml6ZWRJbnB1dGAgaW4geW91ciBwcm9qZWN0LCB5b3UgbWF5IGNhbGwgdGhlIGZvbGxvd2luZyBtZXRob2RzIG9uIGEgcmVuZGVyZWQgaW5zdGFuY2Ugb2YgdGhlXG4qIGNvbXBvbmVudC4gVXNlIFtgcmVmc2BdKCogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9yZWZzLWFuZC10aGUtZG9tLmh0bWwpIHRvIGdldCB0aGUgaW5zdGFuY2UuXG4qXG4qIC0gX19gYWRkKGluZGV4OiBudW1iZXIpYF9fXG4qICAgcHJvZ3JhbW1hdGljYWxseSBjcmVhdGVzIGEgdG9rZW4gZm9yIGBwcm9wcy5lbnRpdGllc1tpbmRleF1gOyBgcHJvcHMuaGFuZGxlQWRkVG9rZW5gIHdpbGwgYmUgY2FsbGVkIGFzIGEgaGludCB0b1xuKiAgIHBlcnNpc3QgdGhlIGNoYW5nZSBpbiAqIHlvdXIgY29udHJvbGxlciB2aWV3IG9yIG90aGVyIGFwcGxpY2F0aW9uIHN0YXRlXG4qXG4qIC0gX19gZm9jdXMoKWBfX1xuKiAgIGZvY3VzZXMgdGhlIGJyb3dzZXIgb29uIHRoZSB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXQgZm9yIGltbWVkaWF0ZSB0ZXh0IGVudHJ5XG4qXG4qIC0gX19gZ2V0SW5wdXROb2RlKClgX19cbiogICByZXR1cm5zIHRoZSByYXcgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0IERPTSBub2RlXG4qXG4qIC0gX19gZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KClgX19cbiogICByZXR1cm5zIHRoZSBgdGV4dGAgcHJvcGVydHkgb2YgdGhlIGN1cnJlbnRseSBoaWdobGlnaHRlZCBlbnRpdHkgKGZyb20gYHByb3BzLmVudGl0aWVzYCksIG9yIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nXG4qXG4qIC0gX19gZ2V0VmFsdWUoKWBfX1xuKiAgIHJldHJpZXZlcyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0XG4qXG4qIC0gX19gcmVtb3ZlKGluZGV4OiBudW1iZXIpYF9fXG4qICAgcHJvZ3JhbW1hdGljYWxseSByZW1vdmVzIHRoZSB0b2tlbiBmb3IgYHByb3BzLmVudGl0aWVzW2luZGV4XWA7IGBwcm9wcy5oYW5kbGVSZW1vdmVUb2tlbnNgIHdpbGwgYmUgY2FsbGVkIGFzIGEgaGludFxuKiAgIHRvIHBlcnNpc3QgdGhlICogY2hhbmdlIGluIHlvdXIgY29udHJvbGxlciB2aWV3IG9yIG90aGVyIGFwcGxpY2F0aW9uIHN0YXRlXG4qXG4qIC0gX19gc2VsZWN0KClgX19cbiogICBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZXMgYSBmdWxsIHNlbGVjdGlvbiBvbiB0aGUgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0IHN1Y2ggdGhhdCBhIHByZXNzIG9mIHRoZSBCYWNrc3BhY2Uga2V5XG4qICAgd291bGQgZnVsbHkgY2xlYXIgdGhlICogaW5wdXRcbipcbiogLSBfX2BzZXRWYWx1ZSh2YWx1ZTogc3RyaW5nKWBfX1xuKiAgIHNldHMgdGhlIHVuZGVybHlpbmcgdGV4dHVhbCBpbnB1dCB0byB0aGUgc3BlY2lmaWVkIHRleHQgYW5kIHVwZGF0ZXMgaW50ZXJuYWwgc3RhdGU7IGRvIG5vdCB1c2UgdGhpcyBtZXRob2Qgd2hlblxuKiAgIHVzaW5nIGBUeXBlYWhlYWRgIGFzIGEgXCJjb250cm9sbGVkIGlucHV0XCJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9rZW5pemVkSW5wdXQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAuLi5UeXBlYWhlYWQucHJvcFR5cGVzLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmdW5jdGlvbiBoYW5kbGVyIHRoYXQgaXMgY2FsbGVkIHdoZW4gYW4gZW50aXR5IGlzIHNlbGVjdGVkIGJ5IHRoZSB1c2VyIGFuZCBhIHRva2VuIHNob3VsZCBiZSBjcmVhdGVkXG4gICAgICAgICAqL1xuICAgICAgICBoYW5kbGVBZGRUb2tlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZ1bmN0aW9uIGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiBvbmUgb3IgbW9yZSB0b2tlbnMgYXJlIHJlbW92ZWQgYnkgdGhlIHVzZXIgdmlhIGNsaWNraW5nIHRoZSBcImNsb3NlXCJcbiAgICAgICAgICogYnV0dG9uIG9yIHByZXNzaW5nIHRoZSBgQmFja3NwYWNlYCBrZXkgd2hpbGUgdG9rZW5zIGFyZSBzZWxlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgaGFuZGxlUmVtb3ZlVG9rZW5zOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZnVuY3Rpb24gaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB3aGVuIG9uZSBvciBtb3JlIHRva2VucyBhcmUgc2VsZWN0ZWQgYnkgdGhlIHVzZXIgdmlhIGNsaWNrIG9yIGtleWJvYXJkXG4gICAgICAgICAqIGFjdGlvbnM7IGNhbGxlZCB3aXRoIHdoYXQgdGhlIG5ldyBzZWxlY3Rpb24gc2hvdWxkIGJlXG4gICAgICAgICAqL1xuICAgICAgICBoYW5kbGVOZXdTZWxlY3Rpb246IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aGUgSlNYIHVzZWQgZm9yIHRoZSBjbG9zZSBidXR0b24gaXRzZWxmXG4gICAgICAgICAqL1xuICAgICAgICB0b2tlbkNsb3NlQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogZGV0ZXJtaW5lcyBpZiB0aGUgYC5iLXRva2VuZmllbGQtdG9rZW4tY2xvc2VgIGVsZW1lbnQgc2hvdWxkIGJlIHJlbmRlcmVkIGZvciBlYWNoIHRva2VuXG4gICAgICAgICAqL1xuICAgICAgICB0b2tlbkNsb3NlVmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBpbmRleGVzIG9mIGVudGl0aWVzIHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGFzIFwidG9rZW5zXCIgaW4gdGhlIGNvbXBvbmVudCBVSVxuICAgICAgICAgKi9cbiAgICAgICAgdG9rZW5zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIGluZGV4ZXMgb2YgdG9rZW5pemVkIGVudGl0aWVzIHRoYXQgYXJlIHBhcnQgb2YgYW4gYWN0aXZlIHNlbGVjdGlvbjsgdGhlIHVzZXIgY2FuIHByZXNzIGBCYWNrc3BhY2VgIHRvXG4gICAgICAgICAqIHRyaWdnZXIgYGhhbmRsZVJlbW92ZVRva2Vuc2BcbiAgICAgICAgICovXG4gICAgICAgIHRva2Vuc1NlbGVjdGVkOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICAuLi5UeXBlYWhlYWQuZGVmYXVsdFByb3BzLFxuICAgICAgICBoYW5kbGVBZGRUb2tlbjogKCkgPT4ge30sXG4gICAgICAgIGhhbmRsZVJlbW92ZVRva2VuczogKCkgPT4ge30sXG4gICAgICAgIGhhbmRsZU5ld1NlbGVjdGlvbjogKCkgPT4ge30sXG4gICAgICAgIHRva2VuQ2xvc2VDb21wb25lbnQ6ICg8ZGl2Plg8L2Rpdj4pLFxuICAgICAgICB0b2tlbkNsb3NlVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgdG9rZW5zOiBbXSxcbiAgICAgICAgdG9rZW5zU2VsZWN0ZWQ6IFtdLFxuICAgIH1cblxuICAgIHN0YXRpYyBpbnRlcm5hbEtleXMgPSBPYmplY3Qua2V5cyhUb2tlbml6ZWRJbnB1dC5kZWZhdWx0UHJvcHMpXG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzU2VsZWN0ZWRJbmRleGVzID0gcHJldlByb3BzLnRva2Vuc1NlbGVjdGVkO1xuICAgICAgICBjb25zdCBjdXJyZW50U2VsZWN0ZWRJbmRleGVzID0gdGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZDtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy50b2tlbnMubGVuZ3RoID4gcHJldlByb3BzLnRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3N1cHByZXNzTmV4dFRva2VuU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9zdXBwcmVzc05leHRUb2tlblNlbGVjdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoICAgcHJldmlvdXNTZWxlY3RlZEluZGV4ZXMgIT09IGN1cnJlbnRTZWxlY3RlZEluZGV4ZXNcbiAgICAgICAgICAgICYmIGN1cnJlbnRTZWxlY3RlZEluZGV4ZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFNlbGVjdGVkSW5kZXhlcy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgICAgICB8fCBjdXJyZW50U2VsZWN0ZWRJbmRleGVzWzBdICE9PSBwcmV2aW91c1NlbGVjdGVkSW5kZXhlc1swXSAvKiBtdWx0aSBzZWxlY3Rpb24sIGxlZnR3YXJkICovKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmc1tgdG9rZW5fJHtjdXJyZW50U2VsZWN0ZWRJbmRleGVzWzBdfWBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QoY3VycmVudFNlbGVjdGVkSW5kZXhlcykgIT09IGxhc3QocHJldmlvdXNTZWxlY3RlZEluZGV4ZXMpIC8qIG11bHRpIHNlbGVjdGlvbiwgcmlnaHR3YXJkICovKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmc1tgdG9rZW5fJHtsYXN0KGN1cnJlbnRTZWxlY3RlZEluZGV4ZXMpfWBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucmVmc1tgdG9rZW5fJHtjdXJyZW50U2VsZWN0ZWRJbmRleGVzWzBdfWBdLmZvY3VzKCk7XG4gICAgICAgIH0gLy8gbW92ZSBmb2N1c1xuICAgIH1cblxuICAgIC8vIHBhc3N0aHJvdWdocyB0byBUeXBlYWhlYWQgaW5zdGFuY2UgbWV0aG9kc1xuICAgIGZvY3VzID0gKCkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5mb2N1cygpXG4gICAgZ2V0SW5wdXROb2RlID0gKCkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5nZXRJbnB1dE5vZGUoKVxuICAgIGdldFNlbGVjdGVkRW50aXR5VGV4dCA9ICgpID0+IHRoaXMucmVmcy50eXBlYWhlYWQuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KClcbiAgICBnZXRWYWx1ZSA9ICgpID0+IHRoaXMucmVmcy50eXBlYWhlYWQuZ2V0VmFsdWUoKVxuICAgIHNlbGVjdCA9ICgpID0+IHRoaXMucmVmcy50eXBlYWhlYWQuc2VsZWN0KClcbiAgICBzZXRWYWx1ZSA9ICh2YWx1ZSkgPT4gdGhpcy5yZWZzLnR5cGVhaGVhZC5zZXRWYWx1ZSh2YWx1ZSlcblxuICAgIGFkZCA9IChpbmRleCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy50b2tlbnMuaW5kZXhPZihpbmRleCkgPT09IC0xKSB7IHRoaXMucHJvcHMuaGFuZGxlQWRkVG9rZW4oaW5kZXgpOyB9XG4gICAgfVxuXG4gICAgcmVtb3ZlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ZXMgPSAoQXJyYXkuaXNBcnJheShpbmRleCkgPyBpbmRleCA6IFsgaW5kZXggXSkuZmlsdGVyKChpZHgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLnRva2Vucy5pbmRleE9mKGlkeCkgIT09IC0xO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaW5kZXhlcy5sZW5ndGgpIHsgdGhpcy5wcm9wcy5oYW5kbGVSZW1vdmVUb2tlbnMoaW5kZXhlcyk7IH1cbiAgICB9XG5cbiAgICBzZWxlY3RUb2tlbihpbmRleCkge1xuICAgICAgICB0aGlzLnByb3BzLmhhbmRsZU5ld1NlbGVjdGlvbihbIGluZGV4IF0pO1xuICAgIH1cblxuICAgIHNlbGVjdFRva2VucyhpbmRleGVzKSB7XG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlTmV3U2VsZWN0aW9uKGluZGV4ZXMpO1xuICAgIH1cblxuICAgIHNlbGVjdFByZXZpb3VzVG9rZW4oYXBwZW5kKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZDtcbiAgICAgICAgY29uc3QgaW5kZXhlcyA9IHRoaXMucHJvcHMudG9rZW5zO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPT09IDEgJiYgZmlyc3Qoc2VsZWN0ZWQpID09PSBmaXJzdChpbmRleGVzKSkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBhbHJlYWR5IGF0IGxlZnRtb3N0IGJvdW5kXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZWN0ZWQubGVuZ3RoID09PSAwKSB7IC8vIHBpY2sgdGhlIHJpZ2h0bW9zdFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RUb2tlbihsYXN0KGluZGV4ZXMpKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gYWRkIHRoZSBuZXh0IGxlZnRtb3N0IHRvIGEgcmVjb25zdHJ1Y3RlZCBcInNlbGVjdGVkXCIgYXJyYXlcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVG9rZW4gPSBpbmRleGVzW2luZGV4ZXMuaW5kZXhPZihmaXJzdChzZWxlY3RlZCkpIC0gMV07XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VG9rZW5zKGFwcGVuZCA/IFsgcHJldmlvdXNUb2tlbiBdLmNvbmNhdChzZWxlY3RlZCkgOiBbIHByZXZpb3VzVG9rZW4gXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxlY3ROZXh0VG9rZW4oYXBwZW5kKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5wcm9wcy50b2tlbnNTZWxlY3RlZDtcbiAgICAgICAgY29uc3QgaW5kZXhlcyA9IHRoaXMucHJvcHMudG9rZW5zO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXN0KHNlbGVjdGVkKSA9PT0gbGFzdChpbmRleGVzKSkge1xuICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV4dFRva2VuID0gaW5kZXhlc1tpbmRleGVzLmluZGV4T2YobGFzdChzZWxlY3RlZCkpICsgMV07XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VG9rZW5zKGFwcGVuZCA/IHNlbGVjdGVkLmNvbmNhdChuZXh0VG9rZW4pIDogWyBuZXh0VG9rZW4gXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhclNlbGVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVOZXdTZWxlY3Rpb24oW10pO1xuICAgIH1cblxuICAgIGhhbmRsZUlucHV0Q2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMuaW5wdXRQcm9wcy5vbkNsaWNrKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlSW5wdXRGb2N1cyA9IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uRm9jdXMpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmlucHV0UHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVLZXlEb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgICAgY2FzZSAzNzogICAgLy8gbGVmdCBhcnJvd1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RQcmV2aW91c1Rva2VuKGV2ZW50LnNoaWZ0S2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzk6ICAgIC8vIHJpZ2h0IGFycm93XG4gICAgICAgICAgICB0aGlzLnNlbGVjdE5leHRUb2tlbihldmVudC5zaGlmdEtleSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDg6ICAgICAvLyBiYWNrc3BhY2VcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRva2Vuc1NlbGVjdGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRoaXMucHJvcHMudG9rZW5zU2VsZWN0ZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA2NTogICAgLy8gbGV0dGVyIFwiYVwiXG4gICAgICAgICAgICBpZiAoZXZlbnQubWV0YUtleSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QoKTtcblxuICAgICAgICAgICAgICAgIC8vIGhhY2t5LCBidXQgdGhlIG9ubHkgd2F5IHVubGVzcyB3ZSBtb3ZlIHNlbGVjdGlvbiBtYW5hZ2VtZW50IGludGVybmFsIGFnYWluXG4gICAgICAgICAgICAgICAgdGhpcy5fc3VwcHJlc3NOZXh0VG9rZW5TZWxlY3Rpb24gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVOZXdTZWxlY3Rpb24odGhpcy5wcm9wcy50b2tlbnMpO1xuICAgICAgICAgICAgfSAvLyBcImNtZFwiXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzLnByb3BzLm9uS2V5RG93bikpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVRva2VuQ2xvc2VDbGljayhpbmRleCwgZXZlbnQpIHtcbiAgICAgICAgLy8gaWYgd2UgZG9uJ3Qgc3RvcCBwcm9wYWdhdGlvbiwgdGhlIGV2ZW50IGJ1YmJsZXMgYW5kIHJlc3VsdHMgaW4gYSBmYWlsZWQgdG9rZW4gc2VsZWN0aW9uXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIHRoaXMucmVtb3ZlKGluZGV4KTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy50b2tlbkNsb3NlQ29tcG9uZW50LnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyVG9rZW5DbG9zZShpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy50b2tlbkNsb3NlVmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudCh0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGN4KCdiLXRva2VuZmllbGQtdG9rZW4tY2xvc2UnLCB0aGlzLnByb3BzLnRva2VuQ2xvc2VDb21wb25lbnQucHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZVRva2VuQ2xvc2VDbGljay5iaW5kKHRoaXMsIGluZGV4KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlVG9rZW5LZXlEb3duKGluZGV4LCBldmVudCkge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICAgIGNhc2UgMTM6IC8vIGVudGVyXG4gICAgICAgIGNhc2UgMzI6IC8vIHNwYWNlXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFRva2VuKGluZGV4KTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDg6IC8vIGJhY2tzcGFjZVxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyVG9rZW5zKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ItdG9rZW5maWVsZC10b2tlbnMnIHJvbGU9J2xpc3Rib3gnPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnRva2Vucy5tYXAoKGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXtgdG9rZW5fJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi10b2tlbmZpZWxkLXRva2VuJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiLXRva2VuZmllbGQtdG9rZW4tc2VsZWN0ZWQnOiB0aGlzLnByb3BzLnRva2Vuc1NlbGVjdGVkLmluZGV4T2YoaW5kZXgpICE9PSAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNlbGVjdFRva2VuLmJpbmQodGhpcywgaW5kZXgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVUb2tlbktleURvd24uYmluZCh0aGlzLCBpbmRleCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT0nb3B0aW9uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PScwJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5lbnRpdGllc1tpbmRleF0udGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJUb2tlbkNsb3NlKGluZGV4KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIFRva2VuaXplZElucHV0LmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgcmVmPSd3cmFwcGVyJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItdG9rZW5maWVsZC13cmFwcGVyJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVLZXlEb3dufT5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJUb2tlbnMoKX1cblxuICAgICAgICAgICAgICAgIDxUeXBlYWhlYWRcbiAgICAgICAgICAgICAgICAgICAgey4uLmV4dHJhY3RDaGlsZFByb3BzKHRoaXMucHJvcHMsIFR5cGVhaGVhZC5kZWZhdWx0UHJvcHMpfVxuICAgICAgICAgICAgICAgICAgICByZWY9J3R5cGVhaGVhZCdcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdiLXRva2VuZmllbGQnXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyT25TZWxlY3Rpb249e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIGlucHV0UHJvcHM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlSW5wdXRDbGljayxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRm9jdXM6IHRoaXMuaGFuZGxlSW5wdXRGb2N1cyxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgb25FbnRpdHlTZWxlY3RlZD17dGhpcy5hZGR9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtdG9rZW5pemVkLWlucHV0L2luZGV4LmpzIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgZXNjYXBlciBmcm9tICdlc2NhcGUtc3RyaW5nLXJlZ2V4cCc7XG5cbmltcG9ydCBJbnB1dCBmcm9tICdib3VuZGxlc3MtaW5wdXQnO1xuaW1wb3J0IGV4dHJhY3RDaGlsZFByb3BzIGZyb20gJ2JvdW5kbGVzcy11dGlscy1vYmplY3QtaW50ZXJzZWN0aW9uJztcbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuaW1wb3J0IHV1aWQgZnJvbSAnYm91bmRsZXNzLXV0aWxzLXV1aWQnO1xuXG5jb25zdCBpc0Z1bmN0aW9uID0gKHgpID0+IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuY29uc3QgaXNTdHJpbmcgPSAoeCkgPT4gdHlwZW9mIHggPT09ICdzdHJpbmcnO1xuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG4vKipcbiogVHlwZWFoZWFkIGlzIGFuIGVuaGFuY2VtZW50IHVwb24gW0lucHV0XShodHRwczovL2dpdGh1Yi5jb20vZW5pZ21hLWlvL2JvdW5kbGVzcy90cmVlL21hc3Rlci9wYWNrYWdlcy9ib3VuZGxlc3MtaW5wdXQpXG4qIHdoaWNoIHByb3ZpZGVzIHR3byAqIGJ1aWx0LWluIG1hdGNoaW5nIGFsZ29yaXRobXMgKFwiZnV6enlcIiBcXFtkZWZhdWx0XFxdIGFuZCBcInN0YXJ0cy13aXRoXCIpIGFuZCBzdXBwb3J0cyB0aGUgdXNlIG9mXG4qIGN1c3RvbSBtYXRjaGluZyBhbmQgbWFya2luZyBmdW5jdGlvbnMuXG4qXG4qIEluIHRoZSBleGFtcGxlcyBiZWxvdywgaW1hZ2luZSB0aGUgYDw+YCBpbiB0aGUgXCJtYXJrc1wiIHNlY3Rpb24gaXMgYSB3cmFwcGluZyBgPG1hcms+YCBlbGVtZW50OlxuKlxuKiAxLiBfX1wiU3RhcnRzLXdpdGhcIiBtYXRjaGluZyAmIG1hcmtpbmdfX1xuKiAgICBgYGBqc3hcbiogICAgPFR5cGVhaGVhZFxuKiAgICAgICAgYWxnb3JpdGhtPXtUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSH1cbiogICAgICAgIGVudGl0aWVzPXtbXG4qICAgICAgICAgICAge3RleHQ6ICdhcHBsZSd9LFxuKiAgICAgICAgICAgIHt0ZXh0OiAnYXByaWNvdCd9LFxuKiAgICAgICAgICAgIHt0ZXh0OiAnZ3JhcGUnfSxcbiogICAgICAgIF19XG4qICAgICAgICBpbnB1dFByb3BzPXt7dmFsdWU6ICdhJ319IC8+XG4qICAgIGBgYFxuKlxuKiAgICArIG1hdGNoZXM6IGBcImFwcGxlXCIsIFwiYXByaWNvdFwiYFxuKiAgICArIG1hcmtzOiBgXCI8YT5wcGxlXCIsIFwiPGE+cHJpY290XCJgXG4qXG4qIDEuIF9fXCJGdXp6eVwiIG1hdGNoaW5nICYgbWFya2luZ19fXG4qICAgIGBgYGpzeFxuKiAgICA8VHlwZWFoZWFkXG4qICAgICAgICBhbGdvcml0aG09e1R5cGVhaGVhZC5tb2RlLkZVWlpZfVxuKiAgICAgICAgZW50aXRpZXM9e1tcbiogICAgICAgICAgICB7dGV4dDogJ2FwcGxlJ30sXG4qICAgICAgICAgICAge3RleHQ6ICdhcHJpY290J30sXG4qICAgICAgICAgICAge3RleHQ6ICdncmFwZSd9LFxuKiAgICAgICAgXX1cbiogICAgICAgIGlucHV0UHJvcHM9e3t2YWx1ZTogJ2EnfX0gLz5cbiogICAgYGBgXG4qXG4qICAgICsgbWF0Y2hlczogYFwiYXBwbGVcIiwgXCJhcHJpY290XCIsIFwiZ3JhcGVcImBcbiogICAgKyBtYXJrczogYFwiPGE+cHBsZVwiLCBcIjxhPnByaWNvdFwiLCBcImdyPGE+cGVcImBcbipcbiogMS4gX19DdXN0b20gbWF0Y2hpbmcgJiBtYXJraW5nX19cbipcbiogICAgIE9wdGlvbmFsbHksIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93biBjb21iaW5hdGlvbiBvZiBtYXRjaGluZyBhbmQgbWFya2luZyBmdW5jdGlvbnMuIEZvciBleGFtcGxlLCBsb29zZW5pbmcgdGhlXG4qICAgICBtYXRjaGluZyB0byBpbmNsdWRlICogdW5pY29kZSB2YXJpYW50cyBvZiBjaGFyYWN0ZXJzIGNvdWxkIGJlIHVzZWZ1bCwgZS5nLiDDpyAmcmFycjsgY1xuKlxuKiAgICAgYGBganN4XG4qICAgICA8VHlwZWFoZWFkXG4qICAgICAgICAgYWxnb3JpdGhtPXt7XG4qICAgICAgICAgICAgIG1hdGNoZXI6IHlvdXJNYXRjaEZ1bmMsXG4qICAgICAgICAgICAgIG1hcmtlcjogeW91ck1hcmtGdW5jLFxuKiAgICAgICAgIH19IC8+XG4qICAgICBgYGBcbipcbiogIyMgQ29tcG9uZW50IEluc3RhbmNlIE1ldGhvZHNcbipcbiogV2hlbiB1c2luZyBgVHlwZWFoZWFkYCBpbiB5b3VyIHByb2plY3QsIHlvdSBtYXkgY2FsbCB0aGUgZm9sbG93aW5nIG1ldGhvZHMgb24gYSByZW5kZXJlZCBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50LlxuKiBVc2UgW2ByZWZzYF0oaHR0cHM6Ly8qIGZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3JlZnMtYW5kLXRoZS1kb20uaHRtbCkgdG8gZ2V0IHRoZSBpbnN0YW5jZS5cbipcbiogLSBfX2Bmb2N1cygpYF9fXG4qICAgZm9jdXNlcyB0aGUgYnJvd3NlciBvb24gdGhlIHVuZGVybHlpbmcgdGV4dHVhbCBpbnB1dCBmb3IgaW1tZWRpYXRlIHRleHQgZW50cnlcbipcbiogLSBfX2BnZXRJbnB1dE5vZGUoKWBfX1xuKiAgIHJldHVybnMgdGhlIHJhdyB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXQgRE9NIG5vZGVcbipcbiogLSBfX2BnZXRTZWxlY3RlZEVudGl0eVRleHQoKWBfX1xuKiAgIHJldHVybnMgdGhlIGB0ZXh0YCBwcm9wZXJ0eSBvZiB0aGUgY3VycmVudGx5IGhpZ2hsaWdodGVkIGVudGl0eSAoZnJvbSBgcHJvcHMuZW50aXRpZXNgKSwgb3IgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmdcbipcbiogLSBfX2BnZXRWYWx1ZSgpYF9fXG4qICAgcmV0cmlldmVzIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXRcbipcbiogLSBfX2BzZWxlY3QoKWBfX1xuKiAgIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlcyBhIGZ1bGwgc2VsZWN0aW9uIG9uIHRoZSB1bmRlcmx5aW5nIHRleHR1YWwgaW5wdXQgc3VjaCB0aGF0IGEgcHJlc3Mgb2YgdGhlIEJhY2tzcGFjZSBrZXlcbiogICB3b3VsZCBmdWxseSBjbGVhciB0aGUgKiBpbnB1dFxuKlxuKiAtIF9fYHNldFZhbHVlKHZhbHVlOiBzdHJpbmcpYF9fXG4qICAgc2V0cyB0aGUgdW5kZXJseWluZyB0ZXh0dWFsIGlucHV0IHRvIHRoZSBzcGVjaWZpZWQgdGV4dCBhbmQgdXBkYXRlcyBpbnRlcm5hbCBzdGF0ZTsgZG8gbm90IHVzZSB0aGlzIG1ldGhvZCB3aGVuXG4qICAgdXNpbmcgYFR5cGVhaGVhZGAgYXMgYSAqIFwiY29udHJvbGxlZCBpbnB1dFwiXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR5cGVhaGVhZCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBtb2RlID0ge1xuICAgICAgICAnU1RBUlRTX1dJVEgnOiB1dWlkKCksXG4gICAgICAgICdGVVpaWSc6IHV1aWQoKSxcbiAgICB9XG5cbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVHlwZWFoZWFkIGFjY2VwdHMgYWxsIHN1cHBvcnRlZCBbSW5wdXQgcHJvcHNdXG4gICAgICAgICAqIChodHRwczovL2dpdGh1Yi5jb20vZW5pZ21hLWlvL2JvdW5kbGVzcy90cmVlL21hc3Rlci9wYWNrYWdlcy9ib3VuZGxlc3MtaW5wdXQpXG4gICAgICAgICAqL1xuICAgICAgICAuLi5JbnB1dC5wcm9wVHlwZXMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRoZSBtZWNoYW5pc20gdXNlZCB0byBpZGVudGlmeSBhbmQgbWFyayBtYXRjaGluZyBzdWJzdHJpbmdzOyBhIGN1c3RvbSBzZXQgY2FuIGJlIHByb3ZpZGVkIGFzIGFuIG9iamVjdFxuICAgICAgICAgKiAoc2VlIHRoZSBwcm9wZXJ0aWVzIGJlbG93KVxuICAgICAgICAgKi9cbiAgICAgICAgYWxnb3JpdGhtOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgIFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAgICAgICAgICAgVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsXG4gICAgICAgICAgICAgICAgVHlwZWFoZWFkLm1vZGUuRlVaWlksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gZm9ybWF0IHdpbGwgYmUgd2hhdCBzaG93cyB1cCBpbiB0aGUgdHlwZWFoZWFkIGRyb3Bkb3duIGxpc3RcbiAgICAgICAgICAgICAgICAgKiAoSlNYIGFycmF5cyBhcmUgYWNjZXB0ZWQsIHRoZSBjb21wb25lbnQgd2lsbCBwcm92aWRlIHRoZSB3cmFwcGVyKVxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogYW4gZXhhbXBsZSBtYXJraW5nIGZ1bmN0aW9uOlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogYGBganNcbiAgICAgICAgICAgICAgICAgKiBzdGFydHNXaXRoTWFya2luZ0Z1bmMoaW5wdXRUZXh0LCBlbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgKiAgICAgY29uc3QgZW50aXR5Q29udGVudCA9IGVudGl0eS50ZXh0O1xuICAgICAgICAgICAgICAgICAqICAgICBjb25zdCBzZWVrVmFsdWUgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAqICAgICBjb25zdCBpbmRleFN0YXJ0ID0gZW50aXR5Q29udGVudC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2Vla1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgKiAgICAgY29uc3QgaW5kZXhFbmQgPSBpbmRleFN0YXJ0ICsgc2Vla1ZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAqICAgICAgICAgPHNwYW4ga2V5PSdiZWZvcmUnPntlbnRpdHlDb250ZW50LnNsaWNlKDAsIGluZGV4U3RhcnQpfTwvc3Bhbj4sXG4gICAgICAgICAgICAgICAgICogICAgICAgICA8bWFyayBrZXk9J21hcmsnPntlbnRpdHlDb250ZW50LnNsaWNlKGluZGV4U3RhcnQsIGluZGV4RW5kKX08L21hcms+LFxuICAgICAgICAgICAgICAgICAqICAgICAgICAgPHNwYW4ga2V5PSdhZnRlcic+e2VudGl0eUNvbnRlbnQuc2xpY2UoaW5kZXhFbmQpfTwvc3Bhbj4sXG4gICAgICAgICAgICAgICAgICogICAgIF07XG4gICAgICAgICAgICAgICAgICogfVxuICAgICAgICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIG1hcmtlcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICAgICAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICAgICAgICAgICAgICBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZWFoZWFkLm1vZGUuU1RBUlRTX1dJVEgsXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5GVVpaWSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiBmb3JtYXQgZGV0ZXJtaW5lcyB3aGljaCBlbnRpdGllcyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgbWFya2luZ1xuICAgICAgICAgICAgICAgICAqIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBhbiBleGFtcGxlIG1hdGNoaW5nIGZ1bmN0aW9uOlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogYGBganNcbiAgICAgICAgICAgICAgICAgKiBzdGFydHNXaXRoTWF0Y2hpbmdGdW5jKGlucHV0VGV4dCwgZW50aXRpZXMpIHtcbiAgICAgICAgICAgICAgICAgKiAgICAgY29uc3Qgc2Vla1ZhbHVlID0gdXNlclRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqICAgICByZXR1cm4gZW50aXRpZXMucmVkdWNlKGZ1bmN0aW9uIHNlZWtNYXRjaChyZXN1bHRzLCBlbnRpdHksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICogICAgICAgICBpZiAoZW50aXR5LnRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlZWtWYWx1ZSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICByZXN1bHRzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgICAqICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgICAgICAgKiAgICAgfSwgW10pO1xuICAgICAgICAgICAgICAgICAqIH1cbiAgICAgICAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBtYXRjaGVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICAgICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgICAgICAgICAgICAgIFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlYWhlYWQubW9kZS5TVEFSVFNfV0lUSCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFR5cGVhaGVhZC5tb2RlLkZVWlpZLFxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogaWYgYHRydWVgLCBjbGVhcnMgdGhlIGlucHV0IHRleHQgd2hlbiBhIChwYXJ0aWFsKSBtYXRjaCBpcyBzZWxlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXJPblNlbGVjdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFuIGFycmF5IG9mIG9iamVjdHMgdGhhdCB1c2VyIGlucHV0IGlzIGZpbHRlcmVkIGFnYWluc3Q7IGF0IGEgbWluaW11bSwgZWFjaCBvYmplY3QgbXVzdCBoYXZlIGEgYHRleHRgXG4gICAgICAgICAqIHByb3BlcnR5IGFuZCBhbnkgb3RoZXIgc3VwcGxpZWQgcHJvcGVydHkgaXMgcGFzc2VkIHRocm91Z2ggdG8gdGhlIHJlc3VsdGluZyBET00gZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgZW50aXRpZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiB0aGUgdGV4dCB0byBiZSB1c2VkIHRvIGRvIHN0cmluZyBjb21wYXJpc29uIGFuZCBtYXRjaCBhZ2FpbnN0XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVuZGVycyBhIGRpc2FibGVkIHRleHRmaWVsZCB3aXRoIHRoZSBmdWxsIHRleHQgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBpbnB1dCBoaW50OyB3aWxsIHJlbWFpbiBibGFua1xuICAgICAgICAgKiBpZiB0aGUgbWF0Y2hlZCBzdWJzdHJpbmcgaXMgbm90IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHVzZXIgaW5wdXRcbiAgICAgICAgICovXG4gICAgICAgIGhpbnQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgICAgIGhpbnRQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXVxuICAgICAgICAgICAgICogKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICBtYXRjaFdyYXBwZXJQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogYW55IFtSZWFjdC1zdXBwb3J0ZWQgYXR0cmlidXRlXVxuICAgICAgICAgICAgICogKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJyonOiBQcm9wVHlwZXMuYW55LFxuICAgICAgICB9KSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdGhlIFwib2Zmc2NyZWVuXCIgY2xhc3MgdXNlZCBieSB5b3VyIGFwcGxpY2F0aW9uOyBzcGVjaWZpY2FsbHkgdG8gcmV0YWluIFtBUklBIG5hdmlnYWJpbGl0eV1cbiAgICAgICAgICogKGh0dHA6Ly9zbm9vay5jYS9hcmNoaXZlcy9odG1sX2FuZF9jc3MvaGlkaW5nLWNvbnRlbnQtZm9yLWFjY2Vzc2liaWxpdHkpIGFzIGBkaXNwbGF5OiBub25lYCBleGNsdWRlcyB0aGVcbiAgICAgICAgICogZWxlbWVudCBmcm9tIGNvbnNpZGVyYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIG9mZnNjcmVlbkNsYXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiB0aGUgdXNlciBwcmVzc2VzIGBFbnRlcmAgd2l0aCBubyBhdXRvc3VnZ2VzdCBoaW50IGF2YWlsYWJsZSwgaW5kaWNhdGluZyB0aGF0IGlucHV0IGlzIGNvbXBsZXRlXG4gICAgICAgICAqL1xuICAgICAgICBvbkNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogY2FsbGVkIHdpdGggdGhlIGluZGV4IG9mIHRoZSBoaWdobGlnaHRlZCBlbnRpdHkgZHVlIHRvIGtleWJvYXJkIHNlbGVjdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgb25FbnRpdHlIaWdobGlnaHRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGNhbGxlZCB3aXRoIHRoZSBpbmRleCBvZiB0aGUgZW50aXR5IHNlbGVjdGVkIGJ5IHRoZSB1c2VyXG4gICAgICAgICAqL1xuICAgICAgICBvbkVudGl0eVNlbGVjdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICAuLi5JbnB1dC5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGFsZ29yaXRobTogVHlwZWFoZWFkLm1vZGUuRlVaWlksXG4gICAgICAgIGNsZWFyT25TZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICBlbnRpdGllczogW10sXG4gICAgICAgIGhpbnQ6IG51bGwsXG4gICAgICAgIGhpbnRQcm9wczoge30sXG4gICAgICAgIG1hdGNoV3JhcHBlclByb3BzOiB7fSxcbiAgICAgICAgb2Zmc2NyZWVuQ2xhc3M6ICdiLW9mZnNjcmVlbicsXG4gICAgICAgIG9uQ29tcGxldGU6IG5vb3AsXG4gICAgICAgIG9uRW50aXR5SGlnaGxpZ2h0ZWQ6IG5vb3AsXG4gICAgICAgIG9uRW50aXR5U2VsZWN0ZWQ6IG5vb3AsXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFR5cGVhaGVhZC5kZWZhdWx0UHJvcHMpXG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgZW50aXR5TWF0Y2hJbmRleGVzOiBbXSxcbiAgICAgICAgaWQ6IHV1aWQoKSxcbiAgICAgICAgaXNDb250cm9sbGVkOiBpc1N0cmluZyh0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpLFxuICAgICAgICBpbnB1dDogdGhpcy5wcm9wcy5pbnB1dFByb3BzLnZhbHVlXG4gICAgICAgICAgICAgICB8fCB0aGlzLnByb3BzLmlucHV0UHJvcHMuZGVmYXVsdFZhbHVlXG4gICAgICAgICAgICAgICB8fCAnJyxcbiAgICAgICAgc2VsZWN0ZWRFbnRpdHlJbmRleDogLTEsXG4gICAgfVxuXG4gICAgbW91bnRlZCA9IGZhbHNlXG5cbiAgICB1cGRhdGVJbnB1dFN0YXRlID0gKHZhbHVlID0gJycpID0+IHRoaXMuc2V0U3RhdGUoeyBpbnB1dDogdmFsdWUgfSlcblxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaW5wdXRQcm9wcy52YWx1ZSB8fCB0aGlzLnByb3BzLmlucHV0UHJvcHMuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVNYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25FbnRpdHlIaWdobGlnaHRlZCh0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5lbnRpdGllcyAhPT0gdGhpcy5wcm9wcy5lbnRpdGllcykge1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlTWF0Y2hlcyhuZXh0UHJvcHMuZW50aXRpZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRQcm9wcy5pbnB1dFByb3BzLnZhbHVlICE9PSB0aGlzLnByb3BzLmlucHV0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXRTdGF0ZShuZXh0UHJvcHMuaW5wdXRQcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVNYXRjaGVzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLmxlbmd0aCAmJiAhcHJldlN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMucmVmcy5tYXRjaGVzLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIH0gLy8gZml4IGFuIG9kZCBidWcgaW4gRkYgd2hlcmUgaXQgaW5pdGlhbGl6ZXMgdGhlIGVsZW1lbnQgd2l0aCBhbiBpbmNvcnJlY3Qgc2Nyb2xsVG9wXG5cbiAgICAgICAgaWYgKCAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCA+PSAwXG4gICAgICAgICAgICAmJiB0aGlzLnByb3BzLmVudGl0aWVzW3RoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF0gIT09IHByZXZQcm9wcy5lbnRpdGllc1twcmV2U3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25FbnRpdHlIaWdobGlnaHRlZCh0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGdldFNlbGVjdGVkRW50aXR5VGV4dCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5wcm9wcy5lbnRpdGllc1t0aGlzLnN0YXRlLnNlbGVjdGVkRW50aXR5SW5kZXhdO1xuXG4gICAgICAgIHJldHVybiBlbnRpdHkgPyBlbnRpdHkudGV4dCA6ICcnO1xuICAgIH1cblxuICAgIGhhbmRsZU1hdGNoQ2xpY2soaW5kZXgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkRW50aXR5SW5kZXg6IGluZGV4IH0sIHRoaXMuc2V0VmFsdWVXaXRoU2VsZWN0ZWRFbnRpdHkpO1xuICAgIH1cblxuICAgIHNlbGVjdE1hdGNoKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSB0aGlzLnN0YXRlLmVudGl0eU1hdGNoSW5kZXhlcztcbiAgICAgICAgY29uc3QgdG90YWxNYXRjaGVzID0gbWF0Y2hlcy5sZW5ndGg7XG4gICAgICAgIGxldCBuZXh0SW5kZXggPSBtYXRjaGVzLmluZGV4T2YodGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4KSArIGRlbHRhO1xuXG4gICAgICAgIGlmICh0b3RhbE1hdGNoZXMpIHtcbiAgICAgICAgICAgIGlmIChuZXh0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluZGV4ID0gdG90YWxNYXRjaGVzIC0gMTsgLy8gcmV2ZXJzZSBsb29wXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRJbmRleCA+PSB0b3RhbE1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSAwOyAvLyBsb29wXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG1hdGNoSW5kZXggPSBtYXRjaGVzW25leHRJbmRleF07XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzTm9kZSA9IHRoaXMucmVmcy5tYXRjaGVzO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlc05vZGVZRW5kID0gbWF0Y2hlc05vZGUuc2Nyb2xsVG9wICsgbWF0Y2hlc05vZGUuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hOb2RlID0gdGhpcy5yZWZzW2BtYXRjaF8kJHttYXRjaEluZGV4fWBdO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hOb2RlWVN0YXJ0ID0gbWF0Y2hOb2RlLm9mZnNldFRvcDtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoTm9kZVlFbmQgPSBtYXRjaE5vZGVZU3RhcnQgKyBtYXRjaE5vZGUuY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgICAgICAvLyBicmluZyBpbnRvIHZpZXcgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAobWF0Y2hOb2RlWUVuZCA+PSBtYXRjaGVzTm9kZVlFbmQpIHsgLy8gYmVsb3dcbiAgICAgICAgICAgICAgICBtYXRjaGVzTm9kZS5zY3JvbGxUb3AgKz0gbWF0Y2hOb2RlWUVuZCAtIG1hdGNoZXNOb2RlWUVuZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hOb2RlWVN0YXJ0IDw9IG1hdGNoZXNOb2RlLnNjcm9sbFRvcCkgeyAvLyBhYm92ZVxuICAgICAgICAgICAgICAgIG1hdGNoZXNOb2RlLnNjcm9sbFRvcCA9IG1hdGNoTm9kZVlTdGFydDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkRW50aXR5SW5kZXg6IG1hdGNoSW5kZXggfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldE1hdGNoZXMgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkRW50aXR5SW5kZXg6IC0xLFxuICAgICAgICAgICAgICAgIGVudGl0eU1hdGNoSW5kZXhlczogW10sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldElucHV0Tm9kZSA9ICgpID0+IHRoaXMucmVmcy5pbnB1dC5yZWZzLmZpZWxkXG5cbiAgICBzZWxlY3QgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5nZXRJbnB1dE5vZGUoKTtcblxuICAgICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IDA7XG4gICAgICAgIGlucHV0LnNlbGVjdGlvbkVuZCA9IHRoaXMuZ2V0VmFsdWUoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9jdXMgPSAoKSA9PiB0aGlzLmdldElucHV0Tm9kZSgpLmZvY3VzKClcbiAgICBnZXRWYWx1ZSA9ICgpID0+IHRoaXMucmVmcy5pbnB1dC5nZXRWYWx1ZSgpXG5cbiAgICBzZXRWYWx1ZSA9ICh2YWx1ZSA9ICcnKSA9PiB7XG4gICAgICAgIHRoaXMucmVmcy5pbnB1dC5zZXRWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVJbnB1dFN0YXRlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5yZXNldE1hdGNoZXMoKTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cblxuICAgIGN1cnNvckF0RW5kT2ZJbnB1dCgpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0SW5wdXROb2RlKCk7XG5cbiAgICAgICAgcmV0dXJuICAgIG5vZGUuc2VsZWN0aW9uU3RhcnQgPT09IG5vZGUuc2VsZWN0aW9uRW5kXG4gICAgICAgICAgICAgICAmJiBub2RlLnNlbGVjdGlvbkVuZCA9PT0gdGhpcy5nZXRWYWx1ZSgpLmxlbmd0aDtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZVdpdGhTZWxlY3RlZEVudGl0eSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkVudGl0eVNlbGVjdGVkKHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY2xlYXJPblNlbGVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbmVlZHMgdG8gaGFwcGVuIGFmdGVyIHRoZSB1cGNvbWluZyByZW5kZXIgdGhhdCB3aWxsIGJlIHRyaWdnZXJlZCBieSBgc2V0VmFsdWVgXG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMucmVzZXRNYXRjaGVzLCAwKTtcbiAgICB9XG5cbiAgICBtYXJrRnV6enlNYXRjaFN1YnN0cmluZyhpbnB1dCwgZW50aXR5KSB7XG4gICAgICAgIGNvbnN0IGVudGl0eUNvbnRlbnQgPSBlbnRpdHkudGV4dDtcbiAgICAgICAgY29uc3QgZnJhZ3MgPSBlbnRpdHlDb250ZW50LnNwbGl0KG5ldyBSZWdFeHAoJygnICsgZXNjYXBlcihpbnB1dCkgKyAnKScsICdpZycpKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFVzZXJUZXh0ID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgdGhyZXNob2xkID0gZnJhZ3MubGVuZ3RoO1xuICAgICAgICBsZXQgaSA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK2kgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGlmIChmcmFnc1tpXS50b0xvd2VyQ2FzZSgpID09PSBub3JtYWxpemVkVXNlclRleHQpIHtcbiAgICAgICAgICAgICAgICBmcmFnc1tpXSA9IDxtYXJrIGtleT17aX0gY2xhc3NOYW1lPSdiLXR5cGVhaGVhZC1tYXRjaC1oaWdobGlnaHQnPntmcmFnc1tpXX08L21hcms+O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZyYWdzO1xuICAgIH1cblxuICAgIG1hcmtTdGFydHNXaXRoTWF0Y2hTdWJzdHJpbmcoaW5wdXQsIGVudGl0eSkge1xuICAgICAgICBjb25zdCBlbnRpdHlDb250ZW50ID0gZW50aXR5LnRleHQ7XG4gICAgICAgIGNvbnN0IHNlZWtWYWx1ZSA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGluZGV4U3RhcnQgPSBlbnRpdHlDb250ZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWVrVmFsdWUpO1xuICAgICAgICBjb25zdCBpbmRleEVuZCA9IGluZGV4U3RhcnQgKyBzZWVrVmFsdWUubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICA8c3BhbiBrZXk9JzAnPntlbnRpdHlDb250ZW50LnNsaWNlKDAsIGluZGV4U3RhcnQpfTwvc3Bhbj4sXG4gICAgICAgICAgICA8bWFyayBrZXk9JzEnIGNsYXNzTmFtZT0nYi10eXBlYWhlYWQtbWF0Y2gtaGlnaGxpZ2h0Jz57ZW50aXR5Q29udGVudC5zbGljZShpbmRleFN0YXJ0LCBpbmRleEVuZCl9PC9tYXJrPixcbiAgICAgICAgICAgIDxzcGFuIGtleT0nMic+e2VudGl0eUNvbnRlbnQuc2xpY2UoaW5kZXhFbmQpfTwvc3Bhbj4sXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgZ2V0TWFya2luZ0Z1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaXNTdHJpbmcodGhpcy5wcm9wcy5hbGdvcml0aG0pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5hbGdvcml0aG0gPT09IFR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRIKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFya1N0YXJ0c1dpdGhNYXRjaFN1YnN0cmluZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFya0Z1enp5TWF0Y2hTdWJzdHJpbmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hcmtlcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmFsZ29yaXRobS5tYXJrZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy53YXJuZWRNYXJrZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53YXJuZWRNYXJrZXIgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUeXBlYWhlYWQ6IG5vIGBwcm9wcy5hbGdvcml0aG0ubWFya2VyYCB3YXMgcHJvdmlkZWQ7IGZhbGxpbmcgYmFjayB0byB0aGUgZGVmYXVsdCBtYXJraW5nIGFsZ29yaXRobSAoRlVaWlkpLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWFya0Z1enp5TWF0Y2hTdWJzdHJpbmc7XG4gICAgfVxuXG4gICAgbWFya01hdGNoU3Vic3RyaW5nID0gKC4uLmFyZ3MpID0+IHRoaXMuZ2V0TWFya2luZ0Z1bmN0aW9uKCkoLi4uYXJncylcblxuICAgIGdldEZ1enp5TWF0Y2hJbmRleGVzKHVzZXJUZXh0LCBlbnRpdGllcykge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkID0gdXNlclRleHQudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICByZXR1cm4gZW50aXRpZXMucmVkdWNlKGZ1bmN0aW9uIGZpbmRJbmRleGVzKHJlc3VsdCwgZW50aXR5LCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuICAgZW50aXR5LnRleHQudG9Mb3dlckNhc2UoKS5pbmRleE9mKG5vcm1hbGl6ZWQpICE9PSAtMVxuICAgICAgICAgICAgICAgICAgID8gKHJlc3VsdC5wdXNoKGluZGV4KSAmJiByZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgOiByZXN1bHQ7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICBnZXRTdGFydHNXaXRoTWF0Y2hJbmRleGVzKHVzZXJUZXh0LCBlbnRpdGllcykge1xuICAgICAgICBjb25zdCBzZWVrVmFsdWUgPSB1c2VyVGV4dC50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHJldHVybiBlbnRpdGllcy5yZWR1Y2UoZnVuY3Rpb24gc2Vla01hdGNoKHJlc3VsdHMsIGVudGl0eSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChlbnRpdHkudGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2Vla1ZhbHVlKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChpbmRleCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuXG4gICAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICBnZXRNYXRjaGluZ0Z1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaXNTdHJpbmcodGhpcy5wcm9wcy5hbGdvcml0aG0pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5hbGdvcml0aG0gPT09IFR5cGVhaGVhZC5tb2RlLlNUQVJUU19XSVRIKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhcnRzV2l0aE1hdGNoSW5kZXhlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnV6enlNYXRjaEluZGV4ZXM7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMuYWxnb3JpdGhtLm1hdGNoZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5hbGdvcml0aG0ubWF0Y2hlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndhcm5lZE1hdGNoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53YXJuZWRNYXRjaGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignVHlwZWFoZWFkOiBubyBgcHJvcHMuYWxnb3JpdGhtLm1hdGNoZXJgIHdhcyBwcm92aWRlZDsgZmFsbGluZyBiYWNrIHRvIHRoZSBkZWZhdWx0IG1hdGNoaW5nIGFsZ29yaXRobSAoRlVaWlkpLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnV6enlNYXRjaEluZGV4ZXM7XG4gICAgfVxuXG4gICAgZ2V0TWF0Y2hJbmRleGVzID0gKC4uLmFyZ3MpID0+IHRoaXMuZ2V0TWF0Y2hpbmdGdW5jdGlvbigpKC4uLmFyZ3MpXG5cbiAgICBjb21wdXRlTWF0Y2hlcyhwcm92aWRlZEVudGl0aWVzKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlLCBwcm9wcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW50aXRpZXMgPSBwcm92aWRlZEVudGl0aWVzIHx8IHByb3BzLmVudGl0aWVzO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gc3RhdGUuaW5wdXQ7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gY3VycmVudFZhbHVlID09PSAnJyA/IFtdIDogdGhpcy5nZXRNYXRjaEluZGV4ZXMoY3VycmVudFZhbHVlLCBlbnRpdGllcyk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRFbnRpdHlJbmRleDogbWF0Y2hlcy5sZW5ndGggPyBtYXRjaGVzWzBdIDogLTEsXG4gICAgICAgICAgICAgICAgZW50aXR5TWF0Y2hJbmRleGVzOiBtYXRjaGVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzQ29udHJvbGxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSW5wdXRTdGF0ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlTWF0Y2hlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5pbnB1dFByb3BzLm9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUtleURvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuc2VsZWN0aW9uU3RhcnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgICAgaWYgKCAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCAhPT0gLTFcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmN1cnNvckF0RW5kT2ZJbnB1dCgpXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5nZXRJbnB1dE5vZGUoKSA9PT0gZXZlbnQudGFyZ2V0XG4gICAgICAgICAgICAgICAgJiYgIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlV2l0aFNlbGVjdGVkRW50aXR5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gYmxvY2sgY3Vyc29yIG1vdmVtZW50XG4gICAgICAgICAgICB0aGlzLnNlbGVjdE1hdGNoKC0xKTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBibG9jayBjdXJzb3IgbW92ZW1lbnRcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0TWF0Y2goMSk7XG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgICAgaWYgKCAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRFbnRpdHlJbmRleCAhPT0gLTFcbiAgICAgICAgICAgICAgICAmJiB0aGlzLmdldElucHV0Tm9kZSgpID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICBpZiAoICAgdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ICE9PSAtMVxuICAgICAgICAgICAgICAgICYmIHRoaXMuZ2V0SW5wdXROb2RlKCkgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZVdpdGhTZWxlY3RlZEVudGl0eSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ29tcGxldGUodGhpcy5zdGF0ZS5pbnB1dCwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMucHJvcHMub25LZXlEb3duKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyTm90aWZpY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHJlZj0nYXJpYSdcbiAgICAgICAgICAgICAgICBpZD17dGhpcy5zdGF0ZS5pZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMub2Zmc2NyZWVuQ2xhc3N9XG4gICAgICAgICAgICAgICAgYXJpYS1saXZlPSdwb2xpdGUnXG4gICAgICAgICAgICAgICAgcm9sZT0nc3RhdHVzJz5cbiAgICAgICAgICAgICAgICB7dGhpcy5nZXRTZWxlY3RlZEVudGl0eVRleHQoKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJlbmRlckhpbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhpbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJUZXh0ID0gdGhpcy5zdGF0ZS5pbnB1dDtcbiAgICAgICAgICAgIGNvbnN0IHJhdyA9IHRoaXMuZ2V0U2VsZWN0ZWRFbnRpdHlUZXh0KCk7XG4gICAgICAgICAgICBsZXQgcHJvY2Vzc2VkID0gJyc7XG5cbiAgICAgICAgICAgIGlmICggICByYXdcbiAgICAgICAgICAgICAgICAmJiByYXcudG9Mb3dlckNhc2UoKS5pbmRleE9mKHVzZXJUZXh0LnRvTG93ZXJDYXNlKCkpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkID0gcmF3LnJlcGxhY2UobmV3IFJlZ0V4cCh1c2VyVGV4dCwgJ2knKSwgdXNlclRleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHMuaGludFByb3BzfVxuICAgICAgICAgICAgICAgICAgICByZWY9J2hpbnQnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goXG4gICAgICAgICAgICAgICAgICAgICAgICAnYi1pbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnYi1pbnB1dC1wbGFjZWhvbGRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnYi10eXBlYWhlYWQtaGludCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhpbnRQcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PSctMSc+XG4gICAgICAgICAgICAgICAgICAgIHtwcm9jZXNzZWR9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyTWF0Y2hlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzLm1hdGNoV3JhcHBlclByb3BzO1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgICAgICAgICByZWY9J21hdGNoZXMnXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItdHlwZWFoZWFkLW1hdGNoLXdyYXBwZXInLCBwcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgICAgICByb2xlPSdsaXN0Ym94Jz5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuZW50aXR5TWF0Y2hJbmRleGVzLm1hcCgoaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMucHJvcHMuZW50aXRpZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBjbGFzc05hbWUsIHRleHQsIC4uLnJlc3QgfSA9IGVudGl0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxpbmcgdGhlIGZvY3VzIGFuZCBjbGljayBzdGF0ZXMgZWxzZXdoZXJlLCBzbyB0aGUgYTExeSBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFyZSBub3QgcmVsZXZhbnQgaW4gdGhpcyBjYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e2BtYXRjaF8kJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2N4KCdiLXR5cGVhaGVhZC1tYXRjaCcsIGNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ItdHlwZWFoZWFkLW1hdGNoLXNlbGVjdGVkJzogdGhpcy5zdGF0ZS5zZWxlY3RlZEVudGl0eUluZGV4ID09PSBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17dGV4dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVNYXRjaENsaWNrLmJpbmQodGhpcywgaW5kZXgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSdvcHRpb24nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5tYXJrTWF0Y2hTdWJzdHJpbmcodGhpcy5zdGF0ZS5pbnB1dCwgZW50aXR5KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBwcm9wcywgc3RhdGUgfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICB7Li4ub21pdChwcm9wcywgVHlwZWFoZWFkLmludGVybmFsS2V5cyl9XG4gICAgICAgICAgICAgICAgcmVmPSd3cmFwcGVyJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2ItdHlwZWFoZWFkLXdyYXBwZXInLCBwcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVLZXlEb3dufT5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJOb3RpZmljYXRpb24oKX1cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJIaW50KCl9XG5cbiAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgey4uLmV4dHJhY3RDaGlsZFByb3BzKHByb3BzLCBJbnB1dC5kZWZhdWx0UHJvcHMpfVxuICAgICAgICAgICAgICAgICAgICByZWY9J2lucHV0J1xuICAgICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPXtzdGF0ZS5pZH1cbiAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY3goJ2ItdHlwZWFoZWFkJywgcHJvcHMuaW5wdXRQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICB9fSAvPlxuXG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTWF0Y2hlcygpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXR5cGVhaGVhZC9pbmRleC5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIG1hdGNoT3BlcmF0b3JzUmUgPSAvW3xcXFxce30oKVtcXF1eJCsqPy5dL2c7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cikge1xuXHRpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIHN0cmluZycpO1xuXHR9XG5cblx0cmV0dXJuIHN0ci5yZXBsYWNlKG1hdGNoT3BlcmF0b3JzUmUsICdcXFxcJCYnKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtdHlwZWFoZWFkL34vZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb24ob2JqMSwgb2JqMikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmoyKS5yZWR1Y2UoKGNoaWxkUHJvcHMsIGtleSkgPT4ge1xuICAgICAgICBpZiAoa2V5IGluIG9iajEpIHtcbiAgICAgICAgICAgIGNoaWxkUHJvcHNba2V5XSA9IG9iajFba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzO1xuXG4gICAgfSwge30pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGFja2FnZXMvYm91bmRsZXNzLXV0aWxzLW9iamVjdC1pbnRlcnNlY3Rpb24vaW5kZXguanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbWl0S2V5c0Zyb21Tb3VyY2VPYmplY3Qoc291cmNlLCBvbWl0dGVkS2V5cyA9IFtdKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIHJlbG9jYXRlQWNjZXB0ZWRLZXlzKGhhc2gsIGtleSkge1xuICAgICAgICBpZiAob21pdHRlZEtleXMuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgaGFzaFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9LCB7fSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzL2luZGV4LmpzIiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGRldGVjdFRyYW5zZm9ybVByb3BlcnR5KCkge1xuICAgIGNvbnN0IHByb3BzID0gW1xuICAgICAgICAndHJhbnNmb3JtJyxcbiAgICAgICAgJ1dlYmtpdFRyYW5zZm9ybScsXG4gICAgICAgICdNb3pUcmFuc2Zvcm0nLFxuICAgICAgICAnT1RyYW5zZm9ybScsXG4gICAgICAgICdtc1RyYW5zZm9ybScsXG4gICAgICAgICd3ZWJraXQtdHJhbnNmb3JtJyxcbiAgICBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHByb3BzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9wc1tpXSBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3MtdXRpbHMtdHJhbnNmb3JtLXByb3BlcnR5L2luZGV4LmpzIiwiLyoqXG4gKiBCYXNlZCBvbiBbdGhpcyBhbGdvcml0aG1dKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2plZC85ODI4ODMpLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1dWlkKCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgcmV0dXJuICdiLScgKyAoWzFlN10rLTFlMystNGUzKy04ZTMrLTFlMTEpLnJlcGxhY2UoL1swMThdL2csYT0+KGFeTWF0aC5yYW5kb20oKSoxNj4+YS80KS50b1N0cmluZygxNikpO1xuICAgIC8qIGVzbGludC1lbmFibGUgKi9cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy11dWlkL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJhbWRcIjpcInJlYWN0XCIsXCJjb21tb25qczJcIjpcInJlYWN0XCIsXCJyb290XCI6XCJSZWFjdFwifVxuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcImFtZFwiOlwicmVhY3QtZG9tXCIsXCJjb21tb25qczJcIjpcInJlYWN0LWRvbVwiLFwicm9vdFwiOlwiUmVhY3RET01cIn1cbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==