module.exports=function(t){function e(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var r={};return e.m=t,e.c=r,e.i=function(t){return t},e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=9)}([function(t,e,r){"function"==typeof Symbol&&Symbol.iterator;t.exports=r(7)()},function(t,e){t.exports=require("boundless-utils-omit-keys")},function(t,e){t.exports=require("boundless-utils-uuid")},function(t,e){t.exports=require("classnames")},function(t,e){t.exports=require("react")},function(t,e,r){"use strict";function n(t){return function(){return t}}var o=function(){};o.thatReturns=n,o.thatReturnsFalse=n(!1),o.thatReturnsTrue=n(!0),o.thatReturnsNull=n(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(t){return t},t.exports=o},function(t,e,r){"use strict";function n(t,e,r,n,s,a,i,u){if(o(e),!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,n,s,a,i,u],p=0;c=new Error(e.replace(/%s/g,function(){return l[p++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var o=function(t){};t.exports=n},function(t,e,r){"use strict";var n=r(5),o=r(6),s=r(8);t.exports=function(){function t(t,e,r,n,a,i){i!==s&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function e(){return t}t.isRequired=t;var r={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e};return r.checkPropTypes=n,r.PropTypes=r,r}},function(t,e,r){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var a=r(0),i=r.n(a),u=r(4),c=(r.n(u),r(3)),l=r.n(c),p=r(1),f=r.n(p),h=r(2),d=r.n(h),y=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},m=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),b=function(t){function e(){var t,r,s,a;n(this,e);for(var i=arguments.length,u=Array(i),c=0;c<i;c++)u[c]=arguments[c];return r=s=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(u))),s.state={status:e.status.LOADING},a=r,o(s,a)}return s(e,t),m(e,[{key:"componentWillReceiveProps",value:function(t){t.src!==this.props.src&&(this.resetPreloader(),this.setState({status:e.status.LOADING}))}},{key:"componentDidMount",value:function(){this.preload()}},{key:"componentDidUpdate",value:function(){this.preload()}},{key:"componentWillUnmount",value:function(){this.resetPreloader()}},{key:"resetPreloader",value:function(){this.loader.onload=null,this.loader.onerror=null,this.loader=null}},{key:"preload",value:function(){var t=this;this.loader||(this.loader=document.createElement("img"),this.loader.onload=function(){return t.setState({status:e.status.LOADED})},this.loader.onerror=function(){return t.setState({status:e.status.ERROR})},this.loader.src=this.props.src)}},{key:"render",value:function(){return r.i(u.createElement)(this.props.component,y({},f()(this.props,e.internalKeys),{className:l()("b-image",this.props.className,{"b-image-loading":this.state.status===e.status.LOADING,"b-image-loaded":this.state.status===e.status.LOADED,"b-image-error":this.state.status===e.status.ERROR}),title:this.props.alt,role:"img",style:y({},this.props.style,{backgroundImage:"url("+this.props.src+")"})}),"Â ")}}]),e}(u.PureComponent);b.status={LOADING:d()(),LOADED:d()(),ERROR:d()()},b.propTypes={"*":i.a.any,alt:i.a.string,component:i.a.string,src:i.a.string.isRequired},b.defaultProps={alt:"",component:"div",src:"about:blank"},b.internalKeys=Object.keys(b.defaultProps),e.default=b}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,