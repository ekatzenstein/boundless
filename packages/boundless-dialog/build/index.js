module.exports=function(e){function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}var t={};return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=9)}([function(e,n,t){"function"==typeof Symbol&&Symbol.iterator;e.exports=t(7)()},function(e,n){e.exports=require("boundless-portal")},function(e,n){e.exports=require("boundless-utils-omit-keys")},function(e,n){e.exports=require("classnames")},function(e,n){e.exports=require("react")},function(e,n,t){"use strict";function o(e){return function(){return e}}var r=function(){};r.thatReturns=o,r.thatReturnsFalse=o(!1),r.thatReturnsTrue=o(!0),r.thatReturnsNull=o(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,n,t){"use strict";function o(e,n,t,o,i,s,a,l){if(r(n),!e){var u;if(void 0===n)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[t,o,i,s,a,l],p=0;u=new Error(n.replace(/%s/g,function(){return c[p++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}var r=function(e){};e.exports=o},function(e,n,t){"use strict";var o=t(5),r=t(6),i=t(8);e.exports=function(){function e(e,n,t,o,s,a){a!==i&&r(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function n(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n};return t.checkPropTypes=o,t.PropTypes=t,t}},function(e,n,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,n,t){"use strict";function o(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function r(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function i(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0});var s=t(0),a=t.n(s),l=t(4),u=(t.n(l),t(3)),c=t.n(u),p=t(1),d=t.n(p),f=t(2),h=t.n(f),O=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},y=function(){function e(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(n,t,o){return t&&e(n.prototype,t),o&&e(n,o),n}}(),m=function(e){return"function"==typeof e},v=function(){},w=Array.prototype.slice,g=function(e){function n(){var e,t,i,s;o(this,n);for(var a=arguments.length,l=Array(a),u=0;u<a;u++)l[u]=arguments[u];return t=i=r(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(l))),i.mounted=!1,i.handleFocus=function(e){if(i.props.captureFocus){var n=e.explicitOriginalTarget||e.relatedTarget;i.isPartOfDialog(n)&&!i.isPartOfDialog(e.target)&&(e.preventDefault(),n.focus())}else if(i.shouldDialogCloseOnEvent("closeOnOutsideFocus",e)&&!i.isPartOfDialog(e.target))return window.setTimeout(i.props.onClose,0)},i.handleKeyDown=function(e){"Escape"===e.key&&i.shouldDialogCloseOnEvent("closeOnEscKey",e)&&window.setTimeout(i.props.onClose,0),i.props.onKeyDown&&i.props.onKeyDown(e)},i.handleInsideClick=function(e){i.shouldDialogCloseOnEvent("closeOnInsideClick",e)&&window.setTimeout(i.props.onClose,0)},i.handleOutsideClick=function(e){i.shouldDialogCloseOnEvent("closeOnOutsideClick",e)&&!i.isPartOfDialog(e.target)&&window.setTimeout(i.props.onClose,0)},i.handleOutsideScrollWheel=function(e){i.shouldDialogCloseOnEvent("closeOnOutsideScroll",e)&&!i.isPartOfDialog(e.target)&&window.setTimeout(i.props.onClose,0)},s=t,r(i,s)}return i(n,e),y(n,[{key:"isPartOfDialog",value:function(e){if(!e||e===window)return!1;var n=[this.$wrapper].concat(w.call(this.$wrapper.querySelectorAll("["+d.a.PORTAL_DATA_ATTRIBUTE+"]")).map(function(e){return document.getElementById(e.getAttribute(d.a.PORTAL_DATA_ATTRIBUTE))})),t=e.nodeType!==Node.ELEMENT_NODE?e.parentNode:e;return n.some(function(e){return e.contains(t)})}},{key:"componentDidMount",value:function(){window.addEventListener("click",this.handleOutsideClick,!0),window.addEventListener("contextmenu",this.handleOutsideClick,!0),window.addEventListener("focus",this.handleFocus,!0),window.addEventListener("scroll",this.handleOutsideScrollWheel,!0),window.addEventListener("wheel",this.handleOutsideScrollWheel,!0),this.props.captureFocus&&!this.isPartOfDialog(document.activeElement)&&this.$dialog.focus()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("click",this.handleOutsideClick,!0),window.removeEventListener("contextmenu",this.handleOutsideClick,!0),window.removeEventListener("focus",this.handleFocus,!0),window.removeEventListener("scroll",this.handleOutsideScrollWheel,!0),window.removeEventListener("wheel",this.handleOutsideScrollWheel,!0)}},{key:"shouldDialogCloseOnEvent",value:function(e,n){return m(this.props[e])?this.props[e](n):this.props[e]}},{key:"renderFocusBoundary",value:function(){if(this.props.captureFocus)return t.i(l.createElement)("div",{className:"b-offscreen",tabIndex:"0","aria-hidden":"true"},"Â ")}},{key:"render",value:function(){var e=this;return t.i(l.createElement)(this.props.component,O({},h()(this.props,n.internalKeys),{ref:function(n){return e.$wrapper=n},className:c()("b-dialog-wrapper",this.props.className)}),this.renderFocusBoundary(),this.props.before,t.i(l.createElement)(this.props.dialogComponent,O({},this.dialogProps,{ref:function(n){return e.$dialog=n},className:c()("b-dialog",this.props.dialogProps.className),onClick:this.handleInsideClick,onKeyDown:this.handleKeyDown,role:this.props.captureFocus?"alertdialog":"dialog",tabIndex:"0"}),this.props.children),this.props.after,this.renderFocusBoundary())}}]),n}(l.PureComponent);g.propTypes={"*":a.a.any,after:a.a.node,before:a.a.node,captureFocus:a.a.bool,closeOnEscKey:a.a.oneOfType([a.a.bool,a.a.func]),closeOnInsideClick:a.a.oneOfType([a.a.bool,a.a.func]),closeOnOutsideClick:a.a.oneOfType([a.a.bool,a.a.func]),closeOnOutsideFocus:a.a.oneOfType([a.a.bool,a.a.func]),closeOnOutsideScroll:a.a.oneOfType([a.a.bool,a.a.func]),component:a.a.string,dialogComponent:a.a.string,dialogProps:a.a.shape({"*":a.a.any}),onClose:a.a.func},g.defaultProps={after:null,before:null,captureFocus:!0,children:null,closeOnEscKey:!1,closeOnInsideClick:!1,closeOnOutsideClick:!1,closeOnOutsideFocus:!1,closeOnOutsideScroll:!1,component:"div",dialogComponent:"div",dialogProps:{},onClose:v,onKeyDown:v},g.internalKeys=Object.keys(g.defaultProps),n.default=g}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,