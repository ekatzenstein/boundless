module.exports=function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=12)}([function(e,t,n){"function"==typeof Symbol&&Symbol.iterator;e.exports=n(10)()},function(e,t){e.exports=require("boundless-input")},function(e,t){e.exports=require("boundless-utils-object-intersection")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-uuid")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("escape-string-regexp")},function(e,t){e.exports=require("react")},function(e,t,n){"use strict";function r(e){return function(){return e}}var i=function(){};i.thatReturns=r,i.thatReturnsFalse=r(!1),i.thatReturnsTrue=r(!0),i.thatReturnsNull=r(null),i.thatReturnsThis=function(){return this},i.thatReturnsArgument=function(e){return e},e.exports=i},function(e,t,n){"use strict";function r(e,t,n,r,a,s,o,c){if(i(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[n,r,a,s,o,c],l=0;u=new Error(t.replace(/%s/g,function(){return p[l++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}var i=function(e){};e.exports=r},function(e,t,n){"use strict";var r=n(8),i=n(9),a=n(11);e.exports=function(){function e(e,t,n,r,s,o){o!==a&&i(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function r(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),c=n.n(o),u=n(7),p=(n.n(u),n(5)),l=n.n(p),h=n(6),f=n.n(h),d=n(1),y=n.n(d),m=n(2),g=n.n(m),v=n(3),x=n.n(v),b=n(4),E=n.n(b),k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},I=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),S=function(e){return"function"==typeof e},w=function(e){return"string"==typeof e},M=function(){},T=function(e){function t(){var e,n,r,s;i(this,t);for(var o=arguments.length,c=Array(o),u=0;u<o;u++)c[u]=arguments[u];return n=r=a(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),O.call(r),s=n,a(r,s)}return s(t,e),I(t,[{key:"componentWillMount",value:function(){(this.props.inputProps.value||this.props.inputProps.defaultValue)&&this.computeMatches()}},{key:"componentDidMount",value:function(){this.mounted=!0,this.state.selectedEntityIndex>=0&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillReceiveProps",value:function(e){e.entities!==this.props.entities&&this.computeMatches(e.entities),e.inputProps.value!==this.props.inputProps.value&&(this.updateInputState(e.inputProps.value),this.computeMatches())}},{key:"componentDidUpdate",value:function(e,t){this.state.entityMatchIndexes.length&&!t.entityMatchIndexes.length&&(this.refs.matches.scrollTop=0),this.state.selectedEntityIndex>=0&&this.props.entities[this.state.selectedEntityIndex]!==e.entities[t.selectedEntityIndex]&&this.props.onEntityHighlighted(this.state.selectedEntityIndex)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"handleMatchClick",value:function(e){this.setState({selectedEntityIndex:e},this.setValueWithSelectedEntity)}},{key:"selectMatch",value:function(e){var t=this.state.entityMatchIndexes,n=t.length,r=t.indexOf(this.state.selectedEntityIndex)+e;if(n){r<0?r=n-1:r>=n&&(r=0);var i=t[r],a=this.refs.matches,s=a.scrollTop+a.clientHeight,o=this.refs["match_$"+i],c=o.offsetTop,u=c+o.clientHeight;u>=s?a.scrollTop+=u-s:c<=a.scrollTop&&(a.scrollTop=c),this.setState({selectedEntityIndex:i})}}},{key:"cursorAtEndOfInput",value:function(){var e=this.getInputNode();return e.selectionStart===e.selectionEnd&&e.selectionEnd===this.getValue().length}},{key:"markFuzzyMatchSubstring",value:function(e,t){for(var r=t.text,i=r.split(new RegExp("("+f()(e)+")","ig")),a=e.toLowerCase(),s=i.length,o=-1;++o<s;)i[o].toLowerCase()===a&&(i[o]=n.i(u.createElement)("mark",{key:o,className:"b-typeahead-match-highlight"},i[o]));return i}},{key:"markStartsWithMatchSubstring",value:function(e,t){var r=t.text,i=e.toLowerCase(),a=r.toLowerCase().indexOf(i),s=a+i.length;return[n.i(u.createElement)("span",{key:"0"},r.slice(0,a)),n.i(u.createElement)("mark",{key:"1",className:"b-typeahead-match-highlight"},r.slice(a,s)),n.i(u.createElement)("span",{key:"2"},r.slice(s))]}},{key:"getMarkingFunction",value:function(){return w(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.markStartsWithMatchSubstring:this.markFuzzyMatchSubstring:S(this.props.algorithm.marker)?this.props.algorithm.marker:(void 0===this.warnedMarker&&(this.warnedMarker=!0,console.warn("Typeahead: no `props.algorithm.marker` was provided; falling back to the default marking algorithm (FUZZY).")),this.markFuzzyMatchSubstring)}},{key:"getFuzzyMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return-1!==t.text.toLowerCase().indexOf(n)?e.push(r)&&e:e},[])}},{key:"getStartsWithMatchIndexes",value:function(e,t){var n=e.toLowerCase();return t.reduce(function(e,t,r){return 0===t.text.toLowerCase().indexOf(n)&&e.push(r),e},[])}},{key:"getMatchingFunction",value:function(){return w(this.props.algorithm)?this.props.algorithm===t.mode.STARTS_WITH?this.getStartsWithMatchIndexes:this.getFuzzyMatchIndexes:S(this.props.algorithm.matcher)?this.props.algorithm.matcher:(void 0===this.warnedMatcher&&(this.warnedMatcher=!0,console.warn("Typeahead: no `props.algorithm.matcher` was provided; falling back to the default matching algorithm (FUZZY).")),this.getFuzzyMatchIndexes)}},{key:"computeMatches",value:function(e){var t=this;this.setState(function(n,r){var i=e||r.entities,a=n.input,s=""===a?[]:t.getMatchIndexes(a,i);return{selectedEntityIndex:s.length?s[0]:-1,entityMatchIndexes:s}})}},{key:"renderNotification",value:function(){return n.i(u.createElement)("div",{ref:"aria",id:this.state.id,className:this.props.offscreenClass,"aria-live":"polite",role:"status"},this.getSelectedEntityText())}},{key:"renderHint",value:function(){if(this.props.hint){var e=this.state.input,t=this.getSelectedEntityText(),r="";return t&&0===t.toLowerCase().indexOf(e.toLowerCase())&&(r=t.replace(new RegExp(e,"i"),e)),n.i(u.createElement)("div",k({},this.props.hintProps,{ref:"hint",className:l()("b-input","b-input-placeholder","b-typeahead-hint",this.props.hintProps.className),tabIndex:"-1"}),r)}}},{key:"renderMatches",value:function(){var e=this;if(this.state.entityMatchIndexes.length){var t=this.props.matchWrapperProps;return n.i(u.createElement)("div",k({},t,{ref:"matches",className:l()("b-typeahead-match-wrapper",t.className),role:"listbox"}),this.state.entityMatchIndexes.map(function(t){var i=e.props.entities[t],a=i.className,s=i.text,o=r(i,["className","text"]);return n.i(u.createElement)("div",k({},o,{ref:"match_$"+t,className:l()("b-typeahead-match",a,{"b-typeahead-match-selected":e.state.selectedEntityIndex===t}),key:s,onClick:e.handleMatchClick.bind(e,t),role:"option"}),e.markMatchSubstring(e.state.input,i))}))}}},{key:"render",value:function(){var e=this.props,r=this.state;return n.i(u.createElement)("div",k({},x()(e,t.internalKeys),{ref:"wrapper",className:l()("b-typeahead-wrapper",e.className),onKeyDown:this.handleKeyDown}),this.renderNotification(),this.renderHint(),n.i(u.createElement)(y.a,k({},g()(e,y.a.defaultProps),{ref:"input","aria-controls":r.id,inputProps:k({},e.inputProps,{className:l()("b-typeahead",e.inputProps.className),onChange:this.handleChange})})),this.renderMatches())}}]),t}(u.PureComponent);T.mode={STARTS_WITH:E()(),FUZZY:E()()},T.propTypes=k({},y.a.propTypes,{algorithm:c.a.oneOfType([c.a.oneOf([T.mode.STARTS_WITH,T.mode.FUZZY]),c.a.shape({marker:c.a.oneOfType([c.a.func,c.a.oneOf([T.mode.STARTS_WITH,T.mode.FUZZY])]),matcher:c.a.oneOfType([c.a.func,c.a.oneOf([T.mode.STARTS_WITH,T.mode.FUZZY])])})]),clearOnSelection:c.a.bool,entities:c.a.arrayOf(c.a.shape({text:c.a.string.isRequired})),hint:c.a.bool,hintProps:c.a.shape({"*":c.a.any}),matchWrapperProps:c.a.shape({"*":c.a.any}),offscreenClass:c.a.string,onComplete:c.a.func,onEntityHighlighted:c.a.func,onEntitySelected:c.a.func}),T.defaultProps=k({},y.a.defaultProps,{algorithm:T.mode.FUZZY,clearOnSelection:!1,entities:[],hint:null,hintProps:{},matchWrapperProps:{},offscreenClass:"b-offscreen",onComplete:M,onEntityHighlighted:M,onEntitySelected:M}),T.internalKeys=Object.keys(T.defaultProps);var O=function(){var e=this;this.state={entityMatchIndexes:[],id:E()(),isControlled:w(this.props.inputProps.value),input:this.props.inputProps.value||this.props.inputProps.defaultValue||"",selectedEntityIndex:-1},this.mounted=!1,this.updateInputState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e.setState({input:t})},this.getSelectedEntityText=function(){var t=e.props.entities[e.state.selectedEntityIndex];return t?t.text:""},this.resetMatches=function(){e.mounted&&e.setState({selectedEntityIndex:-1,entityMatchIndexes:[]})},this.getInputNode=function(){return e.refs.input.refs.field},this.select=function(){var t=e.getInputNode();t.selectionStart=0,t.selectionEnd=e.getValue().length},this.focus=function(){return e.getInputNode().focus()},this.getValue=function(){return e.refs.input.getValue()},this.setValue=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";e.refs.input.setValue(t),e.updateInputState(t),e.resetMatches(),e.focus()},this.setValueWithSelectedEntity=function(){e.props.onEntitySelected(e.state.selectedEntityIndex),e.props.clearOnSelection?e.setValue(""):e.setValue(e.getSelectedEntityText()),window.setTimeout(e.resetMatches,0)},this.markMatchSubstring=function(){return e.getMarkingFunction().apply(void 0,arguments)},this.getMatchIndexes=function(){return e.getMatchingFunction().apply(void 0,arguments)},this.handleChange=function(t){!1===e.state.isControlled&&(e.updateInputState(t.target.value),e.computeMatches()),S(e.props.inputProps.onChange)&&e.props.inputProps.onChange(t)},this.handleKeyDown=function(t){switch(t.key){case"ArrowLeft":t.target.selectionStart>1&&t.stopPropagation();break;case"Tab":case"ArrowRight":-1!==e.state.selectedEntityIndex&&e.cursorAtEndOfInput()&&e.getInputNode()===t.target&&!t.shiftKey&&(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity());break;case"ArrowUp":t.nativeEvent.preventDefault(),e.selectMatch(-1),e.focus();break;case"ArrowDown":t.nativeEvent.preventDefault(),e.selectMatch(1),e.focus();break;case"Escape":-1!==e.state.selectedEntityIndex&&e.getInputNode()===t.target&&e.resetMatches();break;case"Enter":-1!==e.state.selectedEntityIndex&&e.getInputNode()===t.target?(t.nativeEvent.preventDefault(),e.setValueWithSelectedEntity()):e.props.onComplete(e.state.input,t)}S(e.props.onKeyDown)&&e.props.onKeyDown(t)}};t.default=T}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,