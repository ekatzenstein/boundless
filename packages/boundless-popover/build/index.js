module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=12)}([function(e,t,n){"function"==typeof Symbol&&Symbol.iterator;e.exports=n(10)()},function(e,t){e.exports=require("boundless-dialog")},function(e,t){e.exports=require("boundless-portal")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-transform-property")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-dom")},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";function r(e,t,n,r,i,a,c,s){if(o(t),!e){var p;if(void 0===t)p=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var h=[n,r,i,a,c,s],l=0;p=new Error(t.replace(/%s/g,function(){return h[l++]})),p.name="Invariant Violation"}throw p.framesToPop=1,p}}var o=function(e){};e.exports=r},function(e,t,n){"use strict";var r=n(8),o=n(9),i=n(11);e.exports=function(){function e(e,t,n,r,a,c){c!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e){switch(e[0]){case"N":return"S";case"S":return"N";case"E":return"W"}return"E"}Object.defineProperty(t,"__esModule",{value:!0});var c=n(0),s=n.n(c),p=n(6),h=(n.n(p),n(7)),l=(n.n(h),n(5)),u=n.n(l),d=n(1),f=n.n(d),y=n(2),g=n.n(y),m=n(3),x=n.n(m),v=n(4),w=n.n(v),b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},R=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=/\s?b-popover-(anchor|self)-(start|middle|end)/g,O=n.i(p.createElement)("svg",{viewBox:"0 0 14 9.5",xmlns:"http://www.w3.org/2000/svg"},n.i(p.createElement)("g",null,n.i(p.createElement)("polygon",{className:"b-popover-caret-border",fill:"#000",points:"7 0 14 10 0 10"}),n.i(p.createElement)("polygon",{className:"b-popover-caret-fill",fill:"#FFF",points:"6.98230444 1.75 12.75 10 1.25 10"}))),N=[{name:"NNW",ax:0,ay:0,dx:0,dy:2},{name:"N",ax:1,ay:0,dx:1,dy:2},{name:"NNE",ax:2,ay:0,dx:2,dy:2},{name:"ENE",ax:2,ay:0,dx:0,dy:0},{name:"E",ax:2,ay:1,dx:0,dy:1},{name:"ESE",ax:2,ay:2,dx:0,dy:2},{name:"SSE",ax:2,ay:2,dx:2,dy:0},{name:"S",ax:1,ay:2,dx:1,dy:0},{name:"SSW",ax:0,ay:2,dx:0,dy:0},{name:"WSW",ax:0,ay:2,dx:2,dy:2},{name:"W",ax:0,ay:1,dx:2,dy:1},{name:"WNW",ax:0,ay:0,dx:2,dy:0}],W=function(e){function t(){var e,i,a,c;r(this,t);for(var s=arguments.length,p=Array(s),l=0;l<s;l++)p[l]=arguments[l];return i=a=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(p))),a.align=function(){var e=n.i(h.findDOMNode)(a.props.anchor),r=a.props.caretAnchor?n.i(h.findDOMNode)(a.props.caretAnchor):e;a.cacheViewportCartography(e,r),a.props.matchAnchorWidth&&a.matchAnchorWidth();var o=a.getValidAlignmentPreset(),i=t.getAlignmentClassFragment;a.dialog.$wrapper.className=a.dialog.$wrapper.className.replace(E,"")+" b-popover-anchor-x-"+i(o.ax)+" b-popover-anchor-y-"+i(o.ay)+" b-popover-self-x-"+i(o.dx)+" b-popover-self-y-"+i(o.dy);var c=Math.round(a.getNextDialogXPosition(o)),s=Math.round(a.getNextDialogYPosition(o));console.log(a.dialog.$wrapper.style,a.dialog.$wrapper,a.dialog.$wrapper.style),a.dialog.$wrapper.style[w.a]="translate("+c+"px, "+s+"px)";var p=o.name[0],l="N"===p||"S"===p;a.$caret.style[l?"left":"top"]=Math.round(a.getNextCaretXPosition(o))+"px",a.$caret.style[l?"top":"left"]="0px"},a.matchAnchorWidth=function(){a.dialog.$dialog.style.width=a.anchorRect.width+"px"},c=i,o(a,c)}return i(t,e),R(t,[{key:"cacheViewportCartography",value:function(e,t){var n=document.body.getBoundingClientRect();this.anchorRect=e.getBoundingClientRect(),this.caretAnchorRect=t.getBoundingClientRect(),this.bodyLeft=-1*n.left,this.bodyTop=-1*n.top}},{key:"getNextCaretXPosition",value:function(e){var t=e.name,n=(e.ax,e.dx),r=(e.ay,e.dy),o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.$caret,i=0;return"N"===t[0]||"S"===t[0]?(i=this.caretAnchorRect.left-this.anchorRect.left+this.caretAnchorRect.width/2,1===n?i+=(this.dialog.$wrapper.clientWidth-this.anchorRect.width)/2:2===n&&(i+=this.dialog.$wrapper.clientWidth-this.anchorRect.width)):(i=this.caretAnchorRect.top-this.anchorRect.top+this.caretAnchorRect.height/2,1===r?i+=(this.dialog.$wrapper.clientHeight-this.anchorRect.height)/2:2===r&&(i+=this.dialog.$wrapper.clientHeight-this.anchorRect.height)),i-=o.clientWidth/2}},{key:"getNextDialogXPosition",value:function(e){var t=e.ax,n=e.dx,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,o=this.anchorRect.left+this.bodyLeft;switch(t){case 1:o+=this.anchorRect.width/2;break;case 2:o+=this.anchorRect.width}switch(n){case 1:o-=r.clientWidth/2;break;case 2:o-=r.clientWidth}return o}},{key:"getNextDialogYPosition",value:function(e){var t=e.ay,n=e.dy,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.dialog.$wrapper,o=this.anchorRect.top+this.bodyTop;switch(t){case 1:o+=this.anchorRect.height/2;break;case 2:o+=this.anchorRect.height}switch(n){case 1:o-=r.clientHeight/2;break;case 2:o-=r.clientHeight}return o}},{key:"isPositionValid",value:function(e,t,n){var r=e.name,o=e.ax,i=e.ay,a=(e.dx,e.dy,r[0]);return"N"===a||"S"===a?!("N"===a&&this.anchorRect.top-t<0)&&(!("S"===a&&this.anchorRect.bottom+t>window.innerHeight)&&(0===o?!(this.anchorRect.left+n>window.innerWidth||this.anchorRect.left<0):1===o?!(this.anchorRect.left-n/2<0||this.anchorRect.left+n/2>window.innerWidth):!(this.anchorRect.left-n<0||this.anchorRect.right>window.innerWidth))):"W"!==a&&"E"!==a||!("W"===a&&this.anchorRect.left-n<0)&&(!("E"===a&&this.anchorRect.right+n>window.innerWidth)&&(0===i?!(this.anchorRect.top+t>window.innerHeight||this.anchorRect.top<0):1===i?!(this.anchorRect.top+this.anchorRect.height/2-t/2<0||this.anchorRect.top+this.anchorRect.height/2+t/2>window.innerHeight):!(this.anchorRect.top-t<0||this.anchorRect.bottom>window.innerHeight)))}},{key:"getValidAlignmentPreset",value:function(){var e=this,t=this.dialog.$wrapper.clientWidth,n=this.dialog.$wrapper.clientHeight,r=N.filter(function(r){return e.isPositionValid(r,n,t)});if(-1!==r.indexOf(this.props.preset)||!this.props.autoReposition||!r.length)return this.props.preset;var o=r.filter(function(t){return t.name[0]===e.props.preset.name[0]});if(o.length)return o[0];var i=a(this.props.preset.name),c=r.filter(function(e){return e.name[0]===i});return c.length?c[0]:r[0]}},{key:"componentDidMount",value:function(){this.align(),window.addEventListener("resize",this.align,!0)}},{key:"componentDidUpdate",value:function(){this.align()}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this.align,!0)}},{key:"render",value:function(){var e=this,r=this.props;return n.i(p.createElement)(g.a,r.portalProps,n.i(p.createElement)(f.a,b({},x()(r,t.internalKeys),{ref:function(t){return e.dialog=t},before:n.i(p.cloneElement)(r.caretComponent,{ref:function(t){return e.$caret=t},className:u()("b-popover-caret",r.caretComponent.props.className)}),className:u()("b-popover",r.className)})))}}],[{key:"getAlignmentClassFragment",value:function(e){switch(e){case 0:return"start";case 1:return"middle";case 2:return"end"}}}]),t}(p.PureComponent);W.preset=N.reduce(function(e,t){return e[t.name]=t,e},{}),W.propTypes=b({},f.a.propTypes,{anchor:s.a.oneOfType([s.a.instanceOf(HTMLElement),s.a.shape({props:s.a.object})]).isRequired,autoReposition:s.a.bool,matchAnchorWidth:s.a.bool,caretAnchor:s.a.oneOfType([s.a.instanceOf(HTMLElement),s.a.shape({props:s.a.object})]),caretComponent:s.a.element,portalProps:s.a.shape(g.a.PropTypes),preset:s.a.oneOf([W.preset.NNW,W.preset.N,W.preset.NNE,W.preset.ENE,W.preset.E,W.preset.ESE,W.preset.SSE,W.preset.S,W.preset.SSW,W.preset.WSW,W.preset.W,W.preset.WNW])}),W.defaultProps=b({},f.a.defaultProps,{anchor:void 0,autoReposition:!0,matchAnchorWidth:!1,captureFocus:!1,caretAnchor:void 0,caretComponent:O,closeOnEscKey:!0,closeOnOutsideClick:!0,closeOnOutsideScroll:!0,portalProps:{},preset:W.preset.S}),W.internalKeys=function(e,t){return e.filter(function(e){return-1===t.indexOf(e)})}(Object.keys(W.defaultProps),f.a.internalKeys),t.default=W}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,