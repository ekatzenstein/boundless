module.exports=function(e){function t(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var o={};return t.m=e,t.c=o,t.i=function(e){return e},t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=15)}([function(e,t,o){var n=o(20),r=n.Symbol;e.exports=r},function(e,t,o){"function"==typeof Symbol&&Symbol.iterator;e.exports=o(13)()},function(e,t,o){function n(e){return"number"==typeof e&&e==r(e)}var r=o(25);e.exports=n},function(e,t){e.exports=require("boundless-arrow-key-navigation")},function(e,t){e.exports=require("boundless-async")},function(e,t){e.exports=require("boundless-segmented-control")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("boundless-utils-uuid")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-dom")},function(e,t,o){"use strict";function n(e){return function(){return e}}var r=function(){};r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,o){"use strict";function n(e,t,o,n,i,a,s,u){if(r(t),!e){var p;if(void 0===t)p=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[o,n,i,a,s,u],c=0;p=new Error(t.replace(/%s/g,function(){return l[c++]})),p.name="Invariant Violation"}throw p.framesToPop=1,p}}var r=function(e){};e.exports=n},function(e,t,o){"use strict";var n=o(11),r=o(12),i=o(14);e.exports=function(){function e(e,t,o,n,a,s){s!==i&&r(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var o={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return o.checkPropTypes=n,o.PropTypes=o,o}},function(e,t,o){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,o){"use strict";function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=o(2),u=o.n(s),p=o(1),l=o.n(p),c=o(9),f=(o.n(c),o(10)),m=(o.n(f),o(8)),g=o.n(m),d=o(4),b=o.n(d),P=o(5),y=o.n(P),h=o(3),T=o.n(h),v=o(6),I=o.n(v),O=o(7),C=o.n(O),S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},x=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),w=function(e){return e},E=function(e){return"function"==typeof e},N=function(){},j=function(e){function t(){var e,o,n,a;r(this,t);for(var s=arguments.length,u=Array(s),p=0;p<s;p++)u[p]=arguments[p];return o=n=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),n.mounted=!1,n.state={currentPage:n.props.initialPage,targetIndex:(n.props.initialPage-1)*n.props.numItemsPerPage},n.currentPage=function(){return n.state.currentPage},n.getPageForIndex=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.props.numItemsPerPage;return Math.ceil((e+1)/t)},n.totalPages=function(){return Math.ceil(n.props.totalItems/n.props.numItemsPerPage)},n.firstVisibleItemIndex=function(){return(n.currentPage()-1)*n.props.numItemsPerPage},n.jumpToIndex=function(e){if(e<0||e>=n.props.totalItems)throw Error("Cannot page to invalid index "+e+".");n.setState({currentPage:n.getPageForIndex(e),targetIndex:e})},n.handlePageSelected=function(e){var o=void 0;switch(e[t.CONTROL_DATA_ATTRIBUTE]){case void 0:return;case t.control.FIRST:o=0;break;case t.control.PREVIOUS:o=n.firstVisibleItemIndex()-n.props.numItemsPerPage;break;case t.control.NEXT:o=n.firstVisibleItemIndex()+n.props.numItemsPerPage;break;case t.control.LAST:o=n.props.totalItems-1;break;default:o=parseInt(e[t.CONTROL_DATA_ATTRIBUTE],10)*n.props.numItemsPerPage-1}n.setState({currentPage:n.getPageForIndex(o),targetIndex:o})},n.handleItemPromiseFulfillment=function(e){if(n.mounted)return n.props.itemToJSXConverter(e)},a=o,i(n,a)}return a(t,e),x(t,[{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"componentDidUpdate",value:function(e,t){t.currentPage!==this.currentPage()&&o.i(f.findDOMNode)(this.refs.item_0).focus()}},{key:"componentWillReceiveProps",value:function(){var e=this,t=this.props;this.setState(function(o,n){return n.identifier!==t.identifier?{currentPage:1,targetIndex:0}:{currentPage:e.getPageForIndex(o.targetIndex,n.numItemsPerPage),targetIndex:o.targetIndex}})}},{key:"generateControls",value:function(){var e=[],o=this.currentPage(),r=this.totalPages(),i=o-(o-1)%this.props.numPageToggles,a=Math.min(i+this.props.numPageToggles-1,r);if(this.props.showPaginationState&&e.push({children:E(this.props.showPaginationState)?this.props.showPaginationState(o,r):o+" / "+r,className:"b-pagination-control b-pagination-control-state",disabled:!0}),this.props.showJumpToFirstPageControl){var s;e.push((s={},n(s,t.CONTROL_DATA_ATTRIBUTE,t.control.FIRST),n(s,"children",this.props.jumpToFirstPageControlContent),n(s,"className","b-pagination-control b-pagination-control-first"),n(s,"disabled",1===o),s))}if(this.props.showJumpToPreviousPageControl){var u;e.push((u={},n(u,t.CONTROL_DATA_ATTRIBUTE,t.control.PREVIOUS),n(u,"children",this.props.jumpToPreviousPageControlContent),n(u,"className","b-pagination-control b-pagination-control-previous"),n(u,"disabled",1===o),u))}for(var p=i;p<=a;p++){var l;e.push((l={},n(l,t.CONTROL_DATA_ATTRIBUTE,p),n(l,"children",p),n(l,"className","b-pagination-control"),n(l,"pressed",o===p),l))}if(this.props.showJumpToNextPageControl){var c;e.push((c={},n(c,t.CONTROL_DATA_ATTRIBUTE,t.control.NEXT),n(c,"children",this.props.jumpToNextPageControlContent),n(c,"className","b-pagination-control b-pagination-control-next"),n(c,"disabled",o===r),c))}if(this.props.showJumpToLastPageControl){var f;e.push((f={},n(f,t.CONTROL_DATA_ATTRIBUTE,t.control.LAST),n(f,"children",this.props.jumpToLastPageControlContent),n(f,"className","b-pagination-control b-pagination-control-last"),n(f,"disabled",o===r),f))}return this.props.customControlContent&&e.push({children:this.props.customControlContent,className:"b-pagination-control b-pagination-control-custom",disabled:!0}),e}},{key:"generateItems",value:function(){for(var e=[],t=this.firstVisibleItemIndex(),o=Math.min(this.props.totalItems,t+this.props.numItemsPerPage)-1,n=t;n<=o;n+=1)e.push(this.props.getItem(n));return e}},{key:"renderItems",value:function(){var e=this,t=this.props.itemWrapperProps;return o.i(c.createElement)(T.a,S({},t,{className:g()("b-pagination-items",t.className)}),this.generateItems().map(function(t,n){return o.i(c.createElement)(b.a,{ref:0===n?"item_0":null,key:n,className:g()("b-pagination-item",{"b-pagination-item-even":n%2==0,"b-pagination-item-odd":n%2!=0}),"data-pagination-index":e.props.numItemsPerPage*(e.currentPage()-1)+n,pendingContent:e.props.itemLoadingContent},t instanceof Promise?t.then(e.handleItemPromiseFulfillment,e.handleItemPromiseFulfillment):e.props.itemToJSXConverter(t))}))}},{key:"renderControls",value:function(e){var r;if(!(this.props.hidePagerIfNotNeeded&&this.props.totalItems<=this.props.numItemsPerPage))return o.i(c.createElement)(y.a,S({},this.props.controlWrapperProps,{className:g()("b-pagination-controls",this.props.controlWrapperProps.className,(r={},n(r,"b-pagination-controls-above",e===t.position.ABOVE),n(r,"b-pagination-controls-below",e===t.position.BELOW),r)),options:this.generateControls(),onOptionSelected:this.handlePageSelected}))}},{key:"renderView",value:function(){var e=this.props.position,n=t.position;return o.i(c.createElement)("div",{className:"b-pagination"},e===n.ABOVE||e===n.BOTH?this.renderControls(n.ABOVE):null,this.props.before,this.renderItems(),this.props.after,e===n.BELOW||e===n.BOTH?this.renderControls(n.BELOW):null)}},{key:"render",value:function(){return o.i(c.createElement)("div",S({},I()(this.props,t.internalKeys),{className:g()("b-pagination-wrapper",this.props.className)}),this.renderView())}}]),t}(c.PureComponent);j.control={CUSTOM:C()(),FIRST:C()(),LAST:C()(),NEXT:C()(),PREVIOUS:C()()},j.position={ABOVE:C()(),BELOW:C()(),BOTH:C()()},j.CONTROL_DATA_ATTRIBUTE="data-page-control",j.propTypes={"*":l.a.any,after:l.a.node,before:l.a.node,controlWrapperProps:l.a.shape({"*":l.a.any}),customControlContent:l.a.node,getItem:l.a.func.isRequired,hidePagerIfNotNeeded:l.a.bool,identifier:l.a.string.isRequired,initialPage:function(e){if(!1===u()(e.initialPage))return new Error("`initialPage` must be an integer.");var t=Math.ceil(e.totalItems/e.numItemsPerPage);return e.initialPage<1||e.initialPage>t?new Error("`initialPage` must be between 1 and "+t+"."):void 0},itemLoadingContent:l.a.node,itemToJSXConverter:l.a.func,itemWrapperProps:l.a.shape({"*":l.a.any}),jumpToFirstPageControlContent:l.a.node,jumpToLastPageControlContent:l.a.node,jumpToNextPageControlContent:l.a.node,jumpToPreviousPageControlContent:l.a.node,numItemsPerPage:function(e){return!1===u()(e.numItemsPerPage)?new Error("`numItemsPerPage` must be an integer."):e.numItemsPerPage<1?new Error("`numItemsPerPage` must be greater than zero."):void 0},numPageToggles:l.a.number,position:l.a.oneOf([j.position.ABOVE,j.position.BELOW,j.position.BOTH]),showJumpToFirstPageControl:l.a.bool,showJumpToLastPageControl:l.a.bool,showJumpToNextPageControl:l.a.bool,showJumpToPreviousPageControl:l.a.bool,showPaginationState:l.a.oneOfType([l.a.bool,l.a.func]),totalItems:l.a.number.isRequired},j.defaultProps={after:null,before:null,controlWrapperProps:{},customControlContent:null,getItem:N,hidePagerIfNotNeeded:!1,identifier:C()(),initialPage:1,itemLoadingContent:void 0,itemToJSXConverter:w,itemWrapperProps:{},jumpToFirstPageControlContent:"⇤",jumpToLastPageControlContent:"⇥",jumpToNextPageControlContent:"→",jumpToPreviousPageControlContent:"←",numItemsPerPage:10,numPageToggles:5,position:j.position.ABOVE,showJumpToFirstPageControl:!0,showJumpToLastPageControl:!0,showJumpToNextPageControl:!0,showJumpToPreviousPageControl:!0,showPaginationState:!0,totalItems:null},j.internalKeys=Object.keys(j.defaultProps),t.default=j},function(e,t,o){function n(e){return null==e?void 0===e?u:s:p&&p in Object(e)?i(e):a(e)}var r=o(0),i=o(18),a=o(19),s="[object Null]",u="[object Undefined]",p=r?r.toStringTag:void 0;e.exports=n},function(e,t){var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n="object"==("undefined"==typeof global?"undefined":o(global))&&global&&global.Object===Object&&global;e.exports=n},function(e,t,o){function n(e){var t=a.call(e,u),o=e[u];try{e[u]=void 0;var n=!0}catch(e){}var r=s.call(e);return n&&(t?e[u]=o:delete e[u]),r}var r=o(0),i=Object.prototype,a=i.hasOwnProperty,s=i.toString,u=r?r.toStringTag:void 0;e.exports=n},function(e,t){function o(e){return r.call(e)}var n=Object.prototype,r=n.toString;e.exports=o},function(e,t,o){var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=o(17),i="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,a=r||i||Function("return this")();e.exports=a},function(e,t){function o(e){var t=void 0===e?"undefined":n(e);return null!=e&&("object"==t||"function"==t)}var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=o},function(e,t){function o(e){return null!=e&&"object"==(void 0===e?"undefined":n(e))}var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=o},function(e,t,o){function n(e){return"symbol"==(void 0===e?"undefined":r(e))||a(e)&&i(e)==s}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=o(16),a=o(22),s="[object Symbol]";e.exports=n},function(e,t,o){function n(e){if(!e)return 0===e?e:0;if((e=r(e))===i||e===-i){return(e<0?-1:1)*a}return e===e?e:0}var r=o(26),i=1/0,a=1.7976931348623157e308;e.exports=n},function(e,t,o){function n(e){var t=r(e),o=t%1;return t===t?o?t-o:t:0}var r=o(24);e.exports=n},function(e,t,o){function n(e){if("number"==typeof e)return e;if(i(e))return a;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var o=p.test(e);return o||l.test(e)?c(e.slice(2),o?2:8):u.test(e)?a:+e}var r=o(21),i=o(23),a=NaN,s=/^\s+|\s+$/g,u=/^[-+]0x[0-9a-f]+$/i,p=/^0b[01]+$/i,l=/^0o[0-7]+$/i,c=parseInt;e.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,