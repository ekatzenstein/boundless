module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=9)}([function(e,t,n){"function"==typeof Symbol&&Symbol.iterator;e.exports=n(7)()},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-dom")},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";function r(e,t,n,r,i,u,a,s){if(o(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[n,r,i,u,a,s],f=0;c=new Error(t.replace(/%s/g,function(){return p[f++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var o=function(e){};e.exports=r},function(e,t,n){"use strict";var r=n(5),o=n(6),i=n(8);e.exports=function(){function e(e,t,n,r,u,a){a!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){return parseInt(e,10)}function a(e){var t=n.i(h.findDOMNode)(e),r=window.getComputedStyle(t.parentNode),o=u(window.getComputedStyle(t).fontSize);null===e.baseFontSize&&(e.baseFontSize=o);var i=u(r.height),a=u(r.width);"border-box"!==r.boxSizing&&"padding-box"!==r.boxSizing||(i-=u(r.paddingTop)+u(r.paddingBottom),a-=u(r.paddingLeft)+u(r.paddingRight));var s=Math.floor(o/t.offsetHeight*i),c=Math.floor(o/t.offsetWidth*a);e.props.upscale?t.style.fontSize=(Math.max(s,c)||1)+"px":t.style.fontSize=(Math.min(e.baseFontSize,s,c)||1)+"px"}function s(){x.forEach(function(e){return a(e)})}function c(e){0===x.length&&window.addEventListener("resize",s,!0),x.push(e)}function p(e){x.splice(x.indexOf(e),1),0===x.length&&window.removeEventListener("resize",s,!0)}Object.defineProperty(t,"__esModule",{value:!0});var f=n(0),l=n.n(f),d=n(3),h=(n.n(d),n(4)),y=(n.n(h),n(2)),b=n.n(y),m=n(1),v=n.n(m),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},O=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),x=[],w=function(e){function t(){var e,n,i,u;r(this,t);for(var a=arguments.length,s=Array(a),c=0;c<a;c++)s[c]=arguments[c];return n=i=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),i.baseFontSize=null,u=n,o(i,u)}return i(t,e),O(t,[{key:"componentDidMount",value:function(){a(this),c(this)}},{key:"componentDidUpdate",value:function(){a(this)}},{key:"componentWillUnmount",value:function(){p(this)}},{key:"render",value:function(){return n.i(d.createElement)(this.props.component,g({},v()(this.props,t.internalKeys),{className:b()("b-text",this.props.className)}),this.props.children)}}]),t}(d.PureComponent);w.propTypes={"*":l.a.any,component:l.a.string,upscale:l.a.bool},w.defaultProps={component:"span",upscale:!1},w.internalKeys=Object.keys(w.defaultProps),t.default=w}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,