module.exports=function(n){function t(i){if(o[i])return o[i].exports;var e=o[i]={i:i,l:!1,exports:{}};return n[i].call(e.exports,e,e.exports,t),e.l=!0,e.exports}var o={};return t.m=n,t.c=o,t.i=function(n){return n},t.d=function(n,o,i){t.o(n,o)||Object.defineProperty(n,o,{configurable:!1,enumerable:!0,get:i})},t.n=function(n){var o=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(o,"a",o),o},t.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},t.p="",t(t.s=0)}([function(n,t,o){"use strict";function i(){return new Promise(function(n,t){f.requestPermission(function(o){"granted"===o&&n(),t(c.DISABLED)})})}function e(){return new Promise(function(n,t){if(!f)return t(c.NOT_AVAILABLE);if("permission"in f){switch(f.permission){case"granted":return n();case"denied":return t(c.DISABLED)}i().then(n,t)}})}function r(n){return new Promise(function(t,o){return void 0===n?o(c.CONFIG_MISSING):"[object Object]"!==Object.prototype.toString.call(n)?o(c.CONFIG_TYPE):void 0===n.body?o(c.BODY_MISSING):!1===a(n.body)?o(c.BODY_TYPE):void 0===n.header?o(c.HEADER_MISSING):!1===a(n.header)?o(c.HEADER_TYPE):void 0!==n.icon&&!1===a(n.icon)?o(c.ICON_TYPE):void 0!==n.onClick&&!1===u(n.onClick)?o(c.ONCLICK_TYPE):void e().then(function(){var o=new f(n.header,{body:n.body,icon:n.icon});n.onClick&&o.addEventListener("click",n.onClick),t(o)},function(n){return o(n)})})}Object.defineProperty(t,"__esModule",{value:!0}),o.d(t,"errors",function(){return c}),t.default=r;var c={DISABLED:"webNotification: web notifications are currently disabled by user settings.",NOT_AVAILABLE:"webNotification: web notifications are not supported on this platform.",CONFIG_TYPE:"webNotification: passed a non-object as configuration.",CONFIG_MISSING:"webNotification: no configuration was passed.",BODY_TYPE:"webNotification: `body` must be a string.",BODY_MISSING:"webNotification: `body` was omitted from the configuration object.",HEADER_TYPE:"webNotification: `header` must be a string.",HEADER_MISSING:"webNotification: `header` was omitted from the configuration object.",ICON_TYPE:"webNotification: `icon` must be a URL string.",ONCLICK_TYPE:"webNotification: `onClick` must be a function."},u=function(n){return"function"==typeof n},a=function(n){return"string"==typeof n},f=function(){return!!window.Notification&&window.Notification}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDE2OTUwMDA1Y2Q1YTNkZDI5NmU1Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy13ZWItbm90aWZpY2F0aW9uL2luZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwidmFsdWUiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fd2VicGFja19leHBvcnRzX18iLCJyZXF1ZXN0UGVybWlzc2lvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiTm90aWZpY2F0aW9uQVBJIiwic3RhdHVzIiwiZXJyb3JzIiwiRElTQUJMRUQiLCJjaGVja1Blcm1pc3Npb24iLCJOT1RfQVZBSUxBQkxFIiwicGVybWlzc2lvbiIsInRoZW4iLCJ3ZWJOb3RpZmljYXRpb24iLCJjb25maWciLCJ1bmRlZmluZWQiLCJDT05GSUdfTUlTU0lORyIsInRvU3RyaW5nIiwiQ09ORklHX1RZUEUiLCJib2R5IiwiQk9EWV9NSVNTSU5HIiwiaXNTdHJpbmciLCJCT0RZX1RZUEUiLCJoZWFkZXIiLCJIRUFERVJfTUlTU0lORyIsIkhFQURFUl9UWVBFIiwiaWNvbiIsIklDT05fVFlQRSIsIm9uQ2xpY2siLCJpc0Z1bmN0aW9uIiwiT05DTElDS19UWVBFIiwibm90aWZpY2F0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImVycm9yIiwieCIsIndpbmRvdyIsIk5vdGlm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LGNBQWUseUVBQ2ZRLFlBQWEseURBQ2JGLGVBQWdCLGdEQUNoQk0sVUFBVyw0Q0FDWEYsYUFBYyxxRUFDZEssWUFBYSw4Q0FDYkQsZUFBZ0IsdUVBQ2hCRyxVQUFXLGdEQUNYRyxhQUFjLGtEQUdaRCxFQUFhLFNBQUNLLEdBQUQsTUFBb0Isa0JBQU5BLElBQzNCYixFQUFXLFNBQUNhLEdBQUQsTUFBb0IsZ0JBQU5BLElBRXpCN0IsRUFBbUIsV0FDckIsUUFBSThCLE9BQU9DLGNBQ0FELE9BQU9DIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImVycm9yc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGVycm9yczsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IHdlYk5vdGlmaWNhdGlvbjtcbnZhciBlcnJvcnM9e0RJU0FCTEVEOid3ZWJOb3RpZmljYXRpb246IHdlYiBub3RpZmljYXRpb25zIGFyZSBjdXJyZW50bHkgZGlzYWJsZWQgYnkgdXNlciBzZXR0aW5ncy4nLE5PVF9BVkFJTEFCTEU6J3dlYk5vdGlmaWNhdGlvbjogd2ViIG5vdGlmaWNhdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybS4nLENPTkZJR19UWVBFOid3ZWJOb3RpZmljYXRpb246IHBhc3NlZCBhIG5vbi1vYmplY3QgYXMgY29uZmlndXJhdGlvbi4nLENPTkZJR19NSVNTSU5HOid3ZWJOb3RpZmljYXRpb246IG5vIGNvbmZpZ3VyYXRpb24gd2FzIHBhc3NlZC4nLEJPRFlfVFlQRTond2ViTm90aWZpY2F0aW9uOiBgYm9keWAgbXVzdCBiZSBhIHN0cmluZy4nLEJPRFlfTUlTU0lORzond2ViTm90aWZpY2F0aW9uOiBgYm9keWAgd2FzIG9taXR0ZWQgZnJvbSB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QuJyxIRUFERVJfVFlQRTond2ViTm90aWZpY2F0aW9uOiBgaGVhZGVyYCBtdXN0IGJlIGEgc3RyaW5nLicsSEVBREVSX01JU1NJTkc6J3dlYk5vdGlmaWNhdGlvbjogYGhlYWRlcmAgd2FzIG9taXR0ZWQgZnJvbSB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QuJyxJQ09OX1RZUEU6J3dlYk5vdGlmaWNhdGlvbjogYGljb25gIG11c3QgYmUgYSBVUkwgc3RyaW5nLicsT05DTElDS19UWVBFOid3ZWJOb3RpZmljYXRpb246IGBvbkNsaWNrYCBtdXN0IGJlIGEgZnVuY3Rpb24uJ307dmFyIGlzRnVuY3Rpb249ZnVuY3Rpb24gaXNGdW5jdGlvbih4KXtyZXR1cm4gdHlwZW9mIHg9PT0nZnVuY3Rpb24nO307dmFyIGlzU3RyaW5nPWZ1bmN0aW9uIGlzU3RyaW5nKHgpe3JldHVybiB0eXBlb2YgeD09PSdzdHJpbmcnO307dmFyIE5vdGlmaWNhdGlvbkFQST1mdW5jdGlvbiBkZXRlY3RTdXBwb3J0KCl7aWYod2luZG93Lk5vdGlmaWNhdGlvbil7cmV0dXJuIHdpbmRvdy5Ob3RpZmljYXRpb247fXJldHVybiBmYWxzZTt9KCk7ZnVuY3Rpb24gcmVxdWVzdFBlcm1pc3Npb24oKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe05vdGlmaWNhdGlvbkFQSS5yZXF1ZXN0UGVybWlzc2lvbihmdW5jdGlvbiByZXF1ZXN0UmVjZWl2ZXIoc3RhdHVzKXtpZihzdGF0dXM9PT0nZ3JhbnRlZCcpe3Jlc29sdmUoKTt9cmVqZWN0KGVycm9ycy5ESVNBQkxFRCk7fSk7fSk7fWZ1bmN0aW9uIGNoZWNrUGVybWlzc2lvbigpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7aWYoIU5vdGlmaWNhdGlvbkFQSSl7cmV0dXJuIHJlamVjdChlcnJvcnMuTk9UX0FWQUlMQUJMRSk7fWlmKCdwZXJtaXNzaW9uJ2luIE5vdGlmaWNhdGlvbkFQSSl7c3dpdGNoKE5vdGlmaWNhdGlvbkFQSS5wZXJtaXNzaW9uKXtjYXNlJ2dyYW50ZWQnOnJldHVybiByZXNvbHZlKCk7Y2FzZSdkZW5pZWQnOnJldHVybiByZWplY3QoZXJyb3JzLkRJU0FCTEVEKTt9cmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKHJlc29sdmUscmVqZWN0KTt9fSk7fWZ1bmN0aW9uIHdlYk5vdGlmaWNhdGlvbihjb25maWcpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7aWYoY29uZmlnPT09dW5kZWZpbmVkKXtyZXR1cm4gcmVqZWN0KGVycm9ycy5DT05GSUdfTUlTU0lORyk7fWVsc2UgaWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGNvbmZpZykhPT0nW29iamVjdCBPYmplY3RdJyl7cmV0dXJuIHJlamVjdChlcnJvcnMuQ09ORklHX1RZUEUpO31lbHNlIGlmKGNvbmZpZy5ib2R5PT09dW5kZWZpbmVkKXtyZXR1cm4gcmVqZWN0KGVycm9ycy5CT0RZX01JU1NJTkcpO31lbHNlIGlmKGlzU3RyaW5nKGNvbmZpZy5ib2R5KT09PWZhbHNlKXtyZXR1cm4gcmVqZWN0KGVycm9ycy5CT0RZX1RZUEUpO31lbHNlIGlmKGNvbmZpZy5oZWFkZXI9PT11bmRlZmluZWQpe3JldHVybiByZWplY3QoZXJyb3JzLkhFQURFUl9NSVNTSU5HKTt9ZWxzZSBpZihpc1N0cmluZyhjb25maWcuaGVhZGVyKT09PWZhbHNlKXtyZXR1cm4gcmVqZWN0KGVycm9ycy5IRUFERVJfVFlQRSk7fWVsc2UgaWYoY29uZmlnLmljb24hPT11bmRlZmluZWQmJmlzU3RyaW5nKGNvbmZpZy5pY29uKT09PWZhbHNlKXtyZXR1cm4gcmVqZWN0KGVycm9ycy5JQ09OX1RZUEUpO31lbHNlIGlmKGNvbmZpZy5vbkNsaWNrIT09dW5kZWZpbmVkJiZpc0Z1bmN0aW9uKGNvbmZpZy5vbkNsaWNrKT09PWZhbHNlKXtyZXR1cm4gcmVqZWN0KGVycm9ycy5PTkNMSUNLX1RZUEUpO31jaGVja1Blcm1pc3Npb24oKS50aGVuKGZ1bmN0aW9uIHNwYXduV2ViTm90aWZpY2F0aW9uKCl7dmFyIG5vdGlmaWNhdGlvbj1uZXcgTm90aWZpY2F0aW9uQVBJKGNvbmZpZy5oZWFkZXIse2JvZHk6Y29uZmlnLmJvZHksaWNvbjpjb25maWcuaWNvbn0pO2lmKGNvbmZpZy5vbkNsaWNrKXtub3RpZmljYXRpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGNvbmZpZy5vbkNsaWNrKTt9cmVzb2x2ZShub3RpZmljYXRpb24pO30sZnVuY3Rpb24oZXJyb3Ipe3JldHVybiByZWplY3QoZXJyb3IpO30pO30pO31cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBpbmRleC5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMTY5NTAwMDVjZDVhM2RkMjk2ZTUiLCJleHBvcnQgY29uc3QgZXJyb3JzID0ge1xuICAgIERJU0FCTEVEOiAnd2ViTm90aWZpY2F0aW9uOiB3ZWIgbm90aWZpY2F0aW9ucyBhcmUgY3VycmVudGx5IGRpc2FibGVkIGJ5IHVzZXIgc2V0dGluZ3MuJyxcbiAgICBOT1RfQVZBSUxBQkxFOiAnd2ViTm90aWZpY2F0aW9uOiB3ZWIgbm90aWZpY2F0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtLicsXG4gICAgQ09ORklHX1RZUEU6ICd3ZWJOb3RpZmljYXRpb246IHBhc3NlZCBhIG5vbi1vYmplY3QgYXMgY29uZmlndXJhdGlvbi4nLFxuICAgIENPTkZJR19NSVNTSU5HOiAnd2ViTm90aWZpY2F0aW9uOiBubyBjb25maWd1cmF0aW9uIHdhcyBwYXNzZWQuJyxcbiAgICBCT0RZX1RZUEU6ICd3ZWJOb3RpZmljYXRpb246IGBib2R5YCBtdXN0IGJlIGEgc3RyaW5nLicsXG4gICAgQk9EWV9NSVNTSU5HOiAnd2ViTm90aWZpY2F0aW9uOiBgYm9keWAgd2FzIG9taXR0ZWQgZnJvbSB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QuJyxcbiAgICBIRUFERVJfVFlQRTogJ3dlYk5vdGlmaWNhdGlvbjogYGhlYWRlcmAgbXVzdCBiZSBhIHN0cmluZy4nLFxuICAgIEhFQURFUl9NSVNTSU5HOiAnd2ViTm90aWZpY2F0aW9uOiBgaGVhZGVyYCB3YXMgb21pdHRlZCBmcm9tIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdC4nLFxuICAgIElDT05fVFlQRTogJ3dlYk5vdGlmaWNhdGlvbjogYGljb25gIG11c3QgYmUgYSBVUkwgc3RyaW5nLicsXG4gICAgT05DTElDS19UWVBFOiAnd2ViTm90aWZpY2F0aW9uOiBgb25DbGlja2AgbXVzdCBiZSBhIGZ1bmN0aW9uLicsXG59O1xuXG5jb25zdCBpc0Z1bmN0aW9uID0gKHgpID0+IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuY29uc3QgaXNTdHJpbmcgPSAoeCkgPT4gdHlwZW9mIHggPT09ICdzdHJpbmcnO1xuXG5jb25zdCBOb3RpZmljYXRpb25BUEkgPSAoZnVuY3Rpb24gZGV0ZWN0U3VwcG9ydCgpIHtcbiAgICBpZiAod2luZG93Lk5vdGlmaWNhdGlvbikge1xuICAgICAgICByZXR1cm4gd2luZG93Lk5vdGlmaWNhdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG5mdW5jdGlvbiByZXF1ZXN0UGVybWlzc2lvbigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBOb3RpZmljYXRpb25BUEkucmVxdWVzdFBlcm1pc3Npb24oZnVuY3Rpb24gcmVxdWVzdFJlY2VpdmVyKHN0YXR1cykge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2dyYW50ZWQnKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZWplY3QoZXJyb3JzLkRJU0FCTEVEKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrUGVybWlzc2lvbigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoIU5vdGlmaWNhdGlvbkFQSSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcnMuTk9UX0FWQUlMQUJMRSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ3Blcm1pc3Npb24nIGluIE5vdGlmaWNhdGlvbkFQSSkge1xuICAgICAgICAgICAgc3dpdGNoIChOb3RpZmljYXRpb25BUEkucGVybWlzc2lvbikge1xuICAgICAgICAgICAgY2FzZSAnZ3JhbnRlZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcblxuICAgICAgICAgICAgY2FzZSAnZGVuaWVkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9ycy5ESVNBQkxFRCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcXVlc3RQZXJtaXNzaW9uKCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLyoqXG4gKiA+IFN1cHBvcnQgZm9yIHdlYiBub3RpZmljYXRpb25zIGlzIFthdmFpbGFibGUgaW4gYWxsIG1ham9yIGRlc2t0b3AgYnJvd3NlcnNdKGh0dHA6Ly9jYW5pdXNlLmNvbS8jZmVhdD1ub3RpZmljYXRpb25zKSxcbiAqICAgZXhjZXB0IElFIChGZWJydWFyeSAyMDE3KS5cbiAqXG4gKiBUaGlzIG1vZHVsZSBpcyBub3QgYSBSZWFjdCBjb21wb25lbnQsIGJ1dCBhIHV0aWxpdHkuIFRoZSBcImNsb3NlXCIgZnVuY3Rpb25hbGl0eSBvZiB3ZWIgbm90aWZpY2F0aW9ucyB3YXMgcmVtb3ZlZCBpbiBhIHBsYXRmb3JtXG4gKiBzcGVjIHVwZGF0ZSwgc28gaXQncyBubyBsb25nZXIgcG9zc2libGUgdG8gaGF2ZSBhIHRydWUgbGlmZWN5Y2xlLlxuICpcbiAqIFRoZSB1dGlsaXR5IHdvcmtzIGJ5IHByb3ZpZGluZyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogLSBfX2JvZHlfXyBgU3RyaW5nYFxuICogICB1cCB0byB0d28gbGluZXMgYXJlIGRpc3BsYXllZCBpbiB0aGUgbm90aWZpY2F0aW9uIChiYXNlZCBvbiB0aGUgY3VycmVudCBicm93c2VyIGltcGxlbWVudGF0aW9ucylcbiAqXG4gKiAtIF9faGVhZGVyX18gYFN0cmluZ2BcbiAqICAgdGhlIGJvbGRlZCB0aXRsZSBkaXNwbGF5ZWQgYXQgdGhlIHRvcCBvZiB0aGUgbm90aWZpY2F0aW9uXG4gKlxuICogLSBfX2ljb25fXyBgSFRNTFN0cmluZ2BcbiAqICAgKG9wdGlvbmFsKSB0aGUgVVJMIG9mIGEgcGljdHVyZSBvciBpY29uIHRvIGJlIGRpc3BsYXllZCB3aXRoIHRoZSBub3RpZmljYXRpb24gKGxvb2tzIGJlc3QgaWYgc3F1YXJlKVxuICpcbiAqIC0gX19vbkNsaWNrX18gYEZ1bmN0aW9uYFxuICogICAob3B0aW9uYWwpIGFkZCBhcmJpdHJhcnkgZnVuY3Rpb25hbGl0eSB3aGVuIHRoZSBub3RpZmljYXRpb24gaXMgY2xpY2tlZFxuICpcbiAqIFRoaXMgd2lsbCByZXR1cm4gYSBgUHJvbWlzZWAuIFJlc29sdXRpb24gbWVhbnMgdGhlIG5vdGlmaWNhdGlvbiB3YXMgY3JlYXRlZCBjb3JyZWN0bHkgKHJldHVybnMgdGhlIGBOb3RpZmljYXRpb25gLFxuICogYW5kIHJlamVjdGlvbiB3aWxsIHJldHVybiBhIHJlbGV2YW50IGVycm9yIGRlc2NyaXB0aW9uIHN0cmluZy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2ViTm90aWZpY2F0aW9uKGNvbmZpZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmIChjb25maWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcnMuQ09ORklHX01JU1NJTkcpO1xuICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjb25maWcpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcnMuQ09ORklHX1RZUEUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5ib2R5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3JzLkJPRFlfTUlTU0lORyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcoY29uZmlnLmJvZHkpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcnMuQk9EWV9UWVBFKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcuaGVhZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3JzLkhFQURFUl9NSVNTSU5HKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhjb25maWcuaGVhZGVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3JzLkhFQURFUl9UWVBFKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcuaWNvbiAhPT0gdW5kZWZpbmVkICYmIGlzU3RyaW5nKGNvbmZpZy5pY29uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3JzLklDT05fVFlQRSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLm9uQ2xpY2sgIT09IHVuZGVmaW5lZCAmJiBpc0Z1bmN0aW9uKGNvbmZpZy5vbkNsaWNrKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3JzLk9OQ0xJQ0tfVFlQRSk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGVja1Blcm1pc3Npb24oKS50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gc3Bhd25XZWJOb3RpZmljYXRpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uID0gbmV3IE5vdGlmaWNhdGlvbkFQSShjb25maWcuaGVhZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGNvbmZpZy5ib2R5LFxuICAgICAgICAgICAgICAgICAgICBpY29uOiBjb25maWcuaWNvbixcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5vbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNvbmZpZy5vbkNsaWNrKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKG5vdGlmaWNhdGlvbik7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHJlamVjdChlcnJvcilcbiAgICAgICAgKTtcbiAgICB9KTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BhY2thZ2VzL2JvdW5kbGVzcy11dGlscy13ZWItbm90aWZpY2F0aW9uL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==