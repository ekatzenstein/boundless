module.exports=function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=10)}([function(e,t,n){"function"==typeof Symbol&&Symbol.iterator;e.exports=n(8)()},function(e,t){e.exports=require("boundless-arrow-key-navigation")},function(e,t){e.exports=require("boundless-button")},function(e,t){e.exports=require("boundless-utils-omit-keys")},function(e,t){e.exports=require("classnames")},function(e,t){e.exports=require("react")},function(e,t,n){"use strict";function o(e){return function(){return e}}var r=function(){};r.thatReturns=o,r.thatReturnsFalse=o(!1),r.thatReturnsTrue=o(!0),r.thatReturnsNull=o(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){"use strict";function o(e,t,n,o,i,s,c,a){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[n,o,i,s,c,a],l=0;u=new Error(t.replace(/%s/g,function(){return p[l++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}var r=function(e){};e.exports=o},function(e,t,n){"use strict";var o=n(6),r=n(7),i=n(9);e.exports=function(){function e(e,t,n,o,s,c){c!==i&&r(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e,t){for(var n=void 0,o=0,r=e.length;o<r;o+=1)if(t(e[o])){n=o;break}return n}Object.defineProperty(t,"__esModule",{value:!0});var c=n(0),a=n.n(c),u=n(5),p=(n.n(u),n(4)),l=n.n(p),f=n(1),d=n.n(f),y=n(2),h=n.n(y),O=n(3),m=n.n(O),x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},b=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),v=function(e){function t(){var e,n,i,c;o(this,t);for(var a=arguments.length,u=Array(a),p=0;p<a;p++)u[p]=arguments[p];return n=i=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),i.state={selectedIndex:null},i.handleOptionSelection=function(e){var t=Array.prototype.indexOf.call(e.target.parentElement.children,e.target);i.state.selectedIndex!==t&&i.setState({selectedIndex:t},function(){i.props.onOptionSelected(i.props.options[i.state.selectedIndex],i.state.selectedIndex)})},i.getSelectedOption=function(){return i.props.options[i.state.selectedIndex]},i.getSelectedOptionIndex=function(){return i.state.selectedIndex},i.selectOption=function(e){return i.setState({selectedIndex:i.props.options.indexOf(e)})},i.selectOptionByKey=function(e,t){return i.setState({selectedIndex:s(i.props.options,function(n){return n[e]===t})})},i.selectOptionIndex=function(e){return i.setState({selectedIndex:e})},c=n,r(i,c)}return i(t,e),b(t,[{key:"inferSelectedOptionIndex",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.state;return s(e.options,function(e){return e.pressed})||t.selectedIndex}},{key:"componentWillMount",value:function(){this.setState({selectedIndex:this.inferSelectedOptionIndex()||this.props.defaultOptionSelectedIndex})}},{key:"componentWillReceiveProps",value:function(e){e.options!==this.props.options&&this.setState({selectedIndex:this.inferSelectedOptionIndex(e)})}},{key:"render",value:function(){var e=this;return n.i(u.createElement)(d.a,x({},m()(this.props,t.internalKeys),{role:"radiogroup",className:l()("b-segmented-control",this.props.className),mode:d.a.mode.HORIZONTAL}),this.props.options.map(function(t,o){return n.i(u.createElement)(h.a,x({},t,{key:t.key||o,"aria-checked":o===e.state.selectedIndex,component:t.component||e.props.optionComponent,className:l()("b-segmented-control-option",t.className,{"b-segmented-control-option-selected":o===e.state.selectedIndex}),onPressed:e.handleOptionSelection,pressed:o===e.state.selectedIndex,role:"radio"}),t.children)}))}}]),t}(u.PureComponent);v.propTypes={"*":a.a.any,defaultOptionSelectedIndex:a.a.number,onOptionSelected:a.a.func,optionComponent:a.a.oneOfType([a.a.string,a.a.func]),options:a.a.arrayOf(a.a.shape({"*":a.a.any,children:a.a.node})).isRequired},v.defaultProps={defaultOptionSelectedIndex:0,onOptionSelected:function(){},optionComponent:"button",options:[]},v.internalKeys=Object.keys(v.defaultProps),t.default=v}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDBmMzliYzk3MmY5YzIyNGE1ODU5Iiwid2VicGFjazovLy8uL34vcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb25cIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcImNvbW1vbmpzMlwiOlwiYm91bmRsZXNzLWJ1dHRvblwifSIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJib3VuZGxlc3MtdXRpbHMtb21pdC1rZXlzXCJ9Iiwid2VicGFjazovLy9leHRlcm5hbCB7XCJjb21tb25qczJcIjpcImNsYXNzbmFtZXNcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIHtcImNvbW1vbmpzMlwiOlwicmVhY3RcIn0iLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL34vcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ib3VuZGxlc3Mtc2VnbWVudGVkLWNvbnRyb2wvaW5kZXguanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJ2YWx1ZSIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJyZXF1aXJlIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImUiLCJmIiwidmFsaWRhdGVGb3JtYXQiLCJlcnJvciIsInVuZGVmaW5lZCIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImZpbmRJbmRleCIsImFyciIsInRlc3QiLCJmb3VuZCIsImxlbiIsImxlbmd0aCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX19fZGVmYXVsdCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfYnV0dG9uX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfYm91bmRsZXNzX2J1dHRvbl9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X2JvdW5kbGVzc191dGlsc19vbWl0X2tleXNfX19kZWZhdWx0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIlNlZ21lbnRlZENvbnRyb2wiLCJfUHVyZUNvbXBvbmVudCIsIl9yZWYiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJBcnJheSIsIl9rZXkiLCJnZXRQcm90b3R5cGVPZiIsImFwcGx5IiwiY29uY2F0Iiwic3RhdGUiLCJzZWxlY3RlZEluZGV4IiwiaGFuZGxlT3B0aW9uU2VsZWN0aW9uIiwiZXZlbnQiLCJpbmRleCIsImluZGV4T2YiLCJwYXJlbnRFbGVtZW50IiwiY2hpbGRyZW4iLCJzZXRTdGF0ZSIsIm9uT3B0aW9uU2VsZWN0ZWQiLCJvcHRpb25zIiwiZ2V0U2VsZWN0ZWRPcHRpb24iLCJnZXRTZWxlY3RlZE9wdGlvbkluZGV4Iiwic2VsZWN0T3B0aW9uIiwib3B0aW9uIiwic2VsZWN0T3B0aW9uQnlLZXkiLCJrIiwidiIsInNlbGVjdE9wdGlvbkluZGV4IiwicHJlc3NlZCIsImluZmVyU2VsZWN0ZWRPcHRpb25JbmRleCIsImRlZmF1bHRPcHRpb25TZWxlY3RlZEluZGV4IiwibmV4dFByb3BzIiwiX3RoaXMyIiwiaW50ZXJuYWxLZXlzIiwicm9sZSIsImNsYXNzTmFtZSIsIm1vZGUiLCJIT1JJWk9OVEFMIiwibWFwIiwiYXJpYS1jaGVja2VkIiwiY29tcG9uZW50Iiwib3B0aW9uQ29tcG9uZW50IiwiYi1zZWdtZW50ZWQtY29udHJvbC1vcHRpb24tc2VsZWN0ZWQiLCJvblByZXNzZWQiLCJwcm9wVHlwZXMiLCIqIiwiZGVmYXVsdFByb3BzIiwia2V5cyJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLFFBQ0UsU0FBVUMsR0NHbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFILE9BR0EsSUFBQUQsR0FBQUssRUFBQUQsSUFDQUUsRUFBQUYsRUFDQUcsR0FBQSxFQUNBTixXQVVBLE9BTkFDLEdBQUFFLEdBQUFJLEtBQUFSLEVBQUFDLFFBQUFELElBQUFDLFFBQUFFLEdBR0FILEVBQUFPLEdBQUEsRUFHQVAsRUFBQUMsUUF2QkEsR0FBQUksS0ErREEsT0FuQ0FGLEdBQUFNLEVBQUFQLEVBR0FDLEVBQUFPLEVBQUFMLEVBR0FGLEVBQUFHLEVBQUEsU0FBQUssR0FBMkMsTUFBQUEsSUFHM0NSLEVBQUFTLEVBQUEsU0FBQVgsRUFB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QU1DLGdCQUVoRWlDLFVBQVdYLEVBQUtyQixzQkFDaEJpQixRQUFTZixJQUFVbUIsRUFBS3ZCLE1BQU1DLGNBQzlCd0IsS0FBSyxVQUNKM0csRUFBTXlGLGlCWmxCNDFKbkIsR1lsSDcwSnBCLEVBQUEsY0FBekJvQixHQUNWK0MsV0FJSEMsSUFBS3JFLEVBQUEvRCxFQUFVNkIsSUFLZndGLDJCQUE0QnRELEVBQUEvRCxFQUFVMEIsT0FLdEMrRSxpQkFBa0IxQyxFQUFBL0QsRUFBVXlCLEtBSzVCdUcsZ0JBQWlCakUsRUFBQS9ELEVBQVVvQyxXQUN2QjJCLEVBQUEvRCxFQUFVMkIsT0FDVm9DLEVBQUEvRCxFQUFVeUIsT0FrQmRpRixRQUFTM0MsRUFBQS9ELEVBQVU4QixRQUNmaUMsRUFBQS9ELEVBQVVxQyxPQUlOK0YsSUFBS3JFLEVBQUEvRCxFQUFVNkIsSUFDZjBFLFNBQVV4QyxFQUFBL0QsRUFBVWlDLFFBRTFCWixZQWhEVytELEVBbURWaUQsY0FDSGhCLDJCQUE0QixFQUM1QlosaUJBQWtCLGFBQ2xCdUIsZ0JBQWlCLFNBQ2pCdEIsWUF2RGF0QixFQTBEVm9DLGFBQWVySixPQUFPbUssS0FBS2xELEVBQWlCaUQsY1p3RGswTDdGLEVBQTZCLFFBQUkiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mPXR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuaXRlcmF0b3I9PT1cInN5bWJvbFwiP2Z1bmN0aW9uKG9iail7cmV0dXJuIHR5cGVvZiBvYmo7fTpmdW5jdGlvbihvYmope3JldHVybiBvYmomJnR5cGVvZiBTeW1ib2w9PT1cImZ1bmN0aW9uXCImJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmo7fTtpZihmYWxzZSl7dmFyIFJFQUNUX0VMRU1FTlRfVFlQRT10eXBlb2YgU3ltYm9sPT09J2Z1bmN0aW9uJyYmU3ltYm9sLmZvciYmU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpfHwweGVhYzc7dmFyIGlzVmFsaWRFbGVtZW50PWZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KG9iamVjdCl7cmV0dXJuKHR5cGVvZiBvYmplY3Q9PT0ndW5kZWZpbmVkJz8ndW5kZWZpbmVkJzpfdHlwZW9mKG9iamVjdCkpPT09J29iamVjdCcmJm9iamVjdCE9PW51bGwmJm9iamVjdC4kJHR5cGVvZj09PVJFQUNUX0VMRU1FTlRfVFlQRTt9O3ZhciB0aHJvd09uRGlyZWN0QWNjZXNzPXRydWU7bW9kdWxlLmV4cG9ydHM9cmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LHRocm93T25EaXJlY3RBY2Nlc3MpO31lbHNle21vZHVsZS5leHBvcnRzPV9fd2VicGFja19yZXF1aXJlX18oOCkoKTt9XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb25cIik7XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJib3VuZGxlc3MtYnV0dG9uXCIpO1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm91bmRsZXNzLXV0aWxzLW9taXQta2V5c1wiKTtcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNsYXNzbmFtZXNcIik7XG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYXJnO307fXZhciBlbXB0eUZ1bmN0aW9uPWZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKXt9O2VtcHR5RnVuY3Rpb24udGhhdFJldHVybnM9bWFrZUVtcHR5RnVuY3Rpb247ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlPW1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZT1tYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbD1tYWtlRW1wdHlGdW5jdGlvbihudWxsKTtlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcz1mdW5jdGlvbigpe3JldHVybiB0aGlzO307ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50PWZ1bmN0aW9uKGFyZyl7cmV0dXJuIGFyZzt9O21vZHVsZS5leHBvcnRzPWVtcHR5RnVuY3Rpb247XG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciB2YWxpZGF0ZUZvcm1hdD1mdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpe307aWYoZmFsc2Upe3ZhbGlkYXRlRm9ybWF0PWZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCl7aWYoZm9ybWF0PT09dW5kZWZpbmVkKXt0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7fX07fWZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sZm9ybWF0LGEsYixjLGQsZSxmKXt2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO2lmKCFjb25kaXRpb24pe3ZhciBlcnJvcjtpZihmb3JtYXQ9PT11bmRlZmluZWQpe2Vycm9yPW5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJysnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTt9ZWxzZXt2YXIgYXJncz1bYSxiLGMsZCxlLGZdO3ZhciBhcmdJbmRleD0wO2Vycm9yPW5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBhcmdzW2FyZ0luZGV4KytdO30pKTtlcnJvci5uYW1lPSdJbnZhcmlhbnQgVmlvbGF0aW9uJzt9ZXJyb3IuZnJhbWVzVG9Qb3A9MTt0aHJvdyBlcnJvcjt9fW1vZHVsZS5leHBvcnRzPWludmFyaWFudDtcblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xudmFyIGVtcHR5RnVuY3Rpb249X193ZWJwYWNrX3JlcXVpcmVfXyg2KTt2YXIgaW52YXJpYW50PV9fd2VicGFja19yZXF1aXJlX18oNyk7dmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0PV9fd2VicGFja19yZXF1aXJlX18oOSk7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBzaGltKHByb3BzLHByb3BOYW1lLGNvbXBvbmVudE5hbWUsbG9jYXRpb24scHJvcEZ1bGxOYW1lLHNlY3JldCl7aWYoc2VjcmV0PT09UmVhY3RQcm9wVHlwZXNTZWNyZXQpe3JldHVybjt9aW52YXJpYW50KGZhbHNlLCdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnKydVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnKydSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJyk7fTtzaGltLmlzUmVxdWlyZWQ9c2hpbTtmdW5jdGlvbiBnZXRTaGltKCl7cmV0dXJuIHNoaW07fTt2YXIgUmVhY3RQcm9wVHlwZXM9e2FycmF5OnNoaW0sYm9vbDpzaGltLGZ1bmM6c2hpbSxudW1iZXI6c2hpbSxvYmplY3Q6c2hpbSxzdHJpbmc6c2hpbSxzeW1ib2w6c2hpbSxhbnk6c2hpbSxhcnJheU9mOmdldFNoaW0sZWxlbWVudDpzaGltLGluc3RhbmNlT2Y6Z2V0U2hpbSxub2RlOnNoaW0sb2JqZWN0T2Y6Z2V0U2hpbSxvbmVPZjpnZXRTaGltLG9uZU9mVHlwZTpnZXRTaGltLHNoYXBlOmdldFNoaW19O1JlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzPWVtcHR5RnVuY3Rpb247UmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzPVJlYWN0UHJvcFR5cGVzO3JldHVybiBSZWFjdFByb3BUeXBlczt9O1xuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQ9J1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJzttb2R1bGUuZXhwb3J0cz1SZWFjdFByb3BUeXBlc1NlY3JldDtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9yZWFjdF9fX2RlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm4oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfY2xhc3NuYW1lc19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19idXR0b25fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X2JvdW5kbGVzc19idXR0b25fX19kZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfYnV0dG9uX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19fZGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18ubihfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfYm91bmRsZXNzX3V0aWxzX29taXRfa2V5c19fKTtcbnZhciBfZXh0ZW5kcz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0YXJnZXQpe2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe3ZhciBzb3VyY2U9YXJndW1lbnRzW2ldO2Zvcih2YXIga2V5IGluIHNvdXJjZSl7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSxrZXkpKXt0YXJnZXRba2V5XT1zb3VyY2Vba2V5XTt9fX1yZXR1cm4gdGFyZ2V0O307dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKTt9fXJldHVybiBmdW5jdGlvbihDb25zdHJ1Y3Rvcixwcm90b1Byb3BzLHN0YXRpY1Byb3BzKXtpZihwcm90b1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpO2lmKHN0YXRpY1Byb3BzKWRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3Isc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9O30oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLGNhbGwpe2lmKCFzZWxmKXt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsJiYodHlwZW9mIGNhbGw9PT1cIm9iamVjdFwifHx0eXBlb2YgY2FsbD09PVwiZnVuY3Rpb25cIik/Y2FsbDpzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MmJnN1cGVyQ2xhc3MucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6c3ViQ2xhc3MsZW51bWVyYWJsZTpmYWxzZSx3cml0YWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlfX0pO2lmKHN1cGVyQ2xhc3MpT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcyxzdXBlckNsYXNzKTpzdWJDbGFzcy5fX3Byb3RvX189c3VwZXJDbGFzczt9ZnVuY3Rpb24gZmluZEluZGV4KGFycix0ZXN0KXt2YXIgZm91bmQ9dm9pZCAwO2Zvcih2YXIgaT0wLGxlbj1hcnIubGVuZ3RoO2k8bGVuO2krPTEpe2lmKHRlc3QoYXJyW2ldKSl7Zm91bmQ9aTticmVhazt9fXJldHVybiBmb3VuZDt9dmFyIFNlZ21lbnRlZENvbnRyb2w9ZnVuY3Rpb24oX1B1cmVDb21wb25lbnQpe19pbmhlcml0cyhTZWdtZW50ZWRDb250cm9sLF9QdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBTZWdtZW50ZWRDb250cm9sKCl7dmFyIF9yZWY7dmFyIF90ZW1wLF90aGlzLF9yZXQ7X2NsYXNzQ2FsbENoZWNrKHRoaXMsU2VnbWVudGVkQ29udHJvbCk7Zm9yKHZhciBfbGVuPWFyZ3VtZW50cy5sZW5ndGgsYXJncz1BcnJheShfbGVuKSxfa2V5PTA7X2tleTxfbGVuO19rZXkrKyl7YXJnc1tfa2V5XT1hcmd1bWVudHNbX2tleV07fXJldHVybiBfcmV0PShfdGVtcD0oX3RoaXM9X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywoX3JlZj1TZWdtZW50ZWRDb250cm9sLl9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKFNlZ21lbnRlZENvbnRyb2wpKS5jYWxsLmFwcGx5KF9yZWYsW3RoaXNdLmNvbmNhdChhcmdzKSkpLF90aGlzKSxfdGhpcy5zdGF0ZT17c2VsZWN0ZWRJbmRleDpudWxsfSxfdGhpcy5oYW5kbGVPcHRpb25TZWxlY3Rpb249ZnVuY3Rpb24oZXZlbnQpe3ZhciBpbmRleD1BcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuLGV2ZW50LnRhcmdldCk7aWYoX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCE9PWluZGV4KXtfdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDppbmRleH0sZnVuY3Rpb24oKXtfdGhpcy5wcm9wcy5vbk9wdGlvblNlbGVjdGVkKF90aGlzLnByb3BzLm9wdGlvbnNbX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF0sX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCk7fSk7fX0sX3RoaXMuZ2V0U2VsZWN0ZWRPcHRpb249ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMucHJvcHMub3B0aW9uc1tfdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XTt9LF90aGlzLmdldFNlbGVjdGVkT3B0aW9uSW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleDt9LF90aGlzLnNlbGVjdE9wdGlvbj1mdW5jdGlvbihvcHRpb24pe3JldHVybiBfdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDpfdGhpcy5wcm9wcy5vcHRpb25zLmluZGV4T2Yob3B0aW9uKX0pO30sX3RoaXMuc2VsZWN0T3B0aW9uQnlLZXk9ZnVuY3Rpb24oayx2KXtyZXR1cm4gX3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkSW5kZXg6ZmluZEluZGV4KF90aGlzLnByb3BzLm9wdGlvbnMsZnVuY3Rpb24ob3B0aW9uKXtyZXR1cm4gb3B0aW9uW2tdPT09djt9KX0pO30sX3RoaXMuc2VsZWN0T3B0aW9uSW5kZXg9ZnVuY3Rpb24oaW5kZXgpe3JldHVybiBfdGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDppbmRleH0pO30sX3RlbXApLF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLF9yZXQpO31fY3JlYXRlQ2xhc3MoU2VnbWVudGVkQ29udHJvbCxbe2tleTonaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4Jyx2YWx1ZTpmdW5jdGlvbiBpbmZlclNlbGVjdGVkT3B0aW9uSW5kZXgoKXt2YXIgcHJvcHM9YXJndW1lbnRzLmxlbmd0aD4wJiZhcmd1bWVudHNbMF0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzBdOnRoaXMucHJvcHM7dmFyIHN0YXRlPWFyZ3VtZW50cy5sZW5ndGg+MSYmYXJndW1lbnRzWzFdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1sxXTp0aGlzLnN0YXRlO3JldHVybiBmaW5kSW5kZXgocHJvcHMub3B0aW9ucyxmdW5jdGlvbihvcHRpb24pe3JldHVybiBvcHRpb24ucHJlc3NlZDt9KXx8c3RhdGUuc2VsZWN0ZWRJbmRleDt9fSx7a2V5Oidjb21wb25lbnRXaWxsTW91bnQnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpe3RoaXMuc2V0U3RhdGUoe3NlbGVjdGVkSW5kZXg6dGhpcy5pbmZlclNlbGVjdGVkT3B0aW9uSW5kZXgoKXx8dGhpcy5wcm9wcy5kZWZhdWx0T3B0aW9uU2VsZWN0ZWRJbmRleH0pO319LHtrZXk6J2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLHZhbHVlOmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKXtpZihuZXh0UHJvcHMub3B0aW9ucyE9PXRoaXMucHJvcHMub3B0aW9ucyl7dGhpcy5zZXRTdGF0ZSh7c2VsZWN0ZWRJbmRleDp0aGlzLmluZmVyU2VsZWN0ZWRPcHRpb25JbmRleChuZXh0UHJvcHMpfSk7fX19LHtrZXk6J3JlbmRlcicsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIF90aGlzMj10aGlzO3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmkoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJjcmVhdGVFbGVtZW50XCJdKShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfYm91bmRsZXNzX2Fycm93X2tleV9uYXZpZ2F0aW9uX19fZGVmYXVsdC5hLF9leHRlbmRzKHt9LF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9ib3VuZGxlc3NfdXRpbHNfb21pdF9rZXlzX19fZGVmYXVsdCgpKHRoaXMucHJvcHMsU2VnbWVudGVkQ29udHJvbC5pbnRlcm5hbEtleXMpLHtyb2xlOidyYWRpb2dyb3VwJyxjbGFzc05hbWU6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX2NsYXNzbmFtZXNfX19kZWZhdWx0KCkoJ2Itc2VnbWVudGVkLWNvbnRyb2wnLHRoaXMucHJvcHMuY2xhc3NOYW1lKSxtb2RlOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19ib3VuZGxlc3NfYXJyb3dfa2V5X25hdmlnYXRpb25fX19kZWZhdWx0LmEubW9kZS5IT1JJWk9OVEFMfSksdGhpcy5wcm9wcy5vcHRpb25zLm1hcChmdW5jdGlvbihwcm9wcyxpbmRleCl7cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfcmVhY3RfX1tcImNyZWF0ZUVsZW1lbnRcIl0pKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9ib3VuZGxlc3NfYnV0dG9uX19fZGVmYXVsdC5hLF9leHRlbmRzKHt9LHByb3BzLHtrZXk6cHJvcHMua2V5fHxpbmRleCwnYXJpYS1jaGVja2VkJzppbmRleD09PV90aGlzMi5zdGF0ZS5zZWxlY3RlZEluZGV4LGNvbXBvbmVudDpwcm9wcy5jb21wb25lbnR8fF90aGlzMi5wcm9wcy5vcHRpb25Db21wb25lbnQsY2xhc3NOYW1lOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9jbGFzc25hbWVzX19fZGVmYXVsdCgpKCdiLXNlZ21lbnRlZC1jb250cm9sLW9wdGlvbicscHJvcHMuY2xhc3NOYW1lLHsnYi1zZWdtZW50ZWQtY29udHJvbC1vcHRpb24tc2VsZWN0ZWQnOmluZGV4PT09X3RoaXMyLnN0YXRlLnNlbGVjdGVkSW5kZXh9KSxvblByZXNzZWQ6X3RoaXMyLmhhbmRsZU9wdGlvblNlbGVjdGlvbixwcmVzc2VkOmluZGV4PT09X3RoaXMyLnN0YXRlLnNlbGVjdGVkSW5kZXgscm9sZToncmFkaW8nfSkscHJvcHMuY2hpbGRyZW4pO30pKTt9fV0pO3JldHVybiBTZWdtZW50ZWRDb250cm9sO30oX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3JlYWN0X19bXCJQdXJlQ29tcG9uZW50XCJdKTtTZWdtZW50ZWRDb250cm9sLnByb3BUeXBlcz17JyonOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLmFueSxkZWZhdWx0T3B0aW9uU2VsZWN0ZWRJbmRleDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5udW1iZXIsb25PcHRpb25TZWxlY3RlZDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jLG9wdGlvbkNvbXBvbmVudDpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5vbmVPZlR5cGUoW19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnN0cmluZyxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5mdW5jXSksb3B0aW9uczpfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfcHJvcF90eXBlc19fX2RlZmF1bHQuYS5hcnJheU9mKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLnNoYXBlKHsnKic6X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX3Byb3BfdHlwZXNfX19kZWZhdWx0LmEuYW55LGNoaWxkcmVuOl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9wcm9wX3R5cGVzX19fZGVmYXVsdC5hLm5vZGV9KSkuaXNSZXF1aXJlZH07U2VnbWVudGVkQ29udHJvbC5kZWZhdWx0UHJvcHM9e2RlZmF1bHRPcHRpb25TZWxlY3RlZEluZGV4OjAsb25PcHRpb25TZWxlY3RlZDpmdW5jdGlvbiBvbk9wdGlvblNlbGVjdGVkKCl7fSxvcHRpb25Db21wb25lbnQ6J2J1dHRvbicsb3B0aW9uczpbXX07U2VnbWVudGVkQ29udHJvbC5pbnRlcm5hbEtleXM9T2JqZWN0LmtleXMoU2VnbWVudGVkQ29udHJvbC5kZWZhdWx0UHJvcHMpOy8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoU2VnbWVudGVkQ29udHJvbCk7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gaW5kZXguanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAwZjM5YmM5NzJmOWMyMjRhNTg1OSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Byb3AtdHlwZXMvaW5kZXguanMiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb25cIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb25cIn1cbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm91bmRsZXNzLWJ1dHRvblwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qczJcIjpcImJvdW5kbGVzcy1idXR0b25cIn1cbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm91bmRsZXNzLXV0aWxzLW9taXQta2V5c1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qczJcIjpcImJvdW5kbGVzcy11dGlscy1vbWl0LWtleXNcIn1cbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2xhc3NuYW1lc1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qczJcIjpcImNsYXNzbmFtZXNcIn1cbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJyZWFjdFwifVxuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvaW52YXJpYW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IEFycm93S2V5TmF2aWdhdGlvbiBmcm9tICdib3VuZGxlc3MtYXJyb3cta2V5LW5hdmlnYXRpb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdib3VuZGxlc3MtYnV0dG9uJztcbmltcG9ydCBvbWl0IGZyb20gJ2JvdW5kbGVzcy11dGlscy1vbWl0LWtleXMnO1xuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCB0ZXN0KSB7XG4gICAgbGV0IGZvdW5kO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAodGVzdChhcnJbaV0pKSB7XG4gICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbn1cblxuLyoqXG5TZWdtZW50ZWRDb250cm9sIGhhcyBtYW55IHBvdGVudGlhbCB1c2VzLCB0aGUgbW9zdCBjb21tb24gYmVpbmc6XG5cbjEuIFRoZSBjb250cm9scyBmb3IgYSB0YWJiZWQgdmlld1xuMi4gQSBtb2RlIHN3aXRjaFxuXG5Fc3NlbnRpYWxseSwgaXQgYmVoYXZlcyBsaWtlIGEgcmFkaW8gZ3JvdXAgd2l0aG91dCBhY3R1YWxseSB1c2luZyBpbnB1dCBjb250cm9scy4gT25seSBvbmUgb3B0aW9uIGNhbiBiZSBzZWxlY3RlZCBhdCBhIHRpbWUuXG5cbiMjIyBDb21wb25lbnQgSW5zdGFuY2UgTWV0aG9kc1xuXG4tIGBnZXRTZWxlY3RlZE9wdGlvbigpYCByZXRyaWV2ZXMgdGhlIG9wdGlvbiB0aGF0IGlzIHNlbGVjdGVkXG4tIGBnZXRTZWxlY3RlZE9wdGlvbkluZGV4KClgIHJldHJpZXZlcyB0aGUgaW5kZXggb2YgdGhlIG9wdGlvbiB0aGF0IGlzIHNlbGVjdGVkXG4tIGBzZWxlY3RPcHRpb24ob3B0aW9uKWAgYWxsb3dzIGZvciBwcm9ncmFtbWF0aWMgc3dpdGNoaW5nIG9mIHRoZSBhY3RpdmUgU2VnbWVudGVkQ29udHJvbCBvcHRpb25cbi0gYHNlbGVjdE9wdGlvbkJ5S2V5KGtleSwgdmFsdWUpYCBhbGxvd3MgZm9yIHByb2dyYW1tYXRpYyBzd2l0Y2hpbmcgb2YgdGhlIGFjdGl2ZSBTZWdtZW50ZWRDb250cm9sIG9wdGlvbiB1c2luZyBhIHVuaXF1ZSBrZXlcbi0gYHNlbGVjdE9wdGlvbkluZGV4KGluZGV4KWAgYWxsb3dzIGZvciBwcm9ncmFtbWF0aWMgc3dpdGNoaW5nIG9mIHRoZSBhY3RpdmUgU2VnbWVudGVkQ29udHJvbCBvcHRpb24gYnkgaW5kZXhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VnbWVudGVkQ29udHJvbCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICAgIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICovXG4gICAgICAgICcqJzogUHJvcFR5cGVzLmFueSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogc2V0cyB0aGUgaW5pdGlhbCBzZWxlY3RlZCBvcHRpb24gb24gZmlyc3QgbW91bnRcbiAgICAgICAgICovXG4gICAgICAgIGRlZmF1bHRPcHRpb25TZWxlY3RlZEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYWxsZWQgd2hlbiBhIGNoaWxkIGVsZW1lbnQgYmVjb21lcyBzZWxlY3RlZCB3aXRoIHRoZSBvcHRpb24gYW5kIG9wdGlvbiBpbmRleFxuICAgICAgICAgKi9cbiAgICAgICAgb25PcHRpb25TZWxlY3RlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHByb3ZpZGUgYSBjdXN0b21pemVkIGNvbXBvbmVudCB0eXBlIGlmIGRlc2lyZWQsIGVpdGhlciBhIEhUTUwgZWxlbWVudCBuYW1lIG9yIFJlYWN0Q29tcG9uZW50XG4gICAgICAgICAqL1xuICAgICAgICBvcHRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIFByb3BUeXBlcy5mdW5jLFxuICAgICAgICBdKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogcHJvcCBvYmplY3RzIHRvIGJlIGFwcGxpZWQgYWdhaW5zdCB0aGUgU2VnbWVudGVkQ29udHJvbCBidXR0b25zLCBhY2NlcHRzIGFueSB2YWxpZCBSZWFjdCBwcm9wc1xuICAgICAgICAgKlxuICAgICAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogYGBganN4XG4gICAgICAgICAqIG9wdGlvbnM9e1t7XG4gICAgICAgICAqICAgICBjaGlsZHJlbjogJ0ZvbycsXG4gICAgICAgICAqICAgICBjbGFzc05hbWU6ICdmb28nLFxuICAgICAgICAgKiB9LCB7XG4gICAgICAgICAqICAgICBjaGlsZHJlbjogPHNwYW4+QmFyPC9zcGFuPixcbiAgICAgICAgICogICAgICdkYXRhLWlkJzogJ2JhcicsXG4gICAgICAgICAqIH1dfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIG9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBhbnkgW1JlYWN0LXN1cHBvcnRlZCBhdHRyaWJ1dGVdKGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdGFncy1hbmQtYXR0cmlidXRlcy5odG1sI2h0bWwtYXR0cmlidXRlcylcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAnKic6IFByb3BUeXBlcy5hbnksXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKS5pc1JlcXVpcmVkLFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGRlZmF1bHRPcHRpb25TZWxlY3RlZEluZGV4OiAwLFxuICAgICAgICBvbk9wdGlvblNlbGVjdGVkOiAoKSA9PiB7fSxcbiAgICAgICAgb3B0aW9uQ29tcG9uZW50OiAnYnV0dG9uJyxcbiAgICAgICAgb3B0aW9uczogW10sXG4gICAgfVxuXG4gICAgc3RhdGljIGludGVybmFsS2V5cyA9IE9iamVjdC5rZXlzKFNlZ21lbnRlZENvbnRyb2wuZGVmYXVsdFByb3BzKVxuXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIHNlbGVjdGVkSW5kZXg6IG51bGwsXG4gICAgfVxuXG4gICAgaW5mZXJTZWxlY3RlZE9wdGlvbkluZGV4KHByb3BzID0gdGhpcy5wcm9wcywgc3RhdGUgPSB0aGlzLnN0YXRlKSB7XG4gICAgICAgIHJldHVybiBmaW5kSW5kZXgocHJvcHMub3B0aW9ucywgKG9wdGlvbikgPT4gb3B0aW9uLnByZXNzZWQpIHx8IHN0YXRlLnNlbGVjdGVkSW5kZXg7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogdGhpcy5pbmZlclNlbGVjdGVkT3B0aW9uSW5kZXgoKSB8fCB0aGlzLnByb3BzLmRlZmF1bHRPcHRpb25TZWxlY3RlZEluZGV4IH0pO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcHMub3B0aW9ucyAhPT0gdGhpcy5wcm9wcy5vcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogdGhpcy5pbmZlclNlbGVjdGVkT3B0aW9uSW5kZXgobmV4dFByb3BzKSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZU9wdGlvblNlbGVjdGlvbiA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2hpbGRyZW4sIGV2ZW50LnRhcmdldCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZEluZGV4OiBpbmRleCB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk9wdGlvblNlbGVjdGVkKHRoaXMucHJvcHMub3B0aW9uc1t0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhdLCB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWRPcHRpb24gPSAoKSA9PiB0aGlzLnByb3BzLm9wdGlvbnNbdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XVxuXG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldFNlbGVjdGVkT3B0aW9uSW5kZXggPSAoKSA9PiB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXhcblxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZWxlY3RPcHRpb24gPSAob3B0aW9uKSA9PiB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRJbmRleDogdGhpcy5wcm9wcy5vcHRpb25zLmluZGV4T2Yob3B0aW9uKSB9KVxuXG4gICAgLyoqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNlbGVjdE9wdGlvbkJ5S2V5ID0gKGssIHYpID0+IHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZEluZGV4OiBmaW5kSW5kZXgodGhpcy5wcm9wcy5vcHRpb25zLCAob3B0aW9uKSA9PiBvcHRpb25ba10gPT09IHYpIH0pXG5cbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2VsZWN0T3B0aW9uSW5kZXggPSAoaW5kZXgpID0+IHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZEluZGV4OiBpbmRleCB9KVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEFycm93S2V5TmF2aWdhdGlvblxuICAgICAgICAgICAgICAgIHsuLi5vbWl0KHRoaXMucHJvcHMsIFNlZ21lbnRlZENvbnRyb2wuaW50ZXJuYWxLZXlzKX1cbiAgICAgICAgICAgICAgICByb2xlPSdyYWRpb2dyb3VwJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goJ2Itc2VnbWVudGVkLWNvbnRyb2wnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSl9XG4gICAgICAgICAgICAgICAgbW9kZT17QXJyb3dLZXlOYXZpZ2F0aW9uLm1vZGUuSE9SSVpPTlRBTH0+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMub3B0aW9ucy5tYXAoKHByb3BzLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Byb3BzLmtleSB8fCBpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtY2hlY2tlZD17aW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD17cHJvcHMuY29tcG9uZW50IHx8IHRoaXMucHJvcHMub3B0aW9uQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeCgnYi1zZWdtZW50ZWQtY29udHJvbC1vcHRpb24nLCBwcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYi1zZWdtZW50ZWQtY29udHJvbC1vcHRpb24tc2VsZWN0ZWQnOiBpbmRleCA9PT0gdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ9e3RoaXMuaGFuZGxlT3B0aW9uU2VsZWN0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc3NlZD17aW5kZXggPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9J3JhZGlvJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Fycm93S2V5TmF2aWdhdGlvbj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWNrYWdlcy9ib3VuZGxlc3Mtc2VnbWVudGVkLWNvbnRyb2wvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9